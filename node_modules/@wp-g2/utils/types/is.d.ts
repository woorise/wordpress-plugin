export namespace is {
    export const blob: (o: any) => o is Blob;
    export { defined };
    export const file: (o: any) => o is File;
    export { numeric };
    export { numericZero };
    export { valueEmpty };
    export const objectInterpolation: (o: string | number | boolean | import("@emotion/utils").SerializedStyles | import("create-emotion").ComponentSelector | import("@emotion/serialize").Keyframes | TemplateStringsArray | import("create-emotion").ArrayInterpolation<undefined> | import("create-emotion").ObjectInterpolation<undefined> | null | undefined) => o is import("create-emotion").ObjectInterpolation<any>;
    export const array: {
        (value?: any): value is any[];
        <T>(value?: any): value is any[];
    };
    export const boolean: (value?: any) => value is boolean;
    export const date: (value?: any) => value is Date;
    export const empty: (value?: any) => boolean;
    const _function: (value: any) => value is (...args: any[]) => any;
    export { _function as function };
    export const map: (value?: any) => value is Map<any, any>;
    export const nan: typeof isNaN;
    export const nil: (value: any) => value is null | undefined;
    export const number: (value?: any) => value is number;
    const _null: (value: any) => value is null;
    export { _null as null };
    export const object: (value?: any) => value is object;
    export const objectLike: (value?: any) => boolean;
    export const plainObject: (value?: any) => boolean;
    export const regExp: (value?: any) => value is RegExp;
    export const set: (value?: any) => value is Set<any>;
    export const string: (value?: any) => value is string;
    export const symbol: (value: any) => value is symbol;
    export const undefined: (value: any) => value is undefined;
    export const weakSet: (value?: any) => value is WeakSet<object>;
    export const weakMap: (value?: any) => value is WeakMap<object, any>;
}
export default is;
/**
 * Checks to see if a value is not undefined and not null.
 *
 * @template T
 * @param {T} o
 *
 * @return {o is Exclude<T, undefined | null>} Whether value is defined.
 */
declare function defined<T>(o: T): o is Exclude<T, null | undefined>;
/**
 * Checks to see if a value is a numeric value (`number` or `string`).
 *
 * @param {any} o
 *
 * @return {boolean} Whether value is numeric.
 */
declare function numeric(o: any): boolean;
/**
 * Checks to see if a value is either `0` or `'0'`.
 *
 * @param {any} o
 *
 * @return {boolean} Whether value is a numeric `0`.
 */
declare function numericZero(o: any): boolean;
/**
 * Checks if a value is empty, null, or undefined.
 *
 * @param {any} value The value to check.
 *
 * @return {boolean} Whether value is empty.
 */
declare function valueEmpty(value: any): boolean;
//# sourceMappingURL=is.d.ts.map