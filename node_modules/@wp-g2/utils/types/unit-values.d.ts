/**
 * Handles legacy value + unit handling.
 * This component use to manage both incoming value and units separately.
 *
 * Moving forward, ideally the value should be a string that contains both
 * the value and unit, example: '10px'
 *
 * @param {number|string} value Value
 * @param {string} unit Unit value
 *
 * @return {ReturnType<parseUnitValue>} The extracted number and unit.
 */
export function getParsedValue(value: number | string, unit: string): [string | number | undefined, string | undefined];
/**
 * Checks if units are defined.
 *
 * @param {any} units Units to check.
 *
 * @return {boolean} Whether units are defined.
 */
export function hasUnits(units: any): boolean;
/**
 * Parses a number and unit from a value.
 *
 * @param {string | number} initialValue Value to parse
 *
 * @return {[number | string | undefined, string | undefined]} The extracted number and unit.
 */
export function parseUnitValue(initialValue: string | number): [number | string | undefined, string | undefined];
/**
 * Combines a value and a unit into a unit value.
 *
 * @param {string | number} value
 * @param {string} [unit]
 *
 * @return {string} The unit value.
 */
export function createUnitValue(value: string | number, unit?: string | undefined): string;
export function getParsedCSSValue(initialValue: string): number | string | undefined;
export function isValidCSSValueForProp(prop: string, value: string): boolean;
export function isValidNumericUnitValue(value: string): boolean;
//# sourceMappingURL=unit-values.d.ts.map