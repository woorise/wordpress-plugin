import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { isNil } from 'lodash';
import { useState } from 'react';
/**
 * Simplified and improved implementation of useControlledState.
 *
 * @template T
 * @param {object} props
 * @param {T} [props.defaultValue]
 * @param {T} [props.value]
 * @param {(value: T) => void} [props.onChange]
 * @return {[T|undefined, (value: T) => void]}
 */

export function useControlledValue(_ref) {
  var defaultValue = _ref.defaultValue,
      onChange = _ref.onChange,
      valueProp = _ref.value;
  var hasValue = !isNil(valueProp);
  var initialValue = hasValue ? valueProp : defaultValue;

  var _useState = useState(initialValue),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var value = hasValue ? valueProp : state;
  var setValue = hasValue && !isNil(onChange) ? onChange : setState;
  return [value, setValue];
}