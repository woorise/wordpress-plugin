import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function arrayMoveMutate(array, from, to) {
  var startIndex = from < 0 ? array.length + from : from;

  if (startIndex >= 0 && startIndex < array.length) {
    var endIndex = to < 0 ? array.length + to : to;

    var _array$splice = array.splice(from, 1),
        _array$splice2 = _slicedToArray(_array$splice, 1),
        item = _array$splice2[0];

    array.splice(endIndex, 0, item);
  }
}
/**
 * Moves an array item to a different position.
 *
 * See:
 * https://github.com/sindresorhus/array-move#readme
 *
 * @param {Array} array The array containing the items to move.
 * @param {number} from The source index.
 * @param {number} to The destination index.
 *
 * @return {Array} The updated array.
 */


export function arrayMove(array, from, to) {
  array = [].concat(array);
  arrayMoveMutate(array, from, to);
  return array;
}
/**
 * Creates an array prefilled with an amount.
 *
 * @param {number} amount
 * @return {Array<number>} The filled array.
 */

export function arrayFill(amount) {
  if (amount === void 0) {
    amount = 0;
  }

  return Array.from(Array(amount).keys());
}