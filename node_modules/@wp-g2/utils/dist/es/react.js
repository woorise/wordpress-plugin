import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { Children, isValidElement } from 'react';
/**
 * Merges React `ref` together.
 */

export { default as mergeRefs } from 'react-merge-refs';
/**
 * Copies non-react specific statics from a child component to a parent component.
 * Similar to Object.assign, but with React static keywords prevented from being overridden.
 */

export { default as hoistNonReactStatics } from 'hoist-non-react-statics';
/**
 * Gets a collection of available children elements from a React component's children prop.
 *
 * @param {import('react').ReactNode} children
 *
 * @return {import('react').ReactNodeArray} An array of available children.
 */

export function getValidChildren(children) {
  if (typeof children === 'string') return [children];
  return Children.toArray(children).filter(function (child) {
    return /*#__PURE__*/isValidElement(child);
  });
}
/**
 * Gets the displayName of a React Component or element.
 *
 * @param {string | import('react').ComponentType} tagName
 *
 * @return {string} The display name of the Component / tagName.
 */

export function getDisplayName(tagName) {
  var displayName = typeof tagName === 'string' ? tagName : tagName.displayName || tagName.name || 'Component';
  return displayName;
}
/**
 * Checks to see if a `children` prop is a render function prop.
 *
 * @param {*} children
 *
 * @return {boolean} True, if children is a render function prop.
 */

export function isRenderProp(children) {
  return typeof children === 'function';
}
/**
 * Handles the rendering of a React component's children prop, which
 * may be a render function prop.
 *
 * @param {*} children Children to render.
 * @param {*} props Props to pass into a (potential) children render function.
 *
 * @return {*} The rendered children.
 */

export function renderChildren(children, props) {
  if (props === void 0) {
    props = {};
  }

  if (isRenderProp(children)) {
    // eslint-disable-next-line no-unused-vars
    var _props = props,
        _ = _props.children,
        rest = _objectWithoutProperties(_props, ["children"]);

    return children(rest);
  }

  return children;
}