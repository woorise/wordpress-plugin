/**
 * Parses and retrieves a number value.
 *
 * @param {unknown} value The incoming value.
 *
 * @return {number} The parsed number value.
 */
export function getNumber(value) {
  var number = Number(value);
  return isNaN(number) ? 0 : number;
}
/**
 * Safely adds 2 values.
 *
 * @param {Array<number|string|undefined>} args Values to add together.
 *
 * @return {number} The sum of values.
 */

export function add() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.reduce(
  /** @type {(sum:number, arg: string | number | undefined) => number} */
  function (sum, arg) {
    return sum + getNumber(arg);
  }, 0);
}
/**
 * Safely subtracts 2 values.
 *
 * @param {Array<number|string|undefined>} args Values to subtract together.
 *
 * @return {number} The difference of the 2 values.
 */

export function subtract() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return (
    /** @type {number[]} */
    args.reduce(function (diff, arg, index) {
      /** @type {number} */
      var value = getNumber(arg);
      return index === 0 ? value :
      /** @type {number} */
      diff - value;
    })
  );
}
/**
 * Determines the decimal position of a number value.
 *
 * @param {number} value The number to evaluate.
 *
 * @return {number} The number of decimal places.
 */

export function getPrecision(value) {
  var split = (value + '').split('.');
  return split[1] !== undefined ? split[1].length : 0;
}