"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMediaQuery = useMediaQuery;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _react = require("react");

var _mediaQueries = require("../media-queries");

// For SSR
var __window = {};

if (typeof window !== 'undefined') {
  __window = window;
}

function mockMatchMedia() {
  return {
    addListener: _lodash.noop,
    removeListener: _lodash.noop
  };
}
/**
 * Checks to see if the media query matches the current viewport.
 *
 * Source:
 * https://github.com/jaredpalmer/the-platform
 *
 * @param {string | Object} query
 * @param {boolean} defaultMatches
 *
 * @return {boolean} Whether the query matches the current viewport.
 */


function useMediaQuery(query, defaultMatches) {
  if (defaultMatches === void 0) {
    defaultMatches = true;
  }

  var _useState = (0, _react.useState)(defaultMatches),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      matches = _useState2[0],
      setMatches = _useState2[1];

  var matchMedia = __window.matchMedia || mockMatchMedia;
  (0, _react.useEffect)(function () {
    var mediaQueryList = matchMedia(typeof query === 'string' ? query : (0, _mediaQueries.json2mq)(query));
    var active = true;

    var listener = function () {
      if (!active) {
        return;
      }

      if (mediaQueryList.matches) {
        setMatches(true);
      } else {
        setMatches(false);
      }
    };

    mediaQueryList.addListener(listener);
    setMatches(mediaQueryList.matches);
    return function () {
      active = false;
      mediaQueryList.removeListener(listener);
    };
  }, [matchMedia, query]);
  return matches;
}