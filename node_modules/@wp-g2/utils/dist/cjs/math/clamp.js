"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.roundClamp = roundClamp;
exports.roundClampString = roundClampString;

var _lodash = require("lodash");

var _base = require("./base");

/**
 * Clamps a value based on a min/max range with rounding
 *
 * @param {number} [value=0] The value.
 * @param {number} [min=-Infinity] The minimum range.
 * @param {number} [max=Infinity] The maximum range.
 * @param {number} [step=1] A multiplier for the value.
 *
 * @return {number} The rounded and clamped value.
 */
function roundClamp(value, min, max, step) {
  if (value === void 0) {
    value = 0;
  }

  if (min === void 0) {
    min = -Infinity;
  }

  if (max === void 0) {
    max = Infinity;
  }

  if (step === void 0) {
    step = 1;
  }

  var baseValue = (0, _base.getNumber)(value);
  var stepValue = (0, _base.getNumber)(step);
  var precision = (0, _base.getPrecision)(step);
  var rounded = Math.round(baseValue / stepValue) * stepValue;
  var clampedValue = (0, _lodash.clamp)(rounded, min, max);
  return precision ? (0, _base.getNumber)(clampedValue.toFixed(precision)) : clampedValue;
}
/**
 * Clamps a value based on a min/max range with rounding.
 * Returns a string.
 *
 * @param {Parameters<roundClamp>} args Arguments for roundClamp(). *
 *
 * @return {string} The rounded and clamped value.
 */


function roundClampString() {
  return roundClamp.apply(void 0, arguments).toString();
}