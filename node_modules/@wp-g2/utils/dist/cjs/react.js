"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValidChildren = getValidChildren;
exports.getDisplayName = getDisplayName;
exports.isRenderProp = isRenderProp;
exports.renderChildren = renderChildren;
Object.defineProperty(exports, "mergeRefs", {
  enumerable: true,
  get: function get() {
    return _reactMergeRefs.default;
  }
});
Object.defineProperty(exports, "hoistNonReactStatics", {
  enumerable: true,
  get: function get() {
    return _hoistNonReactStatics.default;
  }
});

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("react");

var _reactMergeRefs = _interopRequireDefault(require("react-merge-refs"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

/**
 * Merges React `ref` together.
 */

/**
 * Copies non-react specific statics from a child component to a parent component.
 * Similar to Object.assign, but with React static keywords prevented from being overridden.
 */

/**
 * Gets a collection of available children elements from a React component's children prop.
 *
 * @param {import('react').ReactNode} children
 *
 * @return {import('react').ReactNodeArray} An array of available children.
 */
function getValidChildren(children) {
  if (typeof children === 'string') return [children];
  return _react.Children.toArray(children).filter(function (child) {
    return /*#__PURE__*/(0, _react.isValidElement)(child);
  });
}
/**
 * Gets the displayName of a React Component or element.
 *
 * @param {string | import('react').ComponentType} tagName
 *
 * @return {string} The display name of the Component / tagName.
 */


function getDisplayName(tagName) {
  var displayName = typeof tagName === 'string' ? tagName : tagName.displayName || tagName.name || 'Component';
  return displayName;
}
/**
 * Checks to see if a `children` prop is a render function prop.
 *
 * @param {*} children
 *
 * @return {boolean} True, if children is a render function prop.
 */


function isRenderProp(children) {
  return typeof children === 'function';
}
/**
 * Handles the rendering of a React component's children prop, which
 * may be a render function prop.
 *
 * @param {*} children Children to render.
 * @param {*} props Props to pass into a (potential) children render function.
 *
 * @return {*} The rendered children.
 */


function renderChildren(children, props) {
  if (props === void 0) {
    props = {};
  }

  if (isRenderProp(children)) {
    // eslint-disable-next-line no-unused-vars
    var _props = props,
        _ = _props.children,
        rest = (0, _objectWithoutProperties2.default)(_props, ["children"]);
    return children(rest);
  }

  return children;
}