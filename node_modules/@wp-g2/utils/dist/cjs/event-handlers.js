"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeEvent = mergeEvent;
exports.mergeEventHandlers = mergeEventHandlers;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Merges event handlers together.
 *
 * @template TEvent
 * @param {(event: TEvent) => void} handler
 * @param {(event: TEvent) => void} otherHandler
 */
function mergeEvent(handler, otherHandler) {
  return function (
  /** @type {TEvent} */
  event) {
    if (typeof handler === 'function') {
      handler(event);
    }

    if (typeof otherHandler === 'function') {
      otherHandler(event);
    }
  };
}
/**
 * Merges a set of event handlers together.
 *
 * @template TEvent
 * @param {Record<string, (event: TEvent) => void>} handlers
 * @param {Record<string, (event: TEvent) => void>} extraHandlers
 */


function mergeEventHandlers(handlers, extraHandlers) {
  if (handlers === void 0) {
    handlers = {};
  }

  if (extraHandlers === void 0) {
    extraHandlers = {};
  }

  var mergedHandlers = _objectSpread({}, handlers);

  for (var _i = 0, _Object$entries = Object.entries(mergedHandlers); _i < _Object$entries.length; _i++) {
    var _ref3 = _Object$entries[_i];

    var _ref2 = (0, _slicedToArray2.default)(_ref3, 2);

    var key = _ref2[0];
    var handler = _ref2[1];

    if (typeof extraHandlers[key] === 'function') {
      mergedHandlers[key] = mergeEvent(handler, extraHandlers[key]);
    }
  }

  return mergedHandlers;
}