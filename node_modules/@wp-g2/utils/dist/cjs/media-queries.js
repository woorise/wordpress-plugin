"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json2mq = json2mq;

/**
 * Source:
 * https://github.com/akiran/json2mq
 */

/**
 * @param {string} str
 *
 * @return {string} The hyphenated string.
 */
function camel2hyphen(str) {
  return str.replace(/[A-Z]/g, function (match) {
    return '-' + match.toLowerCase();
  }).toLowerCase();
}
/**
 * @param {string} feature
 *
 * @return {boolean} If the value is either width or height.
 */


function isDimension(feature) {
  return /[height|width]$/.test(feature);
}
/**
 * @param {Record<string, boolean | string | number>} obj
 *
 * @return {string} The media query.
 */


function obj2mq(obj) {
  if (obj === void 0) {
    obj = {};
  }

  var mq = '';
  var features = Object.keys(obj);
  features.forEach(function (feature, index) {
    var value = obj[feature];
    feature = camel2hyphen(feature); // Add px to dimension features

    if (isDimension(feature) && typeof value === 'number') {
      value = value + 'px';
    }

    if (value === true) {
      mq += feature;
    } else if (value === false) {
      mq += 'not ' + feature;
    } else {
      mq += '(' + feature + ': ' + value + ')';
    }

    if (index < features.length - 1) {
      mq += ' and ';
    }
  });
  return mq;
}
/**
 * Generate media query string from JSON or javascript object.
 *
 * @param {string | Object} query
 *
 * @return {string} The media query.
 */


function json2mq(query) {
  var mq = '';

  if (typeof query === 'string') {
    return query;
  } // Handling array of media queries


  if (query instanceof Array) {
    query.forEach(function (q, index) {
      mq += obj2mq(q);

      if (index < query.length - 1) {
        mq += ', ';
      }
    });
    return mq;
  } // Handling single media query


  return obj2mq(query);
}