"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSelectedItem = exports.stateReducer = exports.itemToString = void 0;

var _utils = require("@wp-g2/utils");

var _downshift = require("downshift");

var itemToString = function (item) {
  return (item == null ? void 0 : item.name) || (item == null ? void 0 : item.label);
}; // This is needed so that in Windows, where
// the menu does not necessarily open on
// key up/down, you can still switch between
// options with the menu closed.


exports.itemToString = itemToString;

var stateReducer = function (_ref, _ref2) {
  var selectedItem = _ref.selectedItem;
  var changes = _ref2.changes,
      items = _ref2.props.items,
      type = _ref2.type;

  switch (type) {
    case _downshift.useSelect.stateChangeTypes.ToggleButtonKeyDownArrowDown:
      // If we already have a selected item, try to select the next one,
      // without circular navigation. Otherwise, select the first item.
      return {
        selectedItem: items[selectedItem ? Math.min(items.indexOf(selectedItem) + 1, items.length - 1) : 0]
      };

    case _downshift.useSelect.stateChangeTypes.ToggleButtonKeyDownArrowUp:
      // If we already have a selected item, try to select the previous one,
      // without circular navigation. Otherwise, select the last item.
      return {
        selectedItem: items[selectedItem ? Math.max(items.indexOf(selectedItem) - 1, 0) : items.length - 1]
      };

    default:
      return changes;
  }
};
/**
 * Retreives the current selected item from a collection of items.
 * This is useful to ensure the correct item is passed into Downshift for
 * it's internal equality checks.
 *
 * @param {Array<*>} items A collection of items
 * @param {*} value The current value
 *
 * @returns {*} The selected item.
 */


exports.stateReducer = stateReducer;

function _getSelectedItem(items, value) {
  if (items === void 0) {
    items = [];
  }

  if (_utils.is.plainObject(value)) {
    var selectedItem = items.find(function (i) {
      return (0, _utils.simpleEqual)(i, value);
    });
    return selectedItem || value;
  }

  return value;
}

var getSelectedItem = (0, _utils.memoize)(_getSelectedItem);
exports.getSelectedItem = getSelectedItem;