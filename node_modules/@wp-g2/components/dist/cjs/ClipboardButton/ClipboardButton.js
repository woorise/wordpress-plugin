"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _utils = require("@wp-g2/utils");

var _lodash = require("lodash");

var _react = _interopRequireWildcard(require("react"));

var _Button = require("../Button");

function ClipboardButton(props, forwardedRef) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'ClipboardButton'),
      text = _useContextSystem.text,
      _useContextSystem$onC = _useContextSystem.onClick,
      onClick = _useContextSystem$onC === void 0 ? _lodash.noop : _useContextSystem$onC,
      _useContextSystem$onC2 = _useContextSystem.onCopy,
      onCopyProp = _useContextSystem$onC2 === void 0 ? _lodash.noop : _useContextSystem$onC2,
      _useContextSystem$onF = _useContextSystem.onFinishCopy,
      onFinishCopy = _useContextSystem$onF === void 0 ? _lodash.noop : _useContextSystem$onF,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["text", "onClick", "onCopy", "onFinishCopy"]);

  var _useClipboard = (0, _utils.useClipboard)(text),
      hasCopied = _useClipboard.hasCopied,
      onCopy = _useClipboard.onCopy;

  var lastHasCopied = (0, _react.useRef)(hasCopied);
  (0, _react.useEffect)(function () {
    if (lastHasCopied.current === hasCopied) {
      return;
    }

    if (hasCopied) {
      onCopyProp();
    } else {
      onFinishCopy();
    }

    lastHasCopied.current = hasCopied;
  }, [hasCopied, onCopyProp, onFinishCopy]);
  var handleOnClick = (0, _react.useCallback)(function (event) {
    onClick(event);
    onCopy();
  }, [onClick, onCopy]);
  return /*#__PURE__*/_react.default.createElement(_Button.Button, Object.assign({}, otherProps, {
    onClick: handleOnClick,
    ref: forwardedRef
  }));
}

var _default = (0, _context.contextConnect)(ClipboardButton, 'ClipboardButton');

exports.default = _default;