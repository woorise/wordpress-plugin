"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _utils = require("@wp-g2/utils");

var _react = _interopRequireDefault(require("react"));

var _Card = require("../Card");

var _Heading = require("../Heading");

var _Icon = require("../Icon");

var _Text = require("../Text");

var _VStack = require("../VStack");

var styles = _interopRequireWildcard(require("./BlankSlate.styles"));

/**
 * @typedef Props
 * @property {import('react').ReactNode} [description]
 * @property {import('react').ReactNode} title
 * @property {import('react').ReactNode} [icon]
 */

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<Props, 'div'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */
function BlankSlate(props, forwardedRef) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'BlankSlate'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      description = _useContextSystem.description,
      icon = _useContextSystem.icon,
      title = _useContextSystem.title,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["children", "className", "description", "icon", "title"]);

  var _useResizeAware = (0, _utils.useResizeAware)(),
      _useResizeAware2 = (0, _slicedToArray2.default)(_useResizeAware, 2),
      resizeListener = _useResizeAware2[0],
      width = _useResizeAware2[1].width; // Since `useResizeObserver` will report a width of `null` until after the
  // first render, avoid applying any modifier classes until width is known.


  var modifierClassNames;

  if (typeof width === 'number') {
    modifierClassNames = {
      'is-large': width >= 320,
      'is-medium': width >= 160 && width < 320,
      'is-small': width < 160
    };
  }

  var classes = (0, _styles.cx)(className, modifierClassNames);
  return /*#__PURE__*/_react.default.createElement(_Card.Card, Object.assign({
    className: classes
  }, otherProps, {
    ref: forwardedRef
  }), resizeListener, /*#__PURE__*/_react.default.createElement(_Card.CardBody, {
    className: styles.CardBody
  }, /*#__PURE__*/_react.default.createElement(_VStack.VStack, null, /*#__PURE__*/_react.default.createElement(_Heading.Heading, {
    size: 1
  }, icon && /*#__PURE__*/_react.default.createElement(_Icon.Icon, {
    className: styles.Icon,
    icon: icon,
    inline: true
  }), title), description && /*#__PURE__*/_react.default.createElement(_Text.Text, null, description), children)));
}

var _default = (0, _context.contextConnect)(BlankSlate, 'BlankSlate');

exports.default = _default;