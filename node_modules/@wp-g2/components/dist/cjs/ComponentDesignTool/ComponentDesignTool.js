"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styles = require("@wp-g2/styles");

var _react = _interopRequireDefault(require("react"));

var styles = _interopRequireWildcard(require("./ComponentDesignTool.styles"));

function getPureBoxBounds(element) {
  if (!element) return new DOMRect();
  var bounds = element.getBoundingClientRect();
  var styles = window.getComputedStyle(element);
  var pt = parseFloat(styles.paddingTop);
  var pb = parseFloat(styles.paddingBottom);
  var pl = parseFloat(styles.paddingLeft);
  var pr = parseFloat(styles.paddingRight);
  var bt = parseFloat(styles.borderTop);
  var bb = parseFloat(styles.borderBottom);
  var bl = parseFloat(styles.borderLeft);
  var br = parseFloat(styles.borderRight);
  var t = pt + bt;
  var l = pl + bl;
  var width = bounds.width - l - (pr + br);
  var height = bounds.height - t - (pb + bb);
  var x = bounds.x + l;
  var y = bounds.y + t;
  var nextBounds = new DOMRect(x, y, width, height);
  return nextBounds;
}

function useMeasurements(_ref) {
  var _ref$enabled = _ref.enabled,
      enabled = _ref$enabled === void 0 ? true : _ref$enabled,
      _ref$opacity = _ref.opacity,
      opacity = _ref$opacity === void 0 ? 0.75 : _ref$opacity,
      _ref$showOnAltKeyOnly = _ref.showOnAltKeyOnly,
      showOnAltKeyOnly = _ref$showOnAltKeyOnly === void 0 ? true : _ref$showOnAltKeyOnly;

  var isHoldingAltRef = _react.default.useRef(false);

  var currentElementRef = _react.default.useRef();

  var currentElementOutlineRef = _react.default.useRef(document.createElement('div'));

  var currentParentElementOutlineRef = _react.default.useRef(document.createElement('div'));

  var rulerTopRef = _react.default.useRef(document.createElement('div'));

  var rulerBottomRef = _react.default.useRef(document.createElement('div'));

  var rulerLeftRef = _react.default.useRef(document.createElement('div'));

  var rulerRightRef = _react.default.useRef(document.createElement('div'));

  var labelTopRef = _react.default.useRef(document.createElement('div'));

  var labelBottomRef = _react.default.useRef(document.createElement('div'));

  var labelLeftRef = _react.default.useRef(document.createElement('div'));

  var labelRightRef = _react.default.useRef(document.createElement('div'));

  var parentSizeLabelRef = _react.default.useRef(document.createElement('div'));

  var sizeLabelRef = _react.default.useRef(document.createElement('div'));

  _react.default.useEffect(function () {
    var handleOnKeyDown = function (event) {
      if (event.altKey) {
        isHoldingAltRef.current = true;
      }
    };

    var handleOnKeyUp = function () {
      isHoldingAltRef.current = false;
    };

    window.addEventListener('keydown', handleOnKeyDown);
    window.addEventListener('keyup', handleOnKeyUp);
    return function () {
      window.removeEventListener('keydown', handleOnKeyDown);
      window.removeEventListener('keyup', handleOnKeyUp);
    };
  }, []);

  _react.default.useEffect(function () {
    var currentElementOutline = currentElementOutlineRef.current;
    var currentParentElementOutline = currentParentElementOutlineRef.current;

    if (!enabled) {
      if (document.body.contains(currentElementOutline)) {
        document.body.removeChild(currentElementOutline);
      }

      if (document.body.contains(currentParentElementOutline)) {
        document.body.removeChild(currentParentElementOutline);
      }

      return;
    }

    currentElementOutline.classList.add(styles.ElementOutline);
    currentElementOutline.id = 'ComponentDesignToolCurrentElementOutline';
    document.body.appendChild(currentElementOutline);
    currentParentElementOutline.classList.add(styles.ParentElementOutline);
    currentParentElementOutline.id = 'ComponentDesignToolCurrentParentElementOutline';
    document.body.appendChild(currentParentElementOutline);
    var rulerTop = rulerTopRef.current;
    var rulerBottom = rulerBottomRef.current;
    var rulerLeft = rulerLeftRef.current;
    var rulerRight = rulerRightRef.current;
    rulerTop.classList.add(styles.RulerT);
    rulerBottom.classList.add(styles.RulerB);
    rulerLeft.classList.add(styles.RulerL);
    rulerRight.classList.add(styles.RulerR);
    var labelTop = labelTopRef.current;
    var labelBottom = labelBottomRef.current;
    var labelLeft = labelLeftRef.current;
    var labelRight = labelRightRef.current;
    labelTop.classList.add(styles.LabelT);
    labelBottom.classList.add(styles.LabelB);
    labelLeft.classList.add(styles.LabelL);
    labelRight.classList.add(styles.LabelR);
    var parentSizeLabel = parentSizeLabelRef.current;
    parentSizeLabel.classList.add(styles.ParentSizeLabel);
    var sizeLabel = sizeLabelRef.current;
    sizeLabel.classList.add(styles.SizeLabel);
    currentParentElementOutline.appendChild(rulerTop);
    currentParentElementOutline.appendChild(rulerBottom);
    currentParentElementOutline.appendChild(rulerLeft);
    currentParentElementOutline.appendChild(rulerRight);
    currentParentElementOutline.appendChild(labelLeft);
    currentParentElementOutline.appendChild(labelRight);
    currentParentElementOutline.appendChild(labelTop);
    currentParentElementOutline.appendChild(labelBottom);
    currentParentElementOutline.appendChild(parentSizeLabel);
    currentElementOutline.appendChild(sizeLabel);
    currentElementOutline.style.opacity = opacity;
    currentParentElementOutline.style.opacity = opacity;
    return function () {
      if (document.body.contains(currentElementOutline)) {
        document.body.removeChild(currentElementOutline);
      }

      if (document.body.contains(currentParentElementOutline)) {
        document.body.removeChild(currentParentElementOutline);
      }
    };
  }, [enabled, opacity, showOnAltKeyOnly]);

  _react.default.useEffect(function () {
    var handleOnMouseMove = function (event) {
      var target = event.target;
      var shouldEnableOnAlt = showOnAltKeyOnly ? isHoldingAltRef.current : true;
      /**
       * Disallow for <html /> and <body /> or if holding alt is void.
       */

      if ([document.body, document.documentElement].includes(target) || !shouldEnableOnAlt) {
        currentElementOutlineRef.current.style.display = 'none';
        currentParentElementOutlineRef.current.style.display = 'none';
        return;
      }

      if (currentElementRef.current === target) {
        return;
      }

      currentElementRef.current = target;
      var bounds = getPureBoxBounds(target);
      var h = bounds.height,
          w = bounds.width;
      var sizeThreshold = 3;
      var currentWalkElement = target;
      var currentWalkAttempCount = 0;
      var parentElement;
      var keepSearching = true;
      /**
       * Find the closest parent element with dimensions larger than the current target.
       */

      while (keepSearching && currentWalkElement) {
        var closestParent = currentWalkElement.parentElement;

        var _getPureBoxBounds = getPureBoxBounds(closestParent),
            ph = _getPureBoxBounds.height,
            pw = _getPureBoxBounds.width;

        if (pw > w + sizeThreshold && ph > h + sizeThreshold && !parentElement) {
          keepSearching = false;
          parentElement = closestParent;
        }

        if (currentWalkAttempCount < 10) {
          currentWalkAttempCount++;
          currentWalkElement = closestParent;
        } else {
          keepSearching = false;
        }
      }
      /**
       * Short circuit if no valid parent element can be found.
       */


      if (!parentElement) {
        currentElementOutlineRef.current.style.display = 'none';
        currentParentElementOutlineRef.current.style.display = 'none';
        return;
      }
      /**
       * Get the bounds of the parent element.
       */


      var parentBounds = parentElement.getBoundingClientRect();
      /**
       * Position the outlines.
       */

      if (!bounds.width && !bounds.height) {
        currentElementOutlineRef.current.style.display = 'none';
      } else {
        currentElementOutlineRef.current.style.display = 'block';
      }

      if (!parentBounds.width && !parentBounds.height) {
        currentParentElementOutlineRef.current.style.display = 'none';
      } else {
        currentParentElementOutlineRef.current.style.display = 'block';
      }

      var currentElementOutline = currentElementOutlineRef.current;
      currentElementOutline.style.top = _styles.ui.value.px(bounds.top);
      currentElementOutline.style.left = _styles.ui.value.px(bounds.left);
      currentElementOutline.style.width = _styles.ui.value.px(bounds.width);
      currentElementOutline.style.height = _styles.ui.value.px(bounds.height);
      var currentParentElementOutline = currentParentElementOutlineRef.current;
      currentParentElementOutline.style.top = _styles.ui.value.px(parentBounds.top);
      currentParentElementOutline.style.left = _styles.ui.value.px(parentBounds.left);
      currentParentElementOutline.style.width = _styles.ui.value.px(parentBounds.width);
      currentParentElementOutline.style.height = _styles.ui.value.px(parentBounds.height);
      /**
       * Position the rulers.
       */

      var rulerTop = rulerTopRef.current;
      var rulerBottom = rulerBottomRef.current;
      var rulerLeft = rulerLeftRef.current;
      var rulerRight = rulerRightRef.current;
      var vt = bounds.top - parentBounds.top;
      var vb = parentBounds.height - (vt + bounds.height);
      var vl = bounds.left - parentBounds.left;
      var vr = parentBounds.width - (bounds.left - parentBounds.left + bounds.width);
      rulerTop.style.height = _styles.ui.value.px(vt);
      rulerTop.style.top = _styles.ui.value.px(0);
      rulerTop.style.left = _styles.ui.value.px(vl + bounds.width / 2);
      rulerBottom.style.height = _styles.ui.value.px(vb);
      rulerBottom.style.bottom = _styles.ui.value.px(0);
      rulerBottom.style.left = _styles.ui.value.px(vl + bounds.width / 2);
      rulerLeft.style.width = _styles.ui.value.px(vl);
      rulerLeft.style.left = _styles.ui.value.px(0);
      rulerLeft.style.top = _styles.ui.value.px(vt + bounds.height / 2);
      rulerRight.style.width = _styles.ui.value.px(vr);
      rulerRight.style.right = _styles.ui.value.px(0);
      rulerRight.style.top = _styles.ui.value.px(vt + bounds.height / 2);
      /**
       * Position the labels.
       */

      var labelTop = labelTopRef.current;
      var labelBottom = labelBottomRef.current;
      var labelLeft = labelLeftRef.current;
      var labelRight = labelRightRef.current;
      labelTop.style.left = _styles.ui.value.px(vl + bounds.width / 2);
      labelBottom.style.left = _styles.ui.value.px(vl + bounds.width / 2);
      labelLeft.style.top = _styles.ui.value.px(vt + bounds.height / 2);
      labelRight.style.top = _styles.ui.value.px(vt + bounds.height / 2);
      labelTop.innerHTML = Math.round(vt);
      labelBottom.innerHTML = Math.round(vb);
      labelLeft.innerHTML = Math.round(vl);
      labelRight.innerHTML = Math.round(vr);
      /**
       * Position the size labels.
       */

      var parentSizeLabel = parentSizeLabelRef.current;
      parentSizeLabel.innerHTML = Math.round(parentBounds.width) + " x " + Math.round(parentBounds.height);
      var sizeLabel = sizeLabelRef.current;
      sizeLabel.innerHTML = Math.round(bounds.width) + " x " + Math.round(bounds.height);
    };

    var handleOnMouseOut = function () {
      currentElementOutlineRef.current.style.display = 'none';
      currentParentElementOutlineRef.current.style.display = 'none';
    };

    window.addEventListener('mousemove', handleOnMouseMove);
    document.addEventListener('mouseleave', handleOnMouseOut);
    return function () {
      window.removeEventListener('mousemove', handleOnMouseMove);
      document.removeEventListener('mouseleave', handleOnMouseOut);
    };
  }, [showOnAltKeyOnly]);
}

function ComponentDesignTool(props) {
  var _props$enableOutlines = props.enableOutlines,
      enableOutlines = _props$enableOutlines === void 0 ? true : _props$enableOutlines,
      _props$outlinesOpacit = props.outlinesOpacity,
      outlinesOpacity = _props$outlinesOpacit === void 0 ? 0.75 : _props$outlinesOpacit,
      _props$showOnAltKeyOn = props.showOnAltKeyOnly,
      showOnAltKeyOnly = _props$showOnAltKeyOn === void 0 ? true : _props$showOnAltKeyOn;
  useMeasurements({
    enabled: enableOutlines,
    opacity: outlinesOpacity,
    showOnAltKeyOnly: showOnAltKeyOnly
  });
  return null;
}

var _default = /*#__PURE__*/_react.default.memo(ComponentDesignTool);

exports.default = _default;