"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBaseButton = useBaseButton;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _ControlGroup = require("../ControlGroup");

var _Flex = require("../Flex");

var styles = _interopRequireWildcard(require("./BaseButton.styles"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'button'>} props
 */
function useBaseButton(props) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'BaseButton'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      cssProp = _useContextSystem.css,
      currentColor = _useContextSystem.currentColor,
      _useContextSystem$dis = _useContextSystem.disabled,
      disabled = _useContextSystem$dis === void 0 ? false : _useContextSystem$dis,
      _useContextSystem$ele = _useContextSystem.elevation,
      elevation = _useContextSystem$ele === void 0 ? 0 : _useContextSystem$ele,
      elevationActive = _useContextSystem.elevationActive,
      elevationFocus = _useContextSystem.elevationFocus,
      elevationHover = _useContextSystem.elevationHover,
      _useContextSystem$gap = _useContextSystem.gap,
      gap = _useContextSystem$gap === void 0 ? 2 : _useContextSystem$gap,
      _useContextSystem$has = _useContextSystem.hasCaret,
      hasCaret = _useContextSystem$has === void 0 ? false : _useContextSystem$has,
      href = _useContextSystem.href,
      icon = _useContextSystem.icon,
      _useContextSystem$ico = _useContextSystem.iconSize,
      iconSize = _useContextSystem$ico === void 0 ? 16 : _useContextSystem$ico,
      _useContextSystem$isB = _useContextSystem.isBlock,
      isBlock = _useContextSystem$isB === void 0 ? false : _useContextSystem$isB,
      _useContextSystem$isC = _useContextSystem.isControl,
      isControl = _useContextSystem$isC === void 0 ? false : _useContextSystem$isC,
      _useContextSystem$isD = _useContextSystem.isDestructive,
      isDestructive = _useContextSystem$isD === void 0 ? false : _useContextSystem$isD,
      _useContextSystem$isL = _useContextSystem.isLoading,
      isLoading = _useContextSystem$isL === void 0 ? false : _useContextSystem$isL,
      _useContextSystem$isN = _useContextSystem.isNarrow,
      isNarrow = _useContextSystem$isN === void 0 ? false : _useContextSystem$isN,
      _useContextSystem$isR = _useContextSystem.isRounded,
      isRounded = _useContextSystem$isR === void 0 ? false : _useContextSystem$isR,
      _useContextSystem$isS = _useContextSystem.isSplit,
      isSplit = _useContextSystem$isS === void 0 ? false : _useContextSystem$isS,
      _useContextSystem$isS2 = _useContextSystem.isSubtle,
      isSubtle = _useContextSystem$isS2 === void 0 ? false : _useContextSystem$isS2,
      _useContextSystem$jus = _useContextSystem.justify,
      justify = _useContextSystem$jus === void 0 ? 'center' : _useContextSystem$jus,
      _useContextSystem$noW = _useContextSystem.noWrap,
      noWrap = _useContextSystem$noW === void 0 ? true : _useContextSystem$noW,
      prefix = _useContextSystem.prefix,
      _useContextSystem$siz = _useContextSystem.size,
      size = _useContextSystem$siz === void 0 ? 'medium' : _useContextSystem$siz,
      suffix = _useContextSystem.suffix,
      _useContextSystem$tex = _useContextSystem.textAlign,
      textAlign = _useContextSystem$tex === void 0 ? 'center' : _useContextSystem$tex,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["children", "className", "css", "currentColor", "disabled", "elevation", "elevationActive", "elevationFocus", "elevationHover", "gap", "hasCaret", "href", "icon", "iconSize", "isBlock", "isControl", "isDestructive", "isLoading", "isNarrow", "isRounded", "isSplit", "isSubtle", "justify", "noWrap", "prefix", "size", "suffix", "textAlign"]);

  var _useFlex = (0, _Flex.useFlex)({
    gap: gap,
    justify: justify
  }),
      flexClassName = _useFlex.className,
      flexProps = (0, _objectWithoutProperties2.default)(_useFlex, ["className"]);

  var as = href ? 'a' : 'button';

  var _useControlGroupConte = (0, _ControlGroup.useControlGroupContext)(),
      controlGroupStyles = _useControlGroupConte.styles;

  var classes = (0, _styles.cx)(flexClassName, styles.Button, isBlock && styles.block, isDestructive && styles.destructive, styles[size], !!icon && !children && styles.icon, isSubtle && styles.subtle, isControl && styles.control, isSubtle && isControl && styles.subtleControl, controlGroupStyles, isRounded && styles.rounded, isNarrow && styles.narrow, isSplit && styles.split, currentColor && styles.currentColor, (0, _styles.css)({
    textAlign: textAlign
  }), (0, _styles.css)(cssProp), className);
  return _objectSpread(_objectSpread({}, flexProps), {}, {
    as: as,
    href: href,
    children: children,
    disabled: disabled,
    elevation: elevation,
    className: classes,
    elevationActive: elevationActive,
    elevationFocus: elevationFocus,
    elevationHover: elevationHover,
    hasCaret: hasCaret,
    icon: icon,
    isDestructive: isDestructive,
    prefix: prefix,
    suffix: suffix,
    iconSize: iconSize,
    isLoading: isLoading,
    noWrap: noWrap
  }, otherProps);
}