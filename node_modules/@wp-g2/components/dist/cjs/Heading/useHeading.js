"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHeading = useHeading;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _Text = require("../Text");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'div'>} props
 */
function useHeading(props) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'Heading'),
      _useContextSystem$siz = _useContextSystem.size,
      size = _useContextSystem$siz === void 0 ? 3 : _useContextSystem$siz,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["size"]);

  var textProps = (0, _Text.useText)(_objectSpread({
    color: _styles.ui.get('colorTextHeading'),
    size: (0, _styles.getHeadingFontSize)(size),
    isBlock: true,
    weight: _styles.ui.get('fontWeightHeading')
  }, otherProps));
  return textProps;
}