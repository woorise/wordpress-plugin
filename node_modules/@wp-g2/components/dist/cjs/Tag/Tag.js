"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _utils = require("@wp-g2/utils");

var _react = _interopRequireDefault(require("react"));

var _Text = require("../Text");

var styles = _interopRequireWildcard(require("./Tag.styles"));

var _Tag2 = require("./Tag.utils");

var _TagRemoveButton = _interopRequireDefault(require("./TagRemoveButton"));

var TagView = styles.TagView;

function Tag(props, forwardedRef) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'Tag'),
      children = _useContextSystem.children,
      _useContextSystem$col = _useContextSystem.color,
      color = _useContextSystem$col === void 0 ? 'standard' : _useContextSystem$col,
      _useContextSystem$dis = _useContextSystem.display,
      display = _useContextSystem$dis === void 0 ? 'inline-flex' : _useContextSystem$dis,
      href = _useContextSystem.href,
      _useContextSystem$onR = _useContextSystem.onRemove,
      onRemove = _useContextSystem$onR === void 0 ? _utils.noop : _useContextSystem$onR,
      removeButtonText = _useContextSystem.removeButtonText,
      className = _useContextSystem.className,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["children", "color", "display", "href", "onRemove", "removeButtonText", "className"]);

  var tagColor = _Tag2.TAG_COLORS[color] || _Tag2.TAG_COLORS.standard;
  var sx = {};
  sx.base = (0, _styles.css)({
    display: display
  });
  var classes = (0, _styles.cx)(sx.base, styles.getBackground({
    color: tagColor
  }), styles.getBackgroundText({
    color: tagColor
  }), className);
  var asProp = href ? 'a' : 'span';
  return /*#__PURE__*/_react.default.createElement(TagView, Object.assign({}, otherProps, {
    as: asProp,
    className: classes,
    href: href,
    ref: forwardedRef
  }), /*#__PURE__*/_react.default.createElement(_Text.Text, {
    className: styles.text,
    color: "currentColor",
    isBlock: true,
    lineHeight: 1,
    truncate: true
  }, children), /*#__PURE__*/_react.default.createElement(_TagRemoveButton.default, {
    onClick: onRemove,
    removeButtonText: removeButtonText
  }));
}

var _default = (0, _context.contextConnect)(Tag, 'Tag');

exports.default = _default;