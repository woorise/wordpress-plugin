"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSwitch = useSwitch;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _utils = require("@wp-g2/utils");

var _react = require("react");

var _reakit = require("reakit");

var _FormGroup = require("../FormGroup");

var styles = _interopRequireWildcard(require("./Switch.styles"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ControlComponent = {
  checkbox: _reakit.Checkbox,
  radio: _reakit.Radio
};

function useSwitch(props) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'Switch'),
      checkedProp = _useContextSystem.checked,
      className = _useContextSystem.className,
      defaultValue = _useContextSystem.defaultValue,
      _useContextSystem$dis = _useContextSystem.disabled,
      disabled = _useContextSystem$dis === void 0 ? false : _useContextSystem$dis,
      idProp = _useContextSystem.id,
      _useContextSystem$isF = _useContextSystem.isFocused,
      isFocusedProp = _useContextSystem$isF === void 0 ? false : _useContextSystem$isF,
      error = _useContextSystem.error,
      _useContextSystem$onB = _useContextSystem.onBlur,
      onBlur = _useContextSystem$onB === void 0 ? _utils.noop : _useContextSystem$onB,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? _utils.noop : _useContextSystem$onC,
      _useContextSystem$onF = _useContextSystem.onFocus,
      onFocus = _useContextSystem$onF === void 0 ? _utils.noop : _useContextSystem$onF,
      label = _useContextSystem.label,
      _useContextSystem$siz = _useContextSystem.size,
      size = _useContextSystem$siz === void 0 ? 'medium' : _useContextSystem$siz,
      _useContextSystem$typ = _useContextSystem.type,
      type = _useContextSystem$typ === void 0 ? 'checkbox' : _useContextSystem$typ,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["checked", "className", "defaultValue", "disabled", "id", "isFocused", "error", "onBlur", "onChange", "onFocus", "label", "size", "type"]);

  var _useState = (0, _react.useState)(isFocusedProp),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var _useControlledState = (0, _utils.useControlledState)(checkedProp, {
    initial: defaultValue || false
  }),
      _useControlledState2 = (0, _slicedToArray2.default)(_useControlledState, 2),
      checked = _useControlledState2[0],
      setChecked = _useControlledState2[1];

  var uniqueId = (0, _utils.useUniqueId)(useSwitch, 'switch', idProp);

  var _useFormGroupContext = (0, _FormGroup.useFormGroupContext)(),
      horizontal = _useFormGroupContext.horizontal,
      contextId = _useFormGroupContext.id;

  var Component = ControlComponent[type] || _reakit.Checkbox;
  var classes = (0, _styles.cx)(styles.Switch, styles[size], disabled && styles.disabled, contextId && horizontal && styles.formGroup, className);
  var handleOnChange = (0, _react.useCallback)(function (event) {
    var next = event.target.checked;
    setChecked(next);
    onChange(next, {
      event: event
    });
  }, [onChange, setChecked]);
  var handleOnBlur = (0, _react.useCallback)(function (event) {
    onBlur(event);
    setIsFocused(false);
  }, [onBlur]);
  var handleOnFocus = (0, _react.useCallback)(function (event) {
    onFocus(event);
    setIsFocused(true);
  }, [onFocus]);
  return _objectSpread(_objectSpread({}, otherProps), {}, {
    checked: checked,
    className: classes,
    Component: Component,
    id: idProp || contextId || uniqueId,
    disabled: disabled,
    error: error,
    isFocused: isFocused,
    label: label,
    onBlur: handleOnBlur,
    onChange: handleOnChange,
    onFocus: handleOnFocus,
    size: size
  });
}