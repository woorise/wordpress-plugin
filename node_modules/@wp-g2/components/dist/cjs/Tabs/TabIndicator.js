"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _Tabs = require("./Tabs.Context");

var styles = _interopRequireWildcard(require("./Tabs.styles"));

var TabIndicatorView = styles.TabIndicatorView;

function TabIndicator() {
  var _useTabsContext = (0, _Tabs.useTabsContext)(),
      containerRef = _useTabsContext.listRef,
      sizes = _useTabsContext.sizes,
      tab = _useTabsContext.tab;

  var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      left = _useState2[0],
      setLeft = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      width = _useState4[0],
      setWidth = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      canAnimate = _useState6[0],
      setCanAnimate = _useState6[1];

  var containerWidth = sizes == null ? void 0 : sizes.width;
  (0, _react.useEffect)(function () {
    var _currentItem$ref;

    var containerNode = containerRef == null ? void 0 : containerRef.current;
    if (!containerNode) return;
    /**
     * Workaround for Reakit
     */

    var items = tab.items,
        selectedId = tab.selectedId;
    var currentItem = items.find(function (item) {
      return item.id === selectedId;
    });
    var targetNode = currentItem == null ? void 0 : (_currentItem$ref = currentItem.ref) == null ? void 0 : _currentItem$ref.current;
    if (!targetNode) return;

    var _containerNode$getBou = containerNode.getBoundingClientRect(),
        parentX = _containerNode$getBou.x;

    var _targetNode$getBoundi = targetNode.getBoundingClientRect(),
        offsetWidth = _targetNode$getBoundi.width,
        x = _targetNode$getBoundi.x;

    setLeft(x - parentX);
    setWidth(offsetWidth);

    if (!canAnimate) {
      requestAnimationFrame(function () {
        if (offsetWidth) {
          setCanAnimate(true);
        }
      });
    }
  }, [canAnimate, containerRef, containerWidth, tab]);
  var viewStyle = {
    transform: "translateX(" + left + "px)",
    transition: canAnimate ? null : 'none',
    width: width
  };
  return /*#__PURE__*/_react.default.createElement(TabIndicatorView, {
    role: "presentation",
    style: viewStyle
  });
}

var _default = /*#__PURE__*/_react.default.memo(TabIndicator);

exports.default = _default;