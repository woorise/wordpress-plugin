"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFontSizeControl = useFontSizeControl;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _i18n = require("@wordpress/i18n");

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _utils = require("@wp-g2/utils");

var _react = _interopRequireDefault(require("react"));

var styles = _interopRequireWildcard(require("./font-size-control-styles"));

var _fontSizeControlUtils = require("./font-size-control-utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function useFontSizeControl(props) {
  var _fontSizes$;

  var _useContextSystem = (0, _context.useContextSystem)(props, 'FontSizeControl'),
      className = _useContextSystem.className,
      _useContextSystem$cus = _useContextSystem.customLabel,
      customLabel = _useContextSystem$cus === void 0 ? (0, _i18n.__)('Custom') : _useContextSystem$cus,
      disableCustomFontSizes = _useContextSystem.disableCustomFontSizes,
      _useContextSystem$dis = _useContextSystem.disabled,
      disabled = _useContextSystem$dis === void 0 ? false : _useContextSystem$dis,
      _useContextSystem$fon = _useContextSystem.fontSizes,
      fontSizes = _useContextSystem$fon === void 0 ? [] : _useContextSystem$fon,
      isPreviewable = _useContextSystem.isPreviewable,
      _useContextSystem$lab = _useContextSystem.label,
      label = _useContextSystem$lab === void 0 ? (0, _i18n.__)('Font size') : _useContextSystem$lab,
      _useContextSystem$max = _useContextSystem.max,
      max = _useContextSystem$max === void 0 ? 100 : _useContextSystem$max,
      maxWidth = _useContextSystem.maxWidth,
      _useContextSystem$min = _useContextSystem.min,
      min = _useContextSystem$min === void 0 ? 1 : _useContextSystem$min,
      minWidth = _useContextSystem.minWidth,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? _utils.noop : _useContextSystem$onC,
      onClose = _useContextSystem.onClose,
      onOpen = _useContextSystem.onOpen,
      placeholder = _useContextSystem.placeholder,
      size = _useContextSystem.size,
      value = _useContextSystem.value,
      _useContextSystem$wit = _useContextSystem.withSlider,
      withSlider = _useContextSystem$wit === void 0 ? false : _useContextSystem$wit,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["className", "customLabel", "disableCustomFontSizes", "disabled", "fontSizes", "isPreviewable", "label", "max", "maxWidth", "min", "minWidth", "onChange", "onClose", "onOpen", "placeholder", "size", "value", "withSlider"]);

  var hasUnits = (0, _fontSizeControlUtils.hasUnit)(value || ((_fontSizes$ = fontSizes[0]) == null ? void 0 : _fontSizes$.size));
  var hasCustomValue = (0, _fontSizeControlUtils.isCustomValue)(fontSizes, value);

  var options = _react.default.useMemo(function () {
    return (0, _fontSizeControlUtils.getSelectOptions)({
      options: fontSizes,
      disableCustomFontSizes: disableCustomFontSizes,
      hasCustomValue: hasCustomValue
    });
  }, [fontSizes, disableCustomFontSizes, hasCustomValue]);

  var handleOnReset = _react.default.useCallback(function () {
    onChange(undefined);
  }, [onChange]);

  var handleOnChange = _react.default.useCallback(function (_ref) {
    var selectedItem = _ref.selectedItem;
    if ((0, _fontSizeControlUtils.isCustomSelectedItem)(selectedItem)) return;

    if (hasUnits) {
      onChange(selectedItem.size);
    } else {
      if (_utils.is.defined(selectedItem.size)) {
        onChange(Number(selectedItem.size));
      } else {
        handleOnReset();
      }
    }
  }, [handleOnReset, hasUnits, onChange]);

  var handleOnInputChange = _react.default.useCallback(function (next) {
    if (!next && next !== 0) {
      handleOnReset();
      return;
    }

    if (hasUnits) {
      onChange((0, _utils.createUnitValue)(next, 'px'));
    } else {
      onChange(Number(next));
    }
  }, [handleOnReset, hasUnits, onChange]);

  var inputValue = (0, _fontSizeControlUtils.getInputValue)(fontSizes, value);
  var selectedFontSizeSlug = (0, _fontSizeControlUtils.getSelectValueFromFontSize)(fontSizes, value);
  var currentValue = options.find(function (option) {
    return option.key === selectedFontSizeSlug;
  });
  var isDefaultValue = !_utils.is.defined(value);
  var classes = (0, _styles.cx)(styles.FontSizeControl, className);
  var withSelect = fontSizes.length > 0;
  return _objectSpread(_objectSpread({}, otherProps), {}, {
    className: classes,
    customLabel: customLabel,
    disabled: disabled,
    inputValue: inputValue,
    isDefaultValue: isDefaultValue,
    label: label,
    max: max,
    min: min,
    onChange: handleOnChange,
    onInputChange: handleOnInputChange,
    onReset: handleOnReset,
    options: options,
    selectDropdownProps: {
      isPreviewable: isPreviewable,
      maxWidth: maxWidth,
      minWidth: minWidth,
      onClose: onClose,
      onOpen: onOpen,
      placeholder: placeholder
    },
    size: size,
    value: currentValue,
    withNumberInput: !withSlider && !disableCustomFontSizes,
    withSelect: withSelect,
    withSlider: withSlider
  });
}