"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _i18n = require("@wordpress/i18n");

var _context = require("@wp-g2/context");

var _react = _interopRequireDefault(require("react"));

var _View = require("../View");

var _VisuallyHidden = require("../VisuallyHidden");

var _VStack = require("../VStack");

var _fontSizeControlSelect = _interopRequireDefault(require("./font-size-control-select"));

var _fontSizeControlSlider = _interopRequireDefault(require("./font-size-control-slider"));

var _useFontSizeControl2 = require("./use-font-size-control");

function FontSizeControl(props, forwardedRef) {
  var _useFontSizeControl = (0, _useFontSizeControl2.useFontSizeControl)(props),
      _useFontSizeControl$c = _useFontSizeControl.customLabel,
      customLabel = _useFontSizeControl$c === void 0 ? (0, _i18n.__)('Custom') : _useFontSizeControl$c,
      disableCustomFontSizes = _useFontSizeControl.disableCustomFontSizes,
      disabled = _useFontSizeControl.disabled,
      label = _useFontSizeControl.label,
      max = _useFontSizeControl.max,
      min = _useFontSizeControl.min,
      options = _useFontSizeControl.options,
      inputValue = _useFontSizeControl.inputValue,
      isDefaultValue = _useFontSizeControl.isDefaultValue,
      value = _useFontSizeControl.value,
      onChange = _useFontSizeControl.onChange,
      onReset = _useFontSizeControl.onReset,
      onInputChange = _useFontSizeControl.onInputChange,
      selectDropdownProps = _useFontSizeControl.selectDropdownProps,
      size = _useFontSizeControl.size,
      withSlider = _useFontSizeControl.withSlider,
      withNumberInput = _useFontSizeControl.withNumberInput,
      withSelect = _useFontSizeControl.withSelect,
      otherProps = (0, _objectWithoutProperties2.default)(_useFontSizeControl, ["customLabel", "disableCustomFontSizes", "disabled", "label", "max", "min", "options", "inputValue", "isDefaultValue", "value", "onChange", "onReset", "onInputChange", "selectDropdownProps", "size", "withSlider", "withNumberInput", "withSelect"]);

  if (!options) return null;
  return /*#__PURE__*/_react.default.createElement(_View.View, Object.assign({
    as: "fieldset"
  }, otherProps), /*#__PURE__*/_react.default.createElement(_VisuallyHidden.VisuallyHidden, {
    as: "legend"
  }, label), /*#__PURE__*/_react.default.createElement(_VStack.VStack, {
    spacing: 3
  }, /*#__PURE__*/_react.default.createElement(_fontSizeControlSelect.default, Object.assign({}, selectDropdownProps, {
    customLabel: customLabel,
    disabled: disabled,
    inputValue: inputValue,
    isDefaultValue: isDefaultValue,
    label: label,
    max: max,
    min: min,
    onChange: onChange,
    onInputChange: onInputChange,
    onReset: onReset,
    options: options,
    ref: forwardedRef,
    size: size,
    value: value,
    withNumberInput: withNumberInput,
    withSelect: withSelect
  })), /*#__PURE__*/_react.default.createElement(_fontSizeControlSlider.default, {
    disabled: disabled,
    max: max,
    min: min,
    onChange: onInputChange,
    size: size,
    value: inputValue,
    withSlider: withSlider
  })));
}

var _default = (0, _context.contextConnect)(FontSizeControl, 'FontSizeControl');

exports.default = _default;