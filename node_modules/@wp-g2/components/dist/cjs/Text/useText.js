"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useText = useText;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _utils = require("@wp-g2/utils");

var _react = _interopRequireWildcard(require("react"));

var _Truncate = require("../Truncate");

var styles = _interopRequireWildcard(require("./Text.styles"));

var _Text2 = require("./Text.utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'span'>} props
 */
function useText(props) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'Text'),
      adjustLineHeightForInnerControls = _useContextSystem.adjustLineHeightForInnerControls,
      align = _useContextSystem.align,
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      color = _useContextSystem.color,
      ellipsizeMode = _useContextSystem.ellipsizeMode,
      _useContextSystem$isD = _useContextSystem.isDestructive,
      isDestructive = _useContextSystem$isD === void 0 ? false : _useContextSystem$isD,
      display = _useContextSystem.display,
      _useContextSystem$hig = _useContextSystem.highlightEscape,
      highlightEscape = _useContextSystem$hig === void 0 ? false : _useContextSystem$hig,
      _useContextSystem$hig2 = _useContextSystem.highlightCaseSensitive,
      highlightCaseSensitive = _useContextSystem$hig2 === void 0 ? false : _useContextSystem$hig2,
      _useContextSystem$hig3 = _useContextSystem.highlightWords,
      highlightWords = _useContextSystem$hig3 === void 0 ? [] : _useContextSystem$hig3,
      highlightSanitize = _useContextSystem.highlightSanitize,
      _useContextSystem$isB = _useContextSystem.isBlock,
      isBlock = _useContextSystem$isB === void 0 ? false : _useContextSystem$isB,
      letterSpacing = _useContextSystem.letterSpacing,
      lineHeightProp = _useContextSystem.lineHeight,
      optimizeReadabilityFor = _useContextSystem.optimizeReadabilityFor,
      size = _useContextSystem.size,
      _useContextSystem$tru = _useContextSystem.truncate,
      truncate = _useContextSystem$tru === void 0 ? false : _useContextSystem$tru,
      _useContextSystem$upp = _useContextSystem.upperCase,
      upperCase = _useContextSystem$upp === void 0 ? false : _useContextSystem$upp,
      variant = _useContextSystem.variant,
      _useContextSystem$wei = _useContextSystem.weight,
      weight = _useContextSystem$wei === void 0 ? _styles.ui.get('fontWeight') : _useContextSystem$wei,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["adjustLineHeightForInnerControls", "align", "children", "className", "color", "ellipsizeMode", "isDestructive", "display", "highlightEscape", "highlightCaseSensitive", "highlightWords", "highlightSanitize", "isBlock", "letterSpacing", "lineHeight", "optimizeReadabilityFor", "size", "truncate", "upperCase", "variant", "weight"]);

  var content = children;
  var isHighlighter = Array.isArray(highlightWords) && highlightWords.length;
  var isCaption = size === 'caption';

  if (isHighlighter) {
    content = (0, _Text2.createHighlighterText)({
      autoEscape: highlightEscape,
      children: children,
      caseSensitive: highlightCaseSensitive,
      searchWords: highlightWords,
      sanitize: highlightSanitize
    });
  }

  var classes = (0, _react.useMemo)(function () {
    var sx = {};
    var lineHeight = getLineHeight({
      lineHeight: lineHeightProp,
      adjustLineHeightForInnerControls: adjustLineHeightForInnerControls
    });
    sx.Base = (0, _styles.css)({
      color: color,
      display: display,
      fontSize: (0, _styles.getFontSize)(size),
      fontWeight: weight,
      lineHeight: lineHeight,
      letterSpacing: letterSpacing,
      textAlign: align
    });
    sx.upperCase = (0, _styles.css)({
      textTransform: 'uppercase'
    });
    sx.optimalTextColor = null;

    if (optimizeReadabilityFor) {
      var isOptimalTextColorDark = (0, _utils.getOptimalTextShade)(optimizeReadabilityFor) === 'dark';
      sx.optimalTextColor = isOptimalTextColorDark ? (0, _styles.css)({
        color: _styles.ui.get('black')
      }) : (0, _styles.css)({
        color: _styles.ui.get('white')
      });
    }

    return (0, _styles.cx)(styles.Text, sx.Base, sx.optimalTextColor, isDestructive && styles.destructive, !!isHighlighter && styles.highlighterText, isBlock && styles.block, isCaption && styles.muted, variant && styles[variant], upperCase && sx.upperCase, className);
  }, [adjustLineHeightForInnerControls, align, className, color, display, isBlock, isCaption, isDestructive, isHighlighter, letterSpacing, lineHeightProp, optimizeReadabilityFor, size, upperCase, variant, weight]);
  /** @type {undefined | 'auto' | 'none'} */

  var finalEllipsizeMode = undefined;

  if (truncate === true) {
    finalEllipsizeMode = 'auto';
  }

  if (truncate === false) {
    finalEllipsizeMode = 'none';
  }

  var finalComponentProps = _objectSpread(_objectSpread({}, otherProps), {}, {
    className: classes,
    children: children,
    ellipsizeMode: ellipsizeMode || finalEllipsizeMode
  });

  var truncateProps = (0, _Truncate.useTruncate)(finalComponentProps);
  /**
   * Enhance child `<Link />` components to inherit font size.
   */

  if (!truncate && Array.isArray(children)) {
    content = _react.default.Children.map(children, function (child) {
      // @ts-ignore
      if (!_utils.is.plainObject(child) || !('props' in child)) {
        return child;
      }

      var isLink = (0, _context.hasNamespace)(child, ['Link']);

      if (isLink) {
        return /*#__PURE__*/_react.default.cloneElement(child, {
          size: child.props.size || 'inherit'
        });
      }

      return child;
    });
  }

  return _objectSpread(_objectSpread({}, truncateProps), {}, {
    children: truncate ? truncateProps.children : content
  });
}

function getLineHeight(_ref) {
  var adjustLineHeightForInnerControls = _ref.adjustLineHeightForInnerControls,
      lineHeight = _ref.lineHeight;
  if (_utils.is.defined(lineHeight)) return lineHeight;
  if (!adjustLineHeightForInnerControls) return;
  var value = "calc(" + _styles.ui.get('controlHeight') + " + " + _styles.ui.space(2) + ")";

  switch (adjustLineHeightForInnerControls) {
    case 'large':
      value = "calc(" + _styles.ui.get('controlHeightLarge') + " + " + _styles.ui.space(2) + ")";
      break;

    case 'small':
      value = "calc(" + _styles.ui.get('controlHeightSmall') + " + " + _styles.ui.space(2) + ")";
      break;

    case 'xSmall':
      value = "calc(" + _styles.ui.get('controlHeightXSmall') + " + " + _styles.ui.space(2) + ")";
      break;

    default:
      break;
  }

  return value;
}