"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _react = _interopRequireDefault(require("react"));

var _Menu = require("../Menu");

var _Dropdown = require("./Dropdown.Context");

var styles = _interopRequireWildcard(require("./Dropdown.styles"));

var _DropdownMenuCard = _interopRequireDefault(require("./DropdownMenuCard"));

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').DropdownMenuProps, 'div'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */
function DropdownMenu(props, forwardedRef) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'DropdownMenu'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$ele = _useContextSystem.elevation,
      elevation = _useContextSystem$ele === void 0 ? 3 : _useContextSystem$ele,
      _useContextSystem$hid = _useContextSystem.hideOnClickOutside,
      hideOnClickOutside = _useContextSystem$hid === void 0 ? true : _useContextSystem$hid,
      maxWidth = _useContextSystem.maxWidth,
      _useContextSystem$min = _useContextSystem.minWidth,
      minWidth = _useContextSystem$min === void 0 ? 200 : _useContextSystem$min,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["children", "className", "elevation", "hideOnClickOutside", "maxWidth", "minWidth"]);

  var _useDropdownContext = (0, _Dropdown.useDropdownContext)(),
      label = _useDropdownContext.label,
      menu = _useDropdownContext.menu;

  var classes = _react.default.useMemo(function () {
    return (0, _styles.cx)(styles.DropdownMenu, (0, _styles.css)({
      maxWidth: maxWidth,
      minWidth: minWidth
    }), className);
  }, [maxWidth, minWidth, className]);

  return /*#__PURE__*/_react.default.createElement(_Menu.Menu, Object.assign({
    "aria-label": label
  }, otherProps, {
    className: classes,
    hideOnClickOutside: hideOnClickOutside,
    menu: menu,
    ref: forwardedRef
  }), ((menu == null ? void 0 : menu.visible) || (menu == null ? void 0 : menu.animating)) && /*#__PURE__*/_react.default.createElement(_DropdownMenuCard.default, {
    elevation: elevation
  }, children));
}
/**
 * `DropdownMenu` is an actionable component that contains actions (`DropdownMenuItem`) within a `Dropdown`.
 *
 * @example
 * ```jsx
 * <Dropdown>
 *  <DropdownTrigger>Edit</DropdownTrigger>
 *  <DropdownMenu>
 *    <DropdownMenuItem>...</DropdownMenuItem>
 *    <DropdownMenuItem>...</DropdownMenuItem>
 *    <DropdownMenuItem>...</DropdownMenuItem>
 *  </DropdownMenu>
 * </Dropdown>
 * ```
 *
 * @see https://reakit.io/docs/menu/#menu
 */


var ConnectedDropdownMenu = (0, _context.contextConnect)(DropdownMenu, 'DropdownMenu');
var _default = ConnectedDropdownMenu;
exports.default = _default;