"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBaseDragHandlers = useBaseDragHandlers;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _utils = require("@wp-g2/utils");

var _lodash = require("lodash");

var _react = require("react");

var _reactUseGesture = require("react-use-gesture");

var styles = _interopRequireWildcard(require("./TextInput.styles"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function useBaseDragHandlers(_ref) {
  var decrement = _ref.decrement,
      dragAxis = _ref.dragAxis,
      increment = _ref.increment,
      _ref$isTypeNumeric = _ref.isTypeNumeric,
      isTypeNumeric = _ref$isTypeNumeric === void 0 ? true : _ref$isTypeNumeric;

  var _useState = (0, _react.useState)(
  /** @type {undefined | 'x' | 'y'} */
  undefined),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      dragState = _useState2[0],
      setDragState = _useState2[1];

  var threshold = 10;
  (0, _react.useEffect)(function () {
    if (dragState) {
      (0, _utils.clearSelection)();

      if (dragState === 'x') {
        document.documentElement.classList.add(styles.globalDraggableX);
        document.documentElement.classList.remove(styles.globalDraggableY);
      } else {
        document.documentElement.classList.remove(styles.globalDraggableX);
        document.documentElement.classList.add(styles.globalDraggableY);
      }
    } else {
      document.documentElement.classList.remove(styles.globalDraggableX);
      document.documentElement.classList.remove(styles.globalDraggableY);
    }
  }, [dragState]);
  var dragGestures = (0, _reactUseGesture.useDrag)(function (state) {
    var _state$delta = (0, _slicedToArray2.default)(state.delta, 2),
        x = _state$delta[0],
        y = _state$delta[1];

    setDragState(state.dragging ? state.axis : undefined);
    var isMovementY = state.axis === 'y';
    var movement = isMovementY ? y * -1 : x;
    if (Math.abs(movement) === 0) return;
    var shouldIncrement = movement > 0;
    var boost = movement === threshold ? 0 : movement;
    boost = shouldIncrement ? boost : boost * -1;
    boost = boost - 1;

    if (shouldIncrement) {
      increment(boost);
    } else {
      decrement(boost);
    }
  }, {
    axis: dragAxis,
    threshold: threshold
  });
  var handleOnMouseUp = (0, _react.useCallback)(function () {
    return setDragState(false);
  }, []);
  var baseGestures = isTypeNumeric ? dragGestures() : {
    onPointerDown: _lodash.noop,
    onPointerMove: _lodash.noop,
    onPointerUp: _lodash.noop,
    onPointerCancel: _lodash.noop
  };

  var gestures = _objectSpread(_objectSpread({}, baseGestures), {}, {
    onMouseUp: handleOnMouseUp
  });

  return gestures;
}