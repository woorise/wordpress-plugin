"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTextInputState = useTextInputState;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _utils = require("@wp-g2/utils");

var _lodash = require("lodash");

var _react = require("react");

var _useTextInputState = require("./useTextInputState.utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function useCommitValue(_ref) {
  var value = _ref.value;

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      commitValue = _useState2[0],
      setCommitValue = _useState2[1];

  var resetCommitValue = (0, _react.useCallback)(function () {
    return setCommitValue(null);
  }, []);
  (0, _react.useEffect)(resetCommitValue, [value]);
  return [commitValue, setCommitValue, resetCommitValue];
}

function useShiftStep(_ref2) {
  var _ref2$isShiftStepEnab = _ref2.isShiftStepEnabled,
      isShiftStepEnabled = _ref2$isShiftStepEnab === void 0 ? true : _ref2$isShiftStepEnab,
      _ref2$shiftStep = _ref2.shiftStep,
      shiftStep = _ref2$shiftStep === void 0 ? 10 : _ref2$shiftStep;

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      on = _useState4[0],
      setOn = _useState4[1];

  (0, _react.useEffect)(function () {
    var handleOnKeyDown = function (event) {
      if (!isShiftStepEnabled) return;
      if (event.shiftKey) setOn(true);
    };

    var handleOnKeyUp = function (event) {
      if (!isShiftStepEnabled) return;
      if (!event.shiftKey) setOn(false);
    };

    window.addEventListener('keydown', handleOnKeyDown);
    window.addEventListener('keyup', handleOnKeyUp);
    return function () {
      window.removeEventListener('keydown', handleOnKeyDown);
      window.removeEventListener('keyup', handleOnKeyUp);
    };
  }, [isShiftStepEnabled]);
  return isShiftStepEnabled && on ? shiftStep : 1;
}

function useFocusedState(_ref3) {
  var _ref3$isFocused = _ref3.isFocused,
      isFocusedProp = _ref3$isFocused === void 0 ? false : _ref3$isFocused;

  var _useState5 = (0, _react.useState)(isFocusedProp),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      isFocused = _useState6[0],
      setFocused = _useState6[1];

  (0, _react.useEffect)(function () {
    setFocused(isFocusedProp);
  }, [isFocusedProp]);
  return [isFocused, setFocused];
}

function useChangeHandlers(_ref4) {
  var onChange = _ref4.onChange;
  var handleOnChange = (0, _react.useCallback)(function (event) {
    onChange(event.target.value);
  }, [onChange]);
  return {
    onChange: handleOnChange
  };
}

function useFocusHandlers(_ref5) {
  var onChange = _ref5.onChange,
      setFocused = _ref5.setFocused;
  var handleOnBlur = (0, _react.useCallback)(function (event) {
    onChange(event.target.value);
    setFocused(false);
  }, [onChange, setFocused]);
  var handleOnFocus = (0, _react.useCallback)(function () {
    setFocused(true);
  }, [setFocused]);
  return {
    onBlur: handleOnBlur,
    onFocus: handleOnFocus
  };
}

function useKeyboardHandlers(_ref6) {
  var onChange = _ref6.onChange;
  var keyboardHandlers = (0, _react.useMemo)(function () {
    return {
      Enter: function Enter(
      /** @type {import('react').KeyboardEvent} */
      event) {
        if (event.isDefaultPrevented()) return;
        onChange(event.target.value);
      }
    };
  }, [onChange]);
  var handleOnKeyDown = (0, _react.useCallback)(function (
  /** @type {import('react').KeyboardEvent}} */
  event) {
    var key = (0, _utils.normalizeArrowKey)(event);

    if (key && keyboardHandlers[key]) {
      keyboardHandlers[key](event);
    }
  }, [keyboardHandlers]);
  return {
    onKeyDown: handleOnKeyDown
  };
}

function useNumberActions(_ref7) {
  var incrementFromNonNumericValue = _ref7.incrementFromNonNumericValue,
      isShiftStepEnabled = _ref7.isShiftStepEnabled,
      max = _ref7.max,
      min = _ref7.min,
      onChange = _ref7.onChange,
      _ref7$shiftStep = _ref7.shiftStep,
      shiftStepProp = _ref7$shiftStep === void 0 ? 10 : _ref7$shiftStep,
      _ref7$step = _ref7.step,
      step = _ref7$step === void 0 ? 1 : _ref7$step,
      type = _ref7.type,
      value = _ref7.value;
  var stepMultiplier = useShiftStep({
    isShiftStepEnabled: isShiftStepEnabled,
    shiftStep: shiftStepProp
  }) || step;

  var isValueNumeric = _utils.is.numeric(value);

  var skipAction = !(type === 'number') && !isValueNumeric && !incrementFromNonNumericValue;
  /**
   * Create (synced) references to avoid recreating increment and decrement
   * callbacks.
   */

  var propRefs = (0, _utils.usePropRef)({
    min: min,
    max: max,
    value: value,
    shiftStep: stepMultiplier * step,
    onChange: onChange
  });
  var increment = (0, _react.useCallback)(function (
  /** @type {number} */
  jumpStep) {
    if (jumpStep === void 0) {
      jumpStep = 0;
    }

    if (skipAction) return;
    var _propRefs$current = propRefs.current,
        max = _propRefs$current.max,
        min = _propRefs$current.min,
        onChange = _propRefs$current.onChange,
        shiftStep = _propRefs$current.shiftStep,
        value = _propRefs$current.value;
    var baseValue = _utils.is.numeric(value) ? value : 0;
    var nextValue = (0, _utils.add)(jumpStep * step, shiftStep);
    var next = (0, _utils.roundClampString)((0, _utils.add)(baseValue, nextValue), min, max, shiftStep);
    onChange(next);
  }, [skipAction, propRefs, step]);
  var decrement = (0, _react.useCallback)(function (
  /** @type {number} */
  jumpStep) {
    if (jumpStep === void 0) {
      jumpStep = 0;
    }

    if (skipAction) return;
    var _propRefs$current2 = propRefs.current,
        max = _propRefs$current2.max,
        min = _propRefs$current2.min,
        onChange = _propRefs$current2.onChange,
        shiftStep = _propRefs$current2.shiftStep,
        value = _propRefs$current2.value;
    var baseValue = _utils.is.numeric(value) ? value : 0;
    var nextValue = (0, _utils.add)(jumpStep * step, shiftStep);
    var next = (0, _utils.roundClampString)((0, _utils.subtract)(baseValue, nextValue), min, max, shiftStep);
    onChange(next);
  }, [skipAction, propRefs, step]);
  return {
    increment: increment,
    decrement: decrement
  };
}

function useNumberKeyboardHandlers(_ref8) {
  var decrement = _ref8.decrement,
      increment = _ref8.increment,
      isTypeNumeric = _ref8.isTypeNumeric,
      _ref8$stopIfEventDefa = _ref8.stopIfEventDefaultPrevented,
      stopIfEventDefaultPrevented = _ref8$stopIfEventDefa === void 0 ? true : _ref8$stopIfEventDefa;
  var keyboardHandlers = (0, _react.useMemo)(function () {
    return {
      ArrowUp: function ArrowUp(event) {
        if (!isTypeNumeric) return;
        if (stopIfEventDefaultPrevented && event.isDefaultPrevented()) return;
        event.preventDefault();
        increment();
      },
      ArrowDown: function ArrowDown(event) {
        if (!isTypeNumeric) return;
        if (stopIfEventDefaultPrevented && event.isDefaultPrevented()) return;
        event.preventDefault();
        decrement();
      }
    };
  }, [decrement, increment, isTypeNumeric, stopIfEventDefaultPrevented]);
  var handleOnKeyDown = (0, _react.useCallback)(function (event) {
    var key = (0, _utils.normalizeArrowKey)(event);

    if (key && keyboardHandlers[key]) {
      keyboardHandlers[key](event);
    }
  }, [keyboardHandlers]);
  return {
    onKeyDown: handleOnKeyDown
  };
}

var useScrollHandlers = function (_ref9) {
  var decrement = _ref9.decrement,
      increment = _ref9.increment,
      isFocused = _ref9.isFocused,
      isTypeNumeric = _ref9.isTypeNumeric;
  var handleOnWheel = (0, _react.useCallback)(function (event) {
    if (!isTypeNumeric) return;
    if (!isFocused) return;
    if ((event == null ? void 0 : event.deltaY) === 0) return;
    var isScrollUp = (event == null ? void 0 : event.deltaY) < 0;

    if (isScrollUp) {
      increment();
    } else {
      decrement();
    }

    return false;
  }, [decrement, increment, isFocused, isTypeNumeric]);
  return {
    onWheel: handleOnWheel
  };
};

function useTextInputState(props) {
  var defaultValue = props.defaultValue,
      _props$dragAxis = props.dragAxis,
      dragAxis = _props$dragAxis === void 0 ? 'y' : _props$dragAxis,
      _props$incrementFromN = props.incrementFromNonNumericValue,
      incrementFromNonNumericValue = _props$incrementFromN === void 0 ? false : _props$incrementFromN,
      _props$isCommitOnBlur = props.isCommitOnBlurOrEnter,
      isCommitOnBlurOrEnter = _props$isCommitOnBlur === void 0 ? false : _props$isCommitOnBlur,
      _props$isFocused = props.isFocused,
      isFocusedProp = _props$isFocused === void 0 ? false : _props$isFocused,
      _props$onChange = props.onChange,
      onChangeProp = _props$onChange === void 0 ? _lodash.noop : _props$onChange,
      valueProp = props.value,
      min = props.min,
      max = props.max,
      _props$step = props.step,
      step = _props$step === void 0 ? 1 : _props$step,
      validate = props.validate,
      _props$isShiftStepEna = props.isShiftStepEnabled,
      isShiftStepEnabled = _props$isShiftStepEna === void 0 ? true : _props$isShiftStepEna,
      _props$shiftStep = props.shiftStep,
      shiftStep = _props$shiftStep === void 0 ? 10 : _props$shiftStep,
      type = props.type,
      format = props.format,
      otherProps = (0, _objectWithoutProperties2.default)(props, ["defaultValue", "dragAxis", "incrementFromNonNumericValue", "isCommitOnBlurOrEnter", "isFocused", "onChange", "value", "min", "max", "step", "validate", "isShiftStepEnabled", "shiftStep", "type", "format"]);
  var inputRef = (0, _react.useRef)();

  var _useControlledValue = (0, _utils.useControlledValue)({
    value: valueProp,
    onChange: onChangeProp,
    defaultValue: defaultValue
  }),
      _useControlledValue2 = (0, _slicedToArray2.default)(_useControlledValue, 2),
      value = _useControlledValue2[0],
      onChange = _useControlledValue2[1];

  var isInputTypeNumeric = type === 'number';
  var isTypeNumeric = format === 'number' || isInputTypeNumeric;

  var _useCommitValue = useCommitValue({
    value: value
  }),
      _useCommitValue2 = (0, _slicedToArray2.default)(_useCommitValue, 3),
      commitValue = _useCommitValue2[0],
      setCommitValue = _useCommitValue2[1],
      resetCommitValue = _useCommitValue2[2];

  var inputValue = (0, _lodash.isNil)(commitValue) ? value : commitValue;

  var _useFocusedState = useFocusedState({
    value: isFocusedProp
  }),
      _useFocusedState2 = (0, _slicedToArray2.default)(_useFocusedState, 2),
      isFocused = _useFocusedState2[0],
      setFocused = _useFocusedState2[1];

  var handleOnCommit = (0, _react.useCallback)(function (next) {
    var isValid = true;

    if (typeof validate === 'function') {
      // @ts-ignore We checked `validate` above for `hasValidation`
      isValid = validate(next, value) !== false;
    }

    if (isValid) {
      onChange(next);
    }

    resetCommitValue();
  }, [onChange, resetCommitValue, validate, value]);

  var _useNumberActions = useNumberActions({
    incrementFromNonNumericValue: incrementFromNonNumericValue,
    isShiftStepEnabled: isShiftStepEnabled,
    max: max,
    min: min,
    onChange: onChange,
    shiftStep: shiftStep,
    step: step,
    type: type,
    value: value
  }),
      decrement = _useNumberActions.decrement,
      increment = _useNumberActions.increment;

  var changeHandlers = useChangeHandlers({
    onChange: isCommitOnBlurOrEnter ? setCommitValue : onChange
  });
  var focusHandlers = useFocusHandlers({
    onChange: isCommitOnBlurOrEnter ? handleOnCommit : _lodash.noop,
    setFocused: setFocused
  });
  var dragHandlers = (0, _useTextInputState.useBaseDragHandlers)({
    increment: increment,
    decrement: decrement,
    isTypeNumeric: isTypeNumeric,
    dragAxis: dragAxis
  });
  var dragHandlersRef = (0, _utils.usePropRef)(dragHandlers);
  var baseKeyboardHandlers = useKeyboardHandlers({
    onChange: isCommitOnBlurOrEnter ? handleOnCommit : _lodash.noop
  });
  var numberKeyboardHandlers = useNumberKeyboardHandlers({
    increment: increment,
    decrement: decrement,
    isTypeNumeric: isTypeNumeric
  });
  var keyboardHandlers = (0, _utils.usePropRef)((0, _utils.mergeEventHandlers)(baseKeyboardHandlers, numberKeyboardHandlers)).current;
  var scrollHandlers = useScrollHandlers({
    decrement: decrement,
    increment: increment,
    isFocused: isFocused,
    isTypeNumeric: isTypeNumeric
  });

  var handlers = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, changeHandlers), dragHandlers), focusHandlers), keyboardHandlers), scrollHandlers);

  return _objectSpread(_objectSpread(_objectSpread({}, handlers), otherProps), {}, {
    decrement: decrement,
    dragHandlersRef: dragHandlersRef,
    increment: increment,
    inputRef: inputRef,
    isFocused: isFocused,
    isInputTypeNumeric: isInputTypeNumeric,
    isTypeNumeric: isTypeNumeric,
    max: max,
    min: min,
    step: step,
    type: type,
    value: inputValue
  });
}