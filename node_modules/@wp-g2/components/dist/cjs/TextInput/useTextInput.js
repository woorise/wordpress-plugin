"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTextInput = useTextInput;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _react = require("react");

var _reactTextareaAutosize = _interopRequireDefault(require("react-textarea-autosize"));

var _BaseField = require("../BaseField");

var _FormGroup = require("../FormGroup");

var styles = _interopRequireWildcard(require("./TextInput.styles"));

var _useTextInputState2 = require("./useTextInputState");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useRootEventHandlers = function (_ref) {
  var dragHandlersRef = _ref.dragHandlersRef,
      inputRef = _ref.inputRef,
      isFocused = _ref.isFocused,
      isTypeNumeric = _ref.isTypeNumeric;
  var canScroll = isTypeNumeric && isFocused;
  var dragHandlers = dragHandlersRef.current;
  (0, _react.useEffect)(function () {
    var handleOnWheel = function () {
      if (!canScroll) return;
    };

    if (inputRef.current.addEventListener) {
      inputRef.current.addEventListener('wheel', handleOnWheel, {
        passive: false
      });
    }
  }, [inputRef, canScroll]);
  var handleOnClick = (0, _react.useCallback)(function () {
    inputRef.current.focus();
  }, [inputRef]);
  var handleOnTouchStart = (0, _react.useCallback)(function () {
    inputRef.current.focus();
  }, [inputRef]);
  return _objectSpread(_objectSpread({}, dragHandlers), {}, {
    onClick: handleOnClick,
    onTouchStart: handleOnTouchStart
  });
};
/**
 *
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'input'>} props
 */


function useTextInput(props) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'TextInput'),
      align = _useContextSystem.align,
      _useContextSystem$arr = _useContextSystem.arrows,
      arrows = _useContextSystem$arr === void 0 ? true : _useContextSystem$arr,
      className = _useContextSystem.className,
      _useContextSystem$def = _useContextSystem.defaultValue,
      defaultValue = _useContextSystem$def === void 0 ? '' : _useContextSystem$def,
      disabled = _useContextSystem.disabled,
      dragAxis = _useContextSystem.dragAxis,
      _useContextSystem$err = _useContextSystem.error,
      error = _useContextSystem$err === void 0 ? false : _useContextSystem$err,
      format = _useContextSystem.format,
      _useContextSystem$gap = _useContextSystem.gap,
      gap = _useContextSystem$gap === void 0 ? 2.5 : _useContextSystem$gap,
      idProp = _useContextSystem.id,
      _useContextSystem$inc = _useContextSystem.incrementFromNonNumericValue,
      incrementFromNonNumericValue = _useContextSystem$inc === void 0 ? false : _useContextSystem$inc,
      _useContextSystem$isC = _useContextSystem.isCommitOnBlurOrEnter,
      isCommitOnBlurOrEnter = _useContextSystem$isC === void 0 ? false : _useContextSystem$isC,
      isFocusedProp = _useContextSystem.isFocused,
      _useContextSystem$isI = _useContextSystem.isInline,
      isInline = _useContextSystem$isI === void 0 ? false : _useContextSystem$isI,
      _useContextSystem$isR = _useContextSystem.isResizable,
      isResizable = _useContextSystem$isR === void 0 ? false : _useContextSystem$isR,
      _useContextSystem$isS = _useContextSystem.isShiftStepEnabled,
      isShiftStepEnabled = _useContextSystem$isS === void 0 ? true : _useContextSystem$isS,
      justify = _useContextSystem.justify,
      max = _useContextSystem.max,
      min = _useContextSystem.min,
      _useContextSystem$mul = _useContextSystem.multiline,
      multiline = _useContextSystem$mul === void 0 ? false : _useContextSystem$mul,
      prefix = _useContextSystem.prefix,
      _useContextSystem$shi = _useContextSystem.shiftStep,
      shiftStep = _useContextSystem$shi === void 0 ? 10 : _useContextSystem$shi,
      _useContextSystem$siz = _useContextSystem.size,
      size = _useContextSystem$siz === void 0 ? 'medium' : _useContextSystem$siz,
      step = _useContextSystem.step,
      suffix = _useContextSystem.suffix,
      _useContextSystem$typ = _useContextSystem.type,
      type = _useContextSystem$typ === void 0 ? 'text' : _useContextSystem$typ,
      validate = _useContextSystem.validate,
      valueProp = _useContextSystem.value,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["align", "arrows", "className", "defaultValue", "disabled", "dragAxis", "error", "format", "gap", "id", "incrementFromNonNumericValue", "isCommitOnBlurOrEnter", "isFocused", "isInline", "isResizable", "isShiftStepEnabled", "justify", "max", "min", "multiline", "prefix", "shiftStep", "size", "step", "suffix", "type", "validate", "value"]);

  var id = (0, _FormGroup.useFormGroupContextId)(idProp);

  var _useTextInputState = (0, _useTextInputState2.useTextInputState)(_objectSpread(_objectSpread({}, otherProps), {}, {
    format: format,
    defaultValue: defaultValue,
    incrementFromNonNumericValue: incrementFromNonNumericValue,
    isCommitOnBlurOrEnter: isCommitOnBlurOrEnter,
    isFocused: isFocusedProp,
    isShiftStepEnabled: isShiftStepEnabled,
    max: max,
    min: min,
    shiftStep: shiftStep,
    step: step,
    value: valueProp,
    validate: validate,
    type: type
  })),
      decrement = _useTextInputState.decrement,
      dragHandlersRef = _useTextInputState.dragHandlersRef,
      increment = _useTextInputState.increment,
      inputRef = _useTextInputState.inputRef,
      isFocused = _useTextInputState.isFocused,
      isInputTypeNumeric = _useTextInputState.isInputTypeNumeric,
      isTypeNumeric = _useTextInputState.isTypeNumeric,
      scrollHandlers = _useTextInputState.scrollHandlers,
      value = _useTextInputState.value,
      textInputState = (0, _objectWithoutProperties2.default)(_useTextInputState, ["decrement", "dragHandlersRef", "increment", "inputRef", "isFocused", "isInputTypeNumeric", "isTypeNumeric", "scrollHandlers", "value"]);

  var rootEventHandlers = useRootEventHandlers({
    inputRef: inputRef,
    dragHandlersRef: dragHandlersRef,
    isTypeNumeric: isTypeNumeric,
    isFocused: isFocused
  });
  var baseFieldProps = (0, _BaseField.useBaseField)({
    align: align,
    disabled: disabled,
    error: error,
    gap: gap,
    isFocused: isFocused,
    isInline: isInline,
    justify: justify
  });
  var InputComponent = multiline ? _reactTextareaAutosize.default : 'input';
  var classes = (0, _react.useMemo)(function () {
    return (0, _styles.cx)(baseFieldProps.className, multiline && styles.multiline, className);
  }, [baseFieldProps.className, className, multiline]);
  var inputClasses = (0, _react.useMemo)(function () {
    return (0, _styles.cx)(styles.Input, styles[size], multiline && styles.inputMultiline, isResizable && styles.resizable, multiline && styles.scrollableScrollbar);
  }, [isResizable, multiline, size]);

  var inputProps = _objectSpread(_objectSpread(_objectSpread({
    as: InputComponent
  }, otherProps), textInputState), {}, {
    className: inputClasses,
    id: id,
    min: min,
    max: max,
    step: step,
    type: type,
    value: value
  });

  return _objectSpread(_objectSpread(_objectSpread({}, baseFieldProps), rootEventHandlers), {}, {
    arrows: arrows,
    className: classes,
    decrement: decrement,
    disabled: disabled,
    dragAxis: dragAxis,
    dragHandlersRef: dragHandlersRef,
    format: format,
    increment: increment,
    inputProps: inputProps,
    inputRef: inputRef,
    isTypeNumeric: isTypeNumeric,
    prefix: prefix,
    suffix: suffix
  });
}