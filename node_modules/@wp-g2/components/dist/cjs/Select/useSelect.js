"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSelect = useSelect;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _utils = require("@wp-g2/utils");

var _react = _interopRequireWildcard(require("react"));

var _BaseField = require("../BaseField");

var _FormGroup = require("../FormGroup");

var ScrollableStyles = _interopRequireWildcard(require("../Scrollable/Scrollable.styles"));

var TextInputStyles = _interopRequireWildcard(require("../TextInput/TextInput.styles"));

var styles = _interopRequireWildcard(require("./Select.styles"));

var _Select2 = require("./Select.utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var PLACEHOLDER_VALUE = '';
/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'select'>} props
 */

function useSelect(props) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'Select'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$def = _useContextSystem.defaultValue,
      defaultValue = _useContextSystem$def === void 0 ? PLACEHOLDER_VALUE : _useContextSystem$def,
      disabled = _useContextSystem.disabled,
      _useContextSystem$err = _useContextSystem.error,
      error = _useContextSystem$err === void 0 ? false : _useContextSystem$err,
      idProp = _useContextSystem.id,
      _useContextSystem$isI = _useContextSystem.isInline,
      isInline = _useContextSystem$isI === void 0 ? false : _useContextSystem$isI,
      _useContextSystem$isF = _useContextSystem.isFocused,
      isFocusedProp = _useContextSystem$isF === void 0 ? false : _useContextSystem$isF,
      isSubtle = _useContextSystem.isSubtle,
      multiple = _useContextSystem.multiple,
      _useContextSystem$onB = _useContextSystem.onBlur,
      onBlur = _useContextSystem$onB === void 0 ? _utils.noop : _useContextSystem$onB,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChangeProp = _useContextSystem$onC === void 0 ? _utils.noop : _useContextSystem$onC,
      _useContextSystem$onF = _useContextSystem.onFocus,
      onFocus = _useContextSystem$onF === void 0 ? _utils.noop : _useContextSystem$onF,
      _useContextSystem$opt = _useContextSystem.options,
      options = _useContextSystem$opt === void 0 ? [] : _useContextSystem$opt,
      placeholderProp = _useContextSystem.placeholder,
      prefix = _useContextSystem.prefix,
      size = _useContextSystem.size,
      suffix = _useContextSystem.suffix,
      valueProp = _useContextSystem.value,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["children", "className", "defaultValue", "disabled", "error", "id", "isInline", "isFocused", "isSubtle", "multiple", "onBlur", "onChange", "onFocus", "options", "placeholder", "prefix", "size", "suffix", "value"]);

  var _useControlledValue = (0, _utils.useControlledValue)({
    value: valueProp,
    onChange: onChangeProp,
    defaultValue: multiple ? [] : defaultValue
  }),
      _useControlledValue2 = (0, _slicedToArray2.default)(_useControlledValue, 2),
      value = _useControlledValue2[0],
      onChange = _useControlledValue2[1];

  var _useState = (0, _react.useState)(isFocusedProp),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var _useResizeAware = (0, _utils.useResizeAware)(),
      _useResizeAware2 = (0, _slicedToArray2.default)(_useResizeAware, 2),
      resizer = _useResizeAware2[0],
      sizes = _useResizeAware2[1];
  /** @type {import('react').Ref<HTMLSelectElement | undefined>} */


  var inputRef = (0, _react.useRef)();
  var baseFieldProps = (0, _BaseField.useBaseField)({
    disabled: disabled,
    error: error,
    gap: 0,
    isClickable: true,
    isFocused: isFocused,
    isInline: isInline,
    isSubtle: isSubtle
  });
  var id = (0, _FormGroup.useFormGroupContextId)(idProp);
  var handleOnRootClick = (0, _react.useCallback)(function () {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);
  var handleOnBlur = (0, _react.useCallback)(function (
  /** @type {import('react').FocusEvent<HTMLSelectElement>} */
  event) {
    onBlur(event);
    setIsFocused(false);
  }, [onBlur]);
  var handleOnFocus = (0, _react.useCallback)(function (
  /** @type {import('react').FocusEvent<HTMLSelectElement>} */
  event) {
    onFocus(event);
    setIsFocused(true);
  }, [onFocus]);
  var handleOnChange = (0, _react.useCallback)(function (
  /** @type {import('react').ChangeEvent<HTMLSelectElement>} */
  event) {
    var next;

    if (multiple) {
      next = Array.from(event.target.options).filter(function (_ref) {
        var selected = _ref.selected;
        return selected;
      }).map(function (_ref2) {
        var value = _ref2.value;
        return value;
      });
    } else {
      next = event.target.value;
    }

    onChange(next, {
      event: event
    });
  }, [multiple, onChange]);
  var shouldRenderPlaceholder = (!_utils.is.defined(value) || _utils.is.empty(value)) && typeof placeholderProp === 'string';
  var classes = (0, _styles.cx)(baseFieldProps.className, styles.base, className);
  var hasArrow = !multiple;
  var paddingRight = hasArrow ? styles.ARROW_WRAPPER_WIDTH : 0;
  var inputClasses = (0, _styles.cx)(TextInputStyles.Input, styles.select, shouldRenderPlaceholder && styles.placeholder, multiple && ScrollableStyles.scrollableScrollbar, TextInputStyles[size], (0, _styles.css)({
    paddingRight: sizes.width || 0 + paddingRight
  }));
  var content = (0, _Select2.renderContent)({
    children: children,
    options: options
  });

  if (shouldRenderPlaceholder) {
    content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("option", {
      disabled: true,
      value: PLACEHOLDER_VALUE
    }, placeholderProp), content);
  }

  var inputProps = _objectSpread(_objectSpread({
    children: content,
    className: inputClasses,
    id: id,
    disabled: disabled,
    onChange: handleOnChange,
    onBlur: handleOnBlur,
    onFocus: handleOnFocus,
    multiple: multiple,
    value: value
  }, _styles.ui.$('Select')), otherProps);

  var suffixClasses = (0, _styles.cx)(styles.Suffix, hasArrow && styles.arrowPadding);
  return _objectSpread(_objectSpread(_objectSpread({}, baseFieldProps), _styles.ui.$('SelectWrapper')), {}, {
    className: classes,
    onClick: handleOnRootClick,
    inputProps: inputProps,
    multiple: multiple,
    prefix: prefix,
    inputRef: inputRef,
    resizer: resizer,
    suffixProps: {
      className: suffixClasses
    },
    sizes: sizes,
    suffix: suffix
  });
}