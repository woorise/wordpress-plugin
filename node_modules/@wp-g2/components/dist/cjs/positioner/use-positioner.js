"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePositioner = usePositioner;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _core = require("@popperjs/core");

var _utils = require("@wp-g2/utils");

var _react = _interopRequireDefault(require("react"));

function usePositioner(props) {
  var _useSealedState = (0, _utils.useSealedState)(props),
      _useSealedState$gutte = _useSealedState.gutter,
      gutter = _useSealedState$gutte === void 0 ? 4 : _useSealedState$gutte,
      _useSealedState$place = _useSealedState.placement,
      placement = _useSealedState$place === void 0 ? 'bottom-start' : _useSealedState$place,
      _useSealedState$unsta = _useSealedState.unstable_fixed,
      fixed = _useSealedState$unsta === void 0 ? false : _useSealedState$unsta,
      sealedOffset = _useSealedState.unstable_offset;

  var popper = _react.default.useRef(null);

  var referenceRef = _react.default.useRef(null);

  var popoverRef = _react.default.useRef(null);

  var popperCreated = _react.default.useRef(false);

  var _React$useState = _react.default.useState(sealedOffset || [0, gutter]),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),
      offset = _React$useState2[0];

  (0, _utils.useIsomorphicLayoutEffect)(function () {
    if (referenceRef.current && popoverRef.current) {
      popper.current = (0, _core.createPopper)(referenceRef.current, popoverRef.current, {
        // https://popper.js.org/docs/v2/constructors/#options
        placement: placement,
        strategy: fixed ? 'fixed' : 'absolute',
        modifiers: [{
          // https://popper.js.org/docs/v2/modifiers/offset/
          name: 'offset',
          options: {
            offset: offset
          }
        }]
      });
      popperCreated.current = true;
    }

    return function () {
      if (popper.current) {
        popper.current.destroy();
        popper.current = null;
      }
    };
  }, [placement, fixed, offset]);
  return {
    popoverRef: popoverRef,
    referenceRef: referenceRef,
    popper: popper
  };
}