"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = require("@testing-library/react");

var _react2 = _interopRequireDefault(require("react"));

var _Button = require("../../Button");

var _index = require("../index");

describe('props', function () {
  test('should render correctly', function () {
    var _render = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_index.Card, null, /*#__PURE__*/_react2.default.createElement(_index.CardHeader, {
      title: "Olaf"
    }), /*#__PURE__*/_react2.default.createElement(_index.CardBody, null, "Some people are worth melting for."), /*#__PURE__*/_react2.default.createElement(_index.CardFooter, null, /*#__PURE__*/_react2.default.createElement(_Button.Button, {
      variant: "primary"
    }, "Agree")))),
        container = _render.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render elevation', function () {
    var _render2 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_index.Card, {
      elevation: true
    })),
        container = _render2.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render no elevation', function () {
    var _render3 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_index.Card, {
      elevation: false
    })),
        container = _render3.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render CardInnerBody', function () {
    var _render4 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_index.Card, null, /*#__PURE__*/_react2.default.createElement(_index.CardHeader, {
      title: "Olaf"
    }), /*#__PURE__*/_react2.default.createElement(_index.CardInnerBody, null, "Some people are worth melting for."), /*#__PURE__*/_react2.default.createElement(_index.CardFooter, null, /*#__PURE__*/_react2.default.createElement(_Button.Button, {
      variant: "primary"
    }, "Agree")))),
        container = _render4.container;

    expect(container.firstChild).toMatchSnapshot();
  });
});