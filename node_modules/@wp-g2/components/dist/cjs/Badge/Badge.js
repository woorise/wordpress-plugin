"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _react = _interopRequireDefault(require("react"));

var _Text = require("../Text");

var styles = _interopRequireWildcard(require("./Badge.styles"));

var _Badge2 = require("./Badge.utils");

var BadgeView = styles.BadgeView;

function Badge(props, forwardedRef) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'Badge'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$col = _useContextSystem.color,
      colorProp = _useContextSystem$col === void 0 ? 'standard' : _useContextSystem$col,
      _useContextSystem$dis = _useContextSystem.display,
      display = _useContextSystem$dis === void 0 ? 'inline-flex' : _useContextSystem$dis,
      _useContextSystem$isB = _useContextSystem.isBold,
      isBold = _useContextSystem$isB === void 0 ? false : _useContextSystem$isB,
      _useContextSystem$isR = _useContextSystem.isRounded,
      isRounded = _useContextSystem$isR === void 0 ? false : _useContextSystem$isR,
      _useContextSystem$tru = _useContextSystem.truncate,
      truncate = _useContextSystem$tru === void 0 ? true : _useContextSystem$tru,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["children", "className", "color", "display", "isBold", "isRounded", "truncate"]);

  var badgeColor = _Badge2.BADGE_COLORS[colorProp] || _Badge2.BADGE_COLORS.standard;
  var sx = {};
  sx.base = (0, _styles.css)({
    display: display
  });
  var classes = (0, _styles.cx)(sx.base, truncate && styles.truncate, styles.getBackground({
    color: badgeColor,
    isBold: isBold
  }), styles.getBackgroundText({
    color: badgeColor,
    isBold: isBold
  }), isRounded && styles.rounded, className);
  return /*#__PURE__*/_react.default.createElement(BadgeView, Object.assign({}, otherProps, {
    className: classes,
    ref: forwardedRef
  }), /*#__PURE__*/_react.default.createElement(_Text.Text, {
    className: styles.text,
    color: "currentColor",
    isBlock: true,
    lineHeight: 1,
    size: 10,
    truncate: true,
    upperCase: true,
    weight: 700
  }, children));
}

var _default = (0, _context.contextConnect)(Badge, 'Badge');

exports.default = _default;