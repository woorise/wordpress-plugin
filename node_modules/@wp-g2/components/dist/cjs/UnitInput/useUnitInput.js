"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUnitInput = useUnitInput;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _lodash = require("lodash");

var _useUnitInputState = require("./useUnitInputState");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @typedef OwnProps
 * @property {import('../TextInput/types').TextInputArrow} [arrows] Renders specified incrementer/decrementer arrows.
 * @property {boolean} [allowEmptyValue] Allow for values to be an empty string.
 * @property {string} [cssProp] A CSS property name used to validate the (unit) value.
 * @property {string} [fallbackUnit] Unit to use if `incrementFromNonNumericValue` is enabled.
 * @property {boolean} [incrementFromNonNumericValue] Enables incrementing/decrementing from non-numeric values, such as `auto`.
 * @property {string} value The unit value.
 * @property {(value: string) => void} [onChange]
 */

/** @typedef {import('../TextInput/types').Props & OwnProps} Props */

/**
 *
 * @param {import('@wp-g2/create-styles').ViewOwnProps<Props, 'input'>} props
 * @param {import('react').Ref<any>} ref
 */
function useUnitInput(props) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'UnitInput'),
      _useContextSystem$arr = _useContextSystem.arrows,
      arrows = _useContextSystem$arr === void 0 ? false : _useContextSystem$arr,
      _useContextSystem$all = _useContextSystem.allowEmptyValue,
      allowEmptyValue = _useContextSystem$all === void 0 ? false : _useContextSystem$all,
      cssProp = _useContextSystem.cssProp,
      _useContextSystem$isC = _useContextSystem.isCommitOnBlurOrEnter,
      isCommitOnBlurOrEnter = _useContextSystem$isC === void 0 ? true : _useContextSystem$isC,
      _useContextSystem$fal = _useContextSystem.fallbackUnit,
      fallbackUnit = _useContextSystem$fal === void 0 ? 'px' : _useContextSystem$fal,
      _useContextSystem$inc = _useContextSystem.incrementFromNonNumericValue,
      incrementFromNonNumericValue = _useContextSystem$inc === void 0 ? true : _useContextSystem$inc,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? _lodash.noop : _useContextSystem$onC,
      value = _useContextSystem.value,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["arrows", "allowEmptyValue", "cssProp", "isCommitOnBlurOrEnter", "fallbackUnit", "incrementFromNonNumericValue", "onChange", "value"]);

  var unitState = (0, _useUnitInputState.useUnitInputState)({
    allowEmptyValue: allowEmptyValue,
    cssProp: cssProp,
    fallbackUnit: fallbackUnit,
    incrementFromNonNumericValue: incrementFromNonNumericValue,
    onChange: onChange,
    value: value
  });
  return _objectSpread(_objectSpread(_objectSpread({}, otherProps), unitState), {}, {
    arrows: arrows,
    isCommitOnBlurOrEnter: isCommitOnBlurOrEnter
  });
}