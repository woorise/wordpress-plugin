"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findUnitMatch = findUnitMatch;
exports.findUnitMatchExact = findUnitMatchExact;
exports.getInitialParsedUnitValue = getInitialParsedUnitValue;
exports.isPotentialUnitValue = exports.UNITS = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _utils = require("@wp-g2/utils");

var UNITS = ['px', '%', 'em', 'rem', 'vh', 'vw', 'vmin', 'vmax'];
exports.UNITS = UNITS;

function findUnitMatch(_ref) {
  var _ref$units = _ref.units,
      units = _ref$units === void 0 ? UNITS : _ref$units,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value;
  var match = units.find(function (unit) {
    return unit.indexOf(value.toLowerCase()) === 0;
  });
  return match;
}

function findUnitMatchExact(_ref2) {
  var _ref2$units = _ref2.units,
      units = _ref2$units === void 0 ? UNITS : _ref2$units,
      _ref2$value = _ref2.value,
      value = _ref2$value === void 0 ? '' : _ref2$value;
  var match = units.find(function (unit) {
    return unit.toLowerCase() === value.toLowerCase();
  });
  return match;
}

var isPotentialUnitValue = function (value) {
  return _utils.is.numeric(value) && Number(value) !== 0;
};

exports.isPotentialUnitValue = isPotentialUnitValue;

function getInitialParsedUnitValue(_ref3) {
  var cssProp = _ref3.cssProp,
      value = _ref3.value;

  var _parseUnitValue = (0, _utils.parseUnitValue)(value),
      _parseUnitValue2 = (0, _slicedToArray2.default)(_parseUnitValue, 2),
      parsedValue = _parseUnitValue2[0],
      unit = _parseUnitValue2[1];

  var isUndefinedParsedValue = _utils.is.valueEmpty(parsedValue);

  var evalutedValue = isUndefinedParsedValue ? value : parsedValue; // Validation without cssProp

  if (!cssProp) {
    if (isUndefinedParsedValue) {
      return [evalutedValue, undefined];
    } else {
      return [parsedValue, unit];
    }
  } // Validation with cssProp


  if ((0, _utils.isValidCSSValueForProp)(cssProp, value)) {
    if (isUndefinedParsedValue) {
      return [evalutedValue, undefined];
    } else {
      return [parsedValue, unit];
    }
  }

  return [undefined, undefined];
}