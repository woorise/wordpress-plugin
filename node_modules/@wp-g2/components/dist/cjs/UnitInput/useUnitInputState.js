"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUnitInputState = useUnitInputState;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _utils = require("@wp-g2/utils");

var _react = require("react");

var _UnitInput = require("./UnitInput.utils");

function useUnitInputState(_ref) {
  var _ref$allowEmptyValue = _ref.allowEmptyValue,
      allowEmptyValue = _ref$allowEmptyValue === void 0 ? false : _ref$allowEmptyValue,
      cssProp = _ref.cssProp,
      _ref$fallbackUnit = _ref.fallbackUnit,
      fallbackUnit = _ref$fallbackUnit === void 0 ? 'px' : _ref$fallbackUnit,
      _ref$incrementFromNon = _ref.incrementFromNonNumericValue,
      incrementFromNonNumericValue = _ref$incrementFromNon === void 0 ? true : _ref$incrementFromNon,
      onChangeProp = _ref.onChange,
      valueProp = _ref.value;

  var _useControlledValue = (0, _utils.useControlledValue)({
    value: valueProp,
    onChange: onChangeProp
  }),
      _useControlledValue2 = (0, _slicedToArray2.default)(_useControlledValue, 2),
      value = _useControlledValue2[0],
      onChange = _useControlledValue2[1];

  var _getInitialParsedUnit = (0, _UnitInput.getInitialParsedUnitValue)({
    cssProp: cssProp,
    value: value
  }),
      _getInitialParsedUnit2 = (0, _slicedToArray2.default)(_getInitialParsedUnit, 2),
      parsedValue = _getInitialParsedUnit2[0],
      parsedUnit = _getInitialParsedUnit2[1];

  var unit = (0, _UnitInput.findUnitMatchExact)({
    value: parsedUnit
  }) || null;
  var propRefs = (0, _utils.usePropRef)({
    allowEmptyValue: allowEmptyValue,
    fallbackUnit: fallbackUnit,
    cssProp: cssProp,
    incrementFromNonNumericValue: incrementFromNonNumericValue,
    value: value,
    parsedValue: parsedValue,
    unit: unit
  });
  var getIsValidCSSValue = (0, _react.useCallback)(function (next) {
    var cssProp = propRefs.current.cssProp;
    if (!cssProp) return true;
    return (0, _utils.isValidCSSValueForProp)(cssProp, next);
  }, [propRefs]);
  var validate = (0, _react.useCallback)(function (next) {
    var _propRefs$current = propRefs.current,
        allowEmptyValue = _propRefs$current.allowEmptyValue,
        cssProp = _propRefs$current.cssProp,
        fallbackUnit = _propRefs$current.fallbackUnit,
        incrementFromNonNumericValue = _propRefs$current.incrementFromNonNumericValue,
        unit = _propRefs$current.unit,
        value = _propRefs$current.value;
    if (next === value) return false;
    if (!cssProp) return true;
    /**
     * Handle cases that allow for empty values.
     */

    if (allowEmptyValue && _utils.is.empty(next)) {
      return true;
    }

    var validationValue = next;

    if ((0, _UnitInput.isPotentialUnitValue)(validationValue)) {
      if (!unit && incrementFromNonNumericValue) {
        validationValue = (0, _utils.createUnitValue)(validationValue, fallbackUnit);
      } else {
        validationValue = (0, _utils.createUnitValue)(validationValue, unit);
      }
    }

    return getIsValidCSSValue(validationValue);
  }, [getIsValidCSSValue, propRefs]);
  var handleOnChange = (0, _react.useCallback)(function (next) {
    var _propRefs$current2 = propRefs.current,
        allowEmptyValue = _propRefs$current2.allowEmptyValue,
        fallbackUnit = _propRefs$current2.fallbackUnit,
        unit = _propRefs$current2.unit;
    var nextValue = next;

    if (_utils.is.numeric(nextValue)) {
      nextValue = (0, _utils.createUnitValue)(next, unit || fallbackUnit);
    }

    if (allowEmptyValue && _utils.is.empty(next)) {
      nextValue = '';
    }

    if (!validate(nextValue)) return;
    onChange(nextValue);
  }, [onChange, propRefs, validate]);
  var handleOnSelectChange = (0, _react.useCallback)(function (next) {
    var parsedValue = propRefs.current.parsedValue;
    if (!parsedValue) return;
    var final = (0, _utils.createUnitValue)(parsedValue, next);
    handleOnChange(final);
  }, [handleOnChange, propRefs]);
  return {
    incrementFromNonNumericValue: incrementFromNonNumericValue,
    value: parsedValue,
    onChange: handleOnChange,
    onSelectChange: handleOnSelectChange,
    validate: validate,
    unit: unit
  };
}