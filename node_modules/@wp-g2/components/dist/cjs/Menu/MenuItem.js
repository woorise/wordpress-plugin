"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _icons = require("@wordpress/icons");

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _utils = require("@wp-g2/utils");

var _react = _interopRequireWildcard(require("react"));

var _reakit = require("reakit");

var _BaseButton = require("../BaseButton");

var _Flex = require("../Flex");

var _Icon = require("../Icon");

var _Text = require("../Text");

var _View = require("../View");

var _Menu = require("./Menu.Context");

var styles = _interopRequireWildcard(require("./Menu.styles"));

/**
 *
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').MenuItemProps, 'div'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */
function MenuItem(props, forwardedRef) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'MenuItem'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$clo = _useContextSystem.closeOnClick,
      closeOnClick = _useContextSystem$clo === void 0 ? false : _useContextSystem$clo,
      _useContextSystem$isB = _useContextSystem.isBack,
      isBack = _useContextSystem$isB === void 0 ? false : _useContextSystem$isB,
      _useContextSystem$isO = _useContextSystem.isOffset,
      isOffset = _useContextSystem$isO === void 0 ? false : _useContextSystem$isO,
      isSelected = _useContextSystem.isSelected,
      _useContextSystem$onC = _useContextSystem.onClick,
      onClick = _useContextSystem$onC === void 0 ? _utils.noop : _useContextSystem$onC,
      prefix = _useContextSystem.prefix,
      _useContextSystem$sho = _useContextSystem.showArrow,
      showArrow = _useContextSystem$sho === void 0 ? false : _useContextSystem$sho,
      size = _useContextSystem.size,
      suffix = _useContextSystem.suffix,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["children", "className", "closeOnClick", "isBack", "isOffset", "isSelected", "onClick", "prefix", "showArrow", "size", "suffix"]);

  var _useMenuContext = (0, _Menu.useMenuContext)(),
      menu = _useMenuContext.menu;

  var shouldShowArrow = !isBack && showArrow;
  var classes = (0, _styles.cx)(styles.MenuItem, styles[size], shouldShowArrow && styles.showArrow, isBack && styles.showBackArrow, isOffset && styles.offset, className);
  var Component = menu ? _reakit.MenuItem : _View.View;
  var prevArrow = (0, _react.useMemo)(function () {
    return isBack && /*#__PURE__*/_react.default.createElement(_Text.Text, {
      isBlock: true,
      variant: "muted"
    }, /*#__PURE__*/_react.default.createElement(_Icon.Icon, {
      icon: _icons.chevronLeft,
      size: 16
    }));
  }, [isBack]);
  var nextArrow = (0, _react.useMemo)(function () {
    return shouldShowArrow && /*#__PURE__*/_react.default.createElement(_Text.Text, {
      isBlock: true,
      variant: "muted"
    }, /*#__PURE__*/_react.default.createElement(_Icon.Icon, {
      icon: _icons.chevronRight,
      size: 16
    }));
  }, [shouldShowArrow]);
  var selectedContent = (0, _react.useMemo)(function () {
    return _utils.is.defined(isSelected) && /*#__PURE__*/_react.default.createElement(_Icon.Icon, {
      icon: _icons.check,
      size: 16,
      style: {
        opacity: isSelected ? 1 : 0
      }
    });
  }, [isSelected]);
  var prefixContent = (0, _react.useMemo)(function () {
    return (prevArrow || prefix) && /*#__PURE__*/_react.default.createElement(_Flex.Flex, null, prevArrow, prefix);
  }, [prefix, prevArrow]);
  var suffixContent = (0, _react.useMemo)(function () {
    return (selectedContent || nextArrow || suffix) && /*#__PURE__*/_react.default.createElement(_Flex.Flex, null, selectedContent, suffix, nextArrow);
  }, [nextArrow, selectedContent, suffix]);
  var handleOnClick = (0, _react.useCallback)(function (event) {
    onClick(event);

    if ((menu == null ? void 0 : menu.hide) && closeOnClick) {
      menu.hide();
    }
  }, [closeOnClick, menu, onClick]);
  return /*#__PURE__*/_react.default.createElement(_BaseButton.BaseButton, Object.assign({
    as: Component,
    isBlock: true,
    noWrap: false
  }, otherProps, menu, {
    className: classes,
    onClick: handleOnClick,
    prefix: prefixContent,
    ref: forwardedRef,
    size: size,
    suffix: suffixContent,
    textAlign: "left"
  }), children);
}
/**
 * `MenuItem` is an actionable component that renders within a `Menu`.
 *
 * @example
 * ```jsx
 * <Menu>
 *  <MenuItem onClick={...}>Ana</MenuItem>
 *  <MenuItem onClick={...}>Elsa</MenuItem>
 *  <MenuItem onClick={...}>Olaf</MenuItem>
 * </Menu>
 * ```
 *
 * @see https://reakit.io/docs/menu/#menuitem
 */


var ConnectedMenuItem = (0, _context.contextConnect)(MenuItem, 'MenuItem');
var _default = ConnectedMenuItem;
exports.default = _default;