import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useEffect, useState } from 'react';
import { useTabsContext } from './Tabs.Context';
import * as styles from './Tabs.styles';
var TabIndicatorView = styles.TabIndicatorView;

function TabIndicator() {
  var _useTabsContext = useTabsContext(),
      containerRef = _useTabsContext.listRef,
      sizes = _useTabsContext.sizes,
      tab = _useTabsContext.tab;

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      left = _useState2[0],
      setLeft = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      width = _useState4[0],
      setWidth = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      canAnimate = _useState6[0],
      setCanAnimate = _useState6[1];

  var containerWidth = sizes == null ? void 0 : sizes.width;
  useEffect(function () {
    var _currentItem$ref;

    var containerNode = containerRef == null ? void 0 : containerRef.current;
    if (!containerNode) return;
    /**
     * Workaround for Reakit
     */

    var items = tab.items,
        selectedId = tab.selectedId;
    var currentItem = items.find(function (item) {
      return item.id === selectedId;
    });
    var targetNode = currentItem == null ? void 0 : (_currentItem$ref = currentItem.ref) == null ? void 0 : _currentItem$ref.current;
    if (!targetNode) return;

    var _containerNode$getBou = containerNode.getBoundingClientRect(),
        parentX = _containerNode$getBou.x;

    var _targetNode$getBoundi = targetNode.getBoundingClientRect(),
        offsetWidth = _targetNode$getBoundi.width,
        x = _targetNode$getBoundi.x;

    setLeft(x - parentX);
    setWidth(offsetWidth);

    if (!canAnimate) {
      requestAnimationFrame(function () {
        if (offsetWidth) {
          setCanAnimate(true);
        }
      });
    }
  }, [canAnimate, containerRef, containerWidth, tab]);
  var viewStyle = {
    transform: "translateX(" + left + "px)",
    transition: canAnimate ? null : 'none',
    width: width
  };
  return /*#__PURE__*/React.createElement(TabIndicatorView, {
    role: "presentation",
    style: viewStyle
  });
}

export default /*#__PURE__*/React.memo(TabIndicator);