import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/esm/taggedTemplateLiteralLoose";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n\talign-items: center;\n\tbottom: 0;\n\tdisplay: flex;\n\tjustify-content: center;\n\tleft: 0;\n\tposition: fixed;\n\tright: 0;\n\ttop: 0;\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

import { Schema } from '@wp-g2/protokit';
import { css, styled, ui } from '@wp-g2/styles';
import React, { useState } from 'react';
import { Button, Card, CardBody, Container, FormGroup, Grid, HStack, ListGroup, ListGroupHeader, Slider, Surface, Text, TextInput, View, VStack } from '../../index';
export default {
  title: 'Examples/WIP/Performance'
};
var Frame = styled(Surface)(_templateObject());
var dimensionSchema = new Schema(function () {
  return {
    title: '',
    x: 0,
    y: 1,
    z: 0
  };
});
var SliderTextInput = /*#__PURE__*/React.memo(function (_ref) {
  var onChange = _ref.onChange,
      prop = _ref.prop,
      value = _ref.value;
  var handleOnChange = React.useCallback(function (next) {
    var _onChange;

    onChange((_onChange = {}, _onChange[prop] = next, _onChange));
  }, [onChange, prop]);
  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Slider, {
    onChange: handleOnChange,
    value: value
  }), /*#__PURE__*/React.createElement(TextInput, {
    onChange: handleOnChange,
    type: "number",
    value: value
  }));
});
var DimensionCard = /*#__PURE__*/React.memo(function (_ref2) {
  var id = _ref2.id,
      onChange = _ref2.onChange,
      title = _ref2.title,
      x = _ref2.x,
      y = _ref2.y,
      z = _ref2.z;
  var updateTitle = React.useCallback(function (next) {
    onChange({
      id: id,
      title: next
    });
  }, [onChange, id]);
  var updateValue = React.useCallback(function (next) {
    onChange(_objectSpread({
      id: id
    }, next));
  }, [onChange, id]);
  return /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ListGroupHeader, null, "Dimensions"), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Title"
  }, /*#__PURE__*/React.createElement(TextInput, {
    onChange: updateTitle,
    value: title
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "x"
  }, /*#__PURE__*/React.createElement(SliderTextInput, {
    onChange: updateValue,
    prop: "x",
    value: x
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "y"
  }, /*#__PURE__*/React.createElement(SliderTextInput, {
    onChange: updateValue,
    prop: "y",
    value: y
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "z"
  }, /*#__PURE__*/React.createElement(SliderTextInput, {
    onChange: updateValue,
    prop: "z",
    value: z
  })))));
});

var Example = function () {
  var _useState = useState([].concat(dimensionSchema.make(1))),
      _useState2 = _slicedToArray(_useState, 2),
      dimensions = _useState2[0],
      setDimensions = _useState2[1];

  var updateDimension = React.useCallback(function (next) {
    setDimensions(function (prev) {
      return prev.map(function (d) {
        if (d.id !== next.id) return d;
        return _objectSpread(_objectSpread({}, d), next);
      });
    });
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {
    css: css([ui.position.relative, ui.zIndex(2)]),
    width: 600
  }, /*#__PURE__*/React.createElement(VStack, null, /*#__PURE__*/React.createElement(HStack, null, /*#__PURE__*/React.createElement(Button, {
    onClick: function addDimension() {
      setDimensions(function (prev) {
        return [].concat(prev, [dimensionSchema.makeOne()]);
      });
    },
    variant: "primary"
  }, "Add New")), /*#__PURE__*/React.createElement(ListGroup, null, dimensions.map(function (item) {
    return /*#__PURE__*/React.createElement(DimensionCard, Object.assign({}, item, {
      onChange: updateDimension
    }));
  })))), /*#__PURE__*/React.createElement(Frame, {
    variant: "dotted"
  }));
};

export var _default = function () {
  return /*#__PURE__*/React.createElement(Example, null);
};