import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { FiMinus, FiPlus } from '@wp-g2/icons';
import { faker, Schema } from '@wp-g2/protokit';
import { ui } from '@wp-g2/styles';
import { chunk } from '@wp-g2/utils';
import React, { useState } from 'react';
import { Button, Card, CardBody, Collapsible, CollapsibleContent, CollapsibleTrigger, ColorCircle, ColorControl, ColorPicker, Container, Elevation, FormGroup, Grid, HStack, ListGroup, ListGroupHeader, ListGroups, Panel, PanelBody, PanelHeader, Popover, Select, Spacer, Surface, Switch, Tab, TabList, TabPanel, Tabs, View } from '../../index';
export default {
  title: 'Examples/WIP/ContextPopover'
};
var colorSchema = new Schema(function () {
  return {
    color: faker.internet.color()
  };
});
var baseColors = colorSchema.make(34);
var themeColors = colorSchema.make(50);
var customColors = colorSchema.make(8);

var TabbedColorControls = function (_ref) {
  var _ref$colors = _ref.colors,
      colors = _ref$colors === void 0 ? baseColors : _ref$colors;
  return /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(TabList, null, /*#__PURE__*/React.createElement(Tab, {
    size: "xSmall"
  }, "Solid"), /*#__PURE__*/React.createElement(Tab, {
    size: "xSmall"
  }, "Gradient")), /*#__PURE__*/React.createElement(TabPanel, null, /*#__PURE__*/React.createElement(Spacer, {
    pt: 3
  }, /*#__PURE__*/React.createElement(Grid, {
    columns: 7,
    gap: 2
  }, colors.map(function (color, index) {
    return /*#__PURE__*/React.createElement(ColorCircle, Object.assign({}, color, {
      color: "hsl(" + (360 - index * 10) + ", 100%, 50%)"
    }));
  })))), /*#__PURE__*/React.createElement(TabPanel, null, /*#__PURE__*/React.createElement(Spacer, {
    pt: 3
  }, /*#__PURE__*/React.createElement(Grid, {
    columns: 7,
    gap: 2
  }, colors.map(function (color, index) {
    return /*#__PURE__*/React.createElement(ColorCircle, Object.assign({}, color, {
      color: "hsl(" + index * 10 + ", 100%, 50%)"
    }));
  })))));
};

var ColorControls = function (_ref2) {
  var limitColors = _ref2.limitColors,
      showTabs = _ref2.showTabs;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      popoverState = _useState2[0],
      setPopoverState = _useState2[1];

  var _chunk = chunk(baseColors, limitColors ? 100 : 14),
      _chunk2 = _slicedToArray(_chunk, 1),
      baseColorsData = _chunk2[0];

  var _chunk3 = chunk(themeColors, limitColors ? 100 : 8),
      _chunk4 = _slicedToArray(_chunk3, 1),
      themeColorsData = _chunk4[0];

  var _chunk5 = chunk(customColors, limitColors ? 100 : 2),
      _chunk6 = _slicedToArray(_chunk5, 1),
      customColorsData = _chunk6[0];

  return /*#__PURE__*/React.createElement(Spacer, {
    m: 0,
    px: 1,
    py: 2
  }, /*#__PURE__*/React.createElement(ListGroups, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ListGroupHeader, null, "Core", !showTabs && /*#__PURE__*/React.createElement(Select, {
    isSubtle: true,
    size: "small"
  }, /*#__PURE__*/React.createElement("option", null, "Solid"), /*#__PURE__*/React.createElement("option", null, "Gradient"))), showTabs ? /*#__PURE__*/React.createElement(TabbedColorControls, {
    colors: baseColorsData
  }) : /*#__PURE__*/React.createElement(Grid, {
    columns: 7,
    gap: 2
  }, baseColorsData.map(function (color, index) {
    return /*#__PURE__*/React.createElement(ColorCircle, Object.assign({}, color, {
      color: "hsl(" + (360 - index * 10) + ", 100%, 50%)"
    }));
  }))), /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ListGroupHeader, null, "Theme", !showTabs && /*#__PURE__*/React.createElement(Select, {
    isSubtle: true,
    size: "small"
  }, /*#__PURE__*/React.createElement("option", null, "Solid"), /*#__PURE__*/React.createElement("option", null, "Gradient"))), /*#__PURE__*/React.createElement(Grid, {
    columns: 7,
    gap: 2
  }, themeColorsData.map(function (color) {
    return /*#__PURE__*/React.createElement(ColorCircle, color);
  }))), /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ListGroupHeader, null, "Custom", !showTabs && /*#__PURE__*/React.createElement(Select, {
    isSubtle: true,
    size: "small"
  }, /*#__PURE__*/React.createElement("option", null, "Solid"), /*#__PURE__*/React.createElement("option", null, "Gradient"))), /*#__PURE__*/React.createElement(Grid, {
    columns: 7,
    gap: 2
  }, customColorsData.map(function (color) {
    return /*#__PURE__*/React.createElement(ColorCircle, color);
  }), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Popover, {
    css: [{
      marginLeft: 39
    }],
    maxWidth: "262px",
    onVisibleChange: setPopoverState,
    placement: "top",
    trigger: /*#__PURE__*/React.createElement(Button, {
      icon: /*#__PURE__*/React.createElement(FiPlus, null),
      isControl: true,
      isRounded: true,
      isSubtle: true,
      size: "xSmall"
    }),
    visible: popoverState
  }, /*#__PURE__*/React.createElement(CardBody, null, /*#__PURE__*/React.createElement(ColorPicker, null))))))));
};

var ColorSetting = function (_ref3) {
  var color = _ref3.color,
      limitColors = _ref3.limitColors,
      onVisibleChange = _ref3.onVisibleChange,
      showElevation = _ref3.showElevation,
      showTabs = _ref3.showTabs,
      title = _ref3.title;

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      visible = _useState4[0],
      setVisible = _useState4[1];

  return /*#__PURE__*/React.createElement(Collapsible, {
    css: [ui.position.relative, ui.zIndex(visible ? 10 : 0)],
    onVisibleChange: function handleOnVisibleChange(next) {
      setVisible(next);
      onVisibleChange(next);
    },
    visible: visible
  }, /*#__PURE__*/React.createElement(Elevation, {
    offset: -8,
    value: showElevation && visible ? 4 : 0
  }), /*#__PURE__*/React.createElement(HStack, {
    css: [ui.hover(ui.$('ColorAction').css({
      opacity: 1
    }))]
  }, /*#__PURE__*/React.createElement(Spacer, null, /*#__PURE__*/React.createElement(CollapsibleTrigger, {
    as: ColorControl,
    color: color
  }, title)), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Button, Object.assign({}, ui.$('ColorAction'), {
    className: "action",
    css: "\n\t\t\t\t\t\t\topacity: 0;\n\t\t\t\t\t\t\t&:focus {\n\t\t\t\t\t\t\t\topacity: 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t",
    icon: /*#__PURE__*/React.createElement(FiMinus, null),
    isRounded: true,
    isSubtle: true,
    size: "small"
  })))), /*#__PURE__*/React.createElement(CollapsibleContent, null, /*#__PURE__*/React.createElement(ColorControls, {
    limitColors: limitColors,
    showTabs: showTabs
  })));
};

var Example = function () {
  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      visible = _useState6[0],
      setVisible = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      showElevation = _useState8[0],
      setShowElevation = _useState8[1];

  var _useState9 = useState(false),
      _useState10 = _slicedToArray(_useState9, 2),
      showTabs = _useState10[0],
      setShowTabs = _useState10[1];

  var _useState11 = useState(false),
      _useState12 = _slicedToArray(_useState11, 2),
      limitColors = _useState12[0],
      setLimitColors = _useState12[1];

  return /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Container, {
    width: 270
  }, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ListGroupHeader, null, "Settings"), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Elevation"
  }, /*#__PURE__*/React.createElement(Switch, {
    checked: showElevation,
    onChange: setShowElevation
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Use Tabs"
  }, /*#__PURE__*/React.createElement(Switch, {
    checked: showTabs,
    onChange: setShowTabs
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "COLORS!"
  }, /*#__PURE__*/React.createElement(Switch, {
    checked: limitColors,
    onChange: setLimitColors
  }))))))), /*#__PURE__*/React.createElement(Container, {
    css: [ui.position.relative, {
      minHeight: '80vh'
    }],
    width: 270
  }, /*#__PURE__*/React.createElement(Surface, {
    css: [ui.opacity(visible ? 0.8 : 0), {
      pointerEvents: visible ? null : 'none'
    }, ui.position.full, ui.zIndex(1), {
      minHeight: '80vh'
    }]
  }), /*#__PURE__*/React.createElement(Card, {
    css: [{
      minHeight: '80vh'
    }],
    isRounded: false
  }, /*#__PURE__*/React.createElement(Panel, {
    visible: true
  }, /*#__PURE__*/React.createElement(PanelHeader, {
    title: "Color"
  }), /*#__PURE__*/React.createElement(PanelBody, null, /*#__PURE__*/React.createElement(Spacer, {
    pb: 3
  }, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ColorSetting, {
    color: "white",
    limitColors: limitColors,
    onVisibleChange: setVisible,
    showElevation: showElevation,
    showTabs: showTabs,
    title: "Background"
  }), /*#__PURE__*/React.createElement(ColorSetting, {
    color: "black",
    limitColors: limitColors,
    onVisibleChange: setVisible,
    showElevation: showElevation,
    showTabs: showTabs,
    title: "Text"
  }), /*#__PURE__*/React.createElement(ColorSetting, {
    color: "pink",
    limitColors: limitColors,
    onVisibleChange: setVisible,
    showElevation: showElevation,
    showTabs: showTabs,
    title: "Accent"
  }))))))));
};

export var _default = function () {
  return /*#__PURE__*/React.createElement(Example, null);
};