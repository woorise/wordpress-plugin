import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/esm/taggedTemplateLiteralLoose";

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\ttop: 0;\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

import { ContextSystemProvider } from '@wp-g2/context';
import { FiChevronLeft, FiDroplet, FiGrid, FiPlus, FiType } from '@wp-g2/icons';
import { styled, ui } from '@wp-g2/styles';
import React from 'react';
import { Button, CardBody, ColorControl, Divider, FormGroup, Grid, Heading, HStack, Icon, ListGroup, ListGroupHeader, MenuItem, Navigator, NavigatorLink, NavigatorScreen, NavigatorScreens, Panel, PanelBody, PanelHeader, SegmentedControl, Select, Slider, Spacer, Surface, Text, TextInput, useNavigatorHistory, useNavigatorLocation, View } from '../../index';
export default {
  title: 'Examples/WIP/GlobalStylesSidebar'
};
var Screen = styled(Surface, {
  props: {
    variant: 'tertiary'
  }
})(_templateObject());

var SettingLink = function (_ref) {
  var prefix = _ref.prefix,
      title = _ref.title,
      to = _ref.to;
  return /*#__PURE__*/React.createElement(NavigatorLink, {
    to: to
  }, /*#__PURE__*/React.createElement(MenuItem, {
    prefix: prefix,
    showArrow: true
  }, /*#__PURE__*/React.createElement(Text, {
    weight: 600
  }, title)));
};

var GlobalStylesScreen = function () {
  return /*#__PURE__*/React.createElement(Screen, {
    css: "\n\t\t\t\tpadding-top: 40px;\n\t\t\t"
  }, /*#__PURE__*/React.createElement(CardBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(SettingLink, {
    prefix: /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(FiDroplet, null)
    }),
    title: "Colors",
    to: "Colors"
  }), /*#__PURE__*/React.createElement(SettingLink, {
    prefix: /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(FiType, null)
    }),
    title: "Typography",
    to: "Typography"
  }), /*#__PURE__*/React.createElement(SettingLink, {
    prefix: /*#__PURE__*/React.createElement(Icon, {
      icon: /*#__PURE__*/React.createElement(FiGrid, null)
    }),
    title: "Spacing"
  }))), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(CardBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ListGroupHeader, null, "Blocks"), /*#__PURE__*/React.createElement(SettingLink, {
    title: "Button",
    to: "Buttons"
  }), /*#__PURE__*/React.createElement(SettingLink, {
    title: "Forms"
  }), /*#__PURE__*/React.createElement(SettingLink, {
    title: "Images"
  }))));
};

var ColorsScreen = function () {
  return /*#__PURE__*/React.createElement(Screen, {
    css: "\n\t\t\t\tpadding-top: 60px;\n\t\t\t"
  }, /*#__PURE__*/React.createElement(CardBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ListGroupHeader, null, "Defaults"), /*#__PURE__*/React.createElement(ColorControl, {
    color: "#fff"
  }, "Site Background"), /*#__PURE__*/React.createElement(ColorControl, {
    color: "#000"
  }, "Body Text"), /*#__PURE__*/React.createElement(ColorControl, {
    color: "#0f6"
  }, "Accent"))), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(CardBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ListGroupHeader, null, "Theme"), /*#__PURE__*/React.createElement(ColorControl, {
    color: "#111"
  }, "Dark Gray"), /*#__PURE__*/React.createElement(ColorControl, {
    color: "#05f"
  }, "Blues"))), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(CardBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ListGroupHeader, null, "Custom", /*#__PURE__*/React.createElement(Button, {
    icon: /*#__PURE__*/React.createElement(FiPlus, null),
    isControl: true,
    isSubtle: true,
    size: "small"
  })), /*#__PURE__*/React.createElement(ColorControl, {
    color: "#f00"
  }, "Red"), /*#__PURE__*/React.createElement(ColorControl, {
    color: "#0f0"
  }, "Green"))));
};

var TypographyScreen = function () {
  var headings = [{
    label: /*#__PURE__*/React.createElement(Text, null, "H1"),
    value: 'h1'
  }, {
    label: /*#__PURE__*/React.createElement(Text, null, "H2"),
    value: 'h2'
  }, {
    label: /*#__PURE__*/React.createElement(Text, null, "H3"),
    value: 'h3'
  }, {
    label: /*#__PURE__*/React.createElement(Text, null, "H4"),
    value: 'h4'
  }, {
    label: /*#__PURE__*/React.createElement(Text, null, "H5"),
    value: 'h5'
  }, {
    label: /*#__PURE__*/React.createElement(Text, null, "H6"),
    value: 'h6'
  }];
  return /*#__PURE__*/React.createElement(Screen, {
    css: "\n\t\t\t\tpadding-top: 60px;\n\t\t\t"
  }, /*#__PURE__*/React.createElement(Panel, {
    visible: true
  }, /*#__PURE__*/React.createElement(PanelHeader, {
    title: "Heading"
  }), /*#__PURE__*/React.createElement(PanelBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(Spacer, {
    mb: 3
  }, /*#__PURE__*/React.createElement(SegmentedControl, {
    isBlock: true,
    options: headings
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Family"
  }, /*#__PURE__*/React.createElement(Select, {
    options: [{
      value: 'georgia',
      label: 'Georgia'
    }]
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Size"
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(TextInput, {
    value: 32
  }), /*#__PURE__*/React.createElement(Slider, null))), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Weight"
  }, /*#__PURE__*/React.createElement(Select, {
    options: [{
      value: '500',
      label: '500'
    }]
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Transform"
  }, /*#__PURE__*/React.createElement(Select, {
    options: [{
      value: 'None',
      label: 'None'
    }]
  }))))), /*#__PURE__*/React.createElement(Panel, {
    visible: true
  }, /*#__PURE__*/React.createElement(PanelHeader, {
    title: "Base Text"
  }), /*#__PURE__*/React.createElement(PanelBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(FormGroup, {
    label: "Family"
  }, /*#__PURE__*/React.createElement(Select, {
    options: [{
      value: 'georgia',
      label: 'Georgia'
    }]
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Size"
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(TextInput, {
    value: 32
  }), /*#__PURE__*/React.createElement(Slider, null))), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Weight"
  }, /*#__PURE__*/React.createElement(Select, {
    options: [{
      value: '500',
      label: '500'
    }]
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Transform"
  }, /*#__PURE__*/React.createElement(Select, {
    options: [{
      value: 'None',
      label: 'None'
    }]
  }))))));
};

var ButtonsScreen = function () {
  return /*#__PURE__*/React.createElement(Screen, {
    css: "\n\t\t\t\tpadding-top: 60px;\n\t\t\t"
  }, /*#__PURE__*/React.createElement(Panel, {
    visible: true
  }, /*#__PURE__*/React.createElement(PanelHeader, {
    title: "Typography"
  }), /*#__PURE__*/React.createElement(PanelBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(FormGroup, {
    label: "Family"
  }, /*#__PURE__*/React.createElement(Select, {
    options: [{
      value: 'georgia',
      label: 'Georgia'
    }]
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Size"
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(TextInput, {
    value: 32
  }), /*#__PURE__*/React.createElement(Slider, null))), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Weight"
  }, /*#__PURE__*/React.createElement(Select, {
    options: [{
      value: '500',
      label: '500'
    }]
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Transform"
  }, /*#__PURE__*/React.createElement(Select, {
    options: [{
      value: 'None',
      label: 'None'
    }]
  }))))), /*#__PURE__*/React.createElement(Panel, {
    visible: true
  }, /*#__PURE__*/React.createElement(PanelHeader, {
    title: "Color"
  }), /*#__PURE__*/React.createElement(PanelBody, null, /*#__PURE__*/React.createElement(ListGroup, null, /*#__PURE__*/React.createElement(ColorControl, {
    color: "#111"
  }, "Text"), /*#__PURE__*/React.createElement(ColorControl, {
    color: "#05f"
  }, "Background")))), /*#__PURE__*/React.createElement(Panel, null, /*#__PURE__*/React.createElement(PanelHeader, {
    title: "Behaviour"
  })), /*#__PURE__*/React.createElement(Panel, null, /*#__PURE__*/React.createElement(PanelHeader, {
    title: "Advanced"
  })));
};

var useNavigatorTitle = function (path) {
  var _useNavigatorLocation = useNavigatorLocation(),
      pathname = _useNavigatorLocation.pathname;

  var screen = screens.find(function (screen) {
    return screen.path === (path || pathname);
  });
  return screen ? screen.title : '';
};

var usePreviousScreen = function () {
  var _useNavigatorHistory = useNavigatorHistory(),
      entries = _useNavigatorHistory.entries;

  var _useNavigatorLocation2 = useNavigatorLocation(),
      pathname = _useNavigatorLocation2.pathname;

  var current = entries.find(function (entry) {
    return entry.pathname === pathname;
  });
  var currentIndex = entries.indexOf(current);
  var previous = entries[currentIndex - 1];
  if (!previous) return;
  return screens.find(function (screen) {
    return screen.path === previous.pathname;
  });
};

var ANIMATION_SPEED = 0.14;

var GlobalStylesHeader = function () {
  var title = useNavigatorTitle();
  var previousScreen = usePreviousScreen();
  var hasPreviousScreen = !!previousScreen;
  return /*#__PURE__*/React.createElement(Surface, {
    borderBottom: true,
    css: [ui.padding(3), {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      zIndex: 10
    }, {
      overflow: 'hidden'
    }, ui.frame.height(hasPreviousScreen ? 60 : 40), ui.animation.default, ui.animation.duration(ANIMATION_SPEED)],
    variant: "tertiary"
  }, /*#__PURE__*/React.createElement(View, {
    css: [{
      pointerEvents: hasPreviousScreen ? 'auto' : 'none'
    }, ui.opacity(hasPreviousScreen ? 1 : 0), ui.offset.x(hasPreviousScreen ? 0 : -20), ui.animation.default, ui.animation.delay(ANIMATION_SPEED * 0.5), ui.animation.duration(ANIMATION_SPEED)]
  }, previousScreen && /*#__PURE__*/React.createElement(NavigatorLink, {
    isBack: true
  }, /*#__PURE__*/React.createElement(HStack, {
    alignment: "left",
    gap: 1
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: /*#__PURE__*/React.createElement(FiChevronLeft, null),
    size: 12
  }), /*#__PURE__*/React.createElement(Text, {
    color: "currentColor",
    isBlock: true,
    lineHeight: 1,
    size: "caption"
  }, "Back to ", previousScreen.title)))), /*#__PURE__*/React.createElement(Heading, {
    css: [ui.position.bottom, ui.offset({
      y: -12
    })],
    size: 5
  }, title));
};

var screens = [{
  component: GlobalStylesScreen,
  path: 'GlobalStyles',
  title: 'Global Styles'
}, {
  component: ColorsScreen,
  path: 'Colors',
  title: 'Colors'
}, {
  component: TypographyScreen,
  path: 'Typography',
  title: 'Typography'
}, {
  component: ButtonsScreen,
  path: 'Buttons',
  title: 'Buttons'
}];

var Sidebar = function (_ref2) {
  var children = _ref2.children;
  return /*#__PURE__*/React.createElement(ContextSystemProvider, {
    value: {
      Grid: {
        gap: 2
      },
      Icon: {
        size: 16
      }
    }
  }, /*#__PURE__*/React.createElement(View, {
    css: "\n\t\t\t\t\twidth: 280px;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\theight: 100vh;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tright: 0;\n\t\t\t\t\tborder-left: 1px solid " + ui.get('colorDivider') + ";\n\t\t\t\t"
  }, children));
};

var Example = function () {
  // const initialPath = 'Typography';
  return /*#__PURE__*/React.createElement(Navigator, {
    initialPath: 'GlobalStyles'
  }, /*#__PURE__*/React.createElement(GlobalStylesHeader, null), /*#__PURE__*/React.createElement(NavigatorScreens, {
    css: [ui.frame.height('auto')]
  }, screens.map(function (screen) {
    return /*#__PURE__*/React.createElement(NavigatorScreen, Object.assign({}, screen, {
      animationEnterDelay: 0,
      animationEnterDuration: ANIMATION_SPEED,
      animationExitDuration: ANIMATION_SPEED,
      key: screen.path
    }));
  })));
};

export var _default = function () {
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Sidebar, null, /*#__PURE__*/React.createElement(Example, null)));
};