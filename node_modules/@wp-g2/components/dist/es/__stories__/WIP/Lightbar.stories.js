import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useCallback, useEffect, useReducer, useRef } from 'react';
import { Button } from '../../Button';
import { FormGroup } from '../../FormGroup';
import { Heading } from '../../Heading';
import { Slider } from '../../Slider';
import { Text } from '../../Text';
import { VStack } from '../../VStack';
export default {
  title: 'Examples/WIP/Performance/Lightbar'
};
var REQUEST_ANIMATION_FRAME_DELTA = 'REQUEST_ANIMATION_FRAME_DELTA';
var TOGGLE_START = 'TOGGLE_START';
var SET_WIDTH = 'SET_WIDTH';
var SET_SPEED = 'SET_SPEED';
var RECEIVE_API_STATE = 'RECEIVE_API_STATE';

var requestAnimationFrameDelta = function (delta) {
  return {
    type: REQUEST_ANIMATION_FRAME_DELTA,
    delta: delta
  };
};

var toggleStart = function () {
  return {
    type: TOGGLE_START
  };
};

var setWidth = function (width) {
  return {
    type: SET_WIDTH,
    width: width
  };
};

var setSpeed = function (speed) {
  return {
    type: SET_SPEED,
    speed: speed
  };
};

var receiveApiState = function (_ref) {
  var isStarted = _ref.isStarted,
      isStopping = _ref.isStopping,
      speed = _ref.speed,
      stoppingBounceCount = _ref.stoppingBounceCount,
      width = _ref.width;
  return {
    type: RECEIVE_API_STATE,
    receivedState: {
      isStarted: isStarted,
      width: width,
      speed: speed,
      isStopping: isStopping,
      stoppingBounceCount: stoppingBounceCount
    }
  };
};

var minMarginLeft = 0;

var reverseMovementDirection = function (state) {
  var nextMovementDirection = state.movementDirection === 'right' ? 'left' : 'right';
  var nextStoppingBounceCount = state.isStopping ? state.stoppingBounceCount + 1 : state.stoppingBounceCount;
  return _objectSpread(_objectSpread({}, state), {}, {
    movementDirection: nextMovementDirection,
    stoppingBounceCount: nextStoppingBounceCount
  });
};

var bounceLeftSide = function (state, nextMarginLeft) {
  var bouncedMarginLeft = Math.abs(nextMarginLeft);
  return reverseMovementDirection(_objectSpread(_objectSpread({}, state), {}, {
    marginLeft: bouncedMarginLeft
  }));
};

var moveLeft = function (state, pctDelta) {
  var nextMarginLeft = state.marginLeft - pctDelta;

  if (nextMarginLeft < minMarginLeft) {
    return bounceLeftSide(state, nextMarginLeft);
  } else {
    return _objectSpread(_objectSpread({}, state), {}, {
      marginLeft: nextMarginLeft
    });
  }
};

var bounceRightSide = function (state, nextMarginLeft) {
  var bouncedMarginLeft = state.maxMarginLeft - (nextMarginLeft - state.maxMarginLeft);
  return reverseMovementDirection(_objectSpread(_objectSpread({}, state), {}, {
    marginLeft: bouncedMarginLeft
  }));
};

var moveRight = function (state, pctDelta) {
  var nextMarginLeft = state.marginLeft + pctDelta;

  if (nextMarginLeft > state.maxMarginLeft) {
    return bounceRightSide(state, nextMarginLeft);
  } else {
    return _objectSpread(_objectSpread({}, state), {}, {
      marginLeft: nextMarginLeft
    });
  }
};

var stop = function (state) {
  return _objectSpread(_objectSpread({}, state), {}, {
    isStarted: false,
    isStopping: false,
    stoppingBounceCount: 0
  });
};

var stopIfNeeded = function (state) {
  if (!state.isStopping || state.stoppingBounceCount < 2) {
    return state;
  }

  var midpoint = state.maxMarginLeft / 2;
  var tolerance = state.maxMarginLeft * 0.02;
  var isAtMidpoint = state.marginLeft > midpoint - tolerance / 2 && state.marginLeft < midpoint + tolerance / 2;

  if (isAtMidpoint) {
    return stop(state);
  }

  return state;
};

var moveLightbar = function (state, delta) {
  var pctDelta = delta * (state.maxMarginLeft / state.speed);
  var nextState = state.movementDirection === 'right' ? moveRight(state, pctDelta) : moveLeft(state, pctDelta);
  return stopIfNeeded(nextState);
};

var startStopping = function (state) {
  return _objectSpread(_objectSpread({}, state), {}, {
    isStarted: false,
    isStopping: true,
    stoppingBounceCount: 0
  });
};

var start = function (state) {
  return _objectSpread(_objectSpread({}, state), {}, {
    isStarted: true
  });
};

var initialState = {
  isStarted: false,
  isStopping: false,
  stoppingBounceCount: 0,
  speed: 1000,
  movementDirection: 'right',
  maxMarginLeft: 98,
  marginLeft: 0,
  width: 2
};

var reducer = function (state, action) {
  switch (action.type) {
    case REQUEST_ANIMATION_FRAME_DELTA:
      {
        if (state.isStarted || state.isStopping) {
          return moveLightbar(state, action.delta);
        }

        return state;
      }

    case SET_SPEED:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          speed: action.speed
        });
      }

    case SET_WIDTH:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          width: action.width,
          maxMarginLeft: 100 - action.width
        });
      }

    case TOGGLE_START:
      {
        return state.isStarted ? startStopping(state) : start(state);
      }

    case RECEIVE_API_STATE:
      {
        return _objectSpread(_objectSpread({}, state), action.receivedState);
      }

    default:
      return state;
  }
};

var useLightbarReducer = function () {
  var _useReducer = useReducer(reducer, initialState),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  return [state, dispatch];
};

var useRequestAnimationFrame = function (dispatch) {
  var previousTimestampRef = useRef();
  var requestRef = useRef();
  var dispatchDelta = useCallback(function (timestamp) {
    if (previousTimestampRef.current) {
      var delta = timestamp - previousTimestampRef.current;
      dispatch(requestAnimationFrameDelta(delta));
    }

    previousTimestampRef.current = timestamp;
    requestAnimationFrame(dispatchDelta);
  }, [dispatch]);
  useEffect(function () {
    requestRef.current = requestAnimationFrame(dispatchDelta);
    return function () {
      return cancelAnimationFrame(requestRef.current);
    };
  }, [dispatchDelta]);
};

var Lightbar = function (_ref2) {
  var marginLeft = _ref2.marginLeft,
      width = _ref2.width;
  return /*#__PURE__*/React.createElement("div", {
    style: {
      border: '2px solid black',
      width: '98%',
      height: '250px',
      margin: 'auto'
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      backgroundColor: 'black',
      height: '100%',
      width: width + "%",
      marginLeft: marginLeft + "%"
    }
  }));
};

var sessionId = 'ABC-123';

var TherapistSettings = function (_ref3) {
  var dispatch = _ref3.dispatch,
      isStarted = _ref3.isStarted,
      isStopping = _ref3.isStopping,
      speed = _ref3.speed,
      width = _ref3.width;
  var handleToggleStart = useCallback(function () {
    return dispatch(toggleStart());
  }, [dispatch]);
  var handleSetSpeed = useCallback(function (speed) {
    return dispatch(setSpeed(speed));
  }, [dispatch]);
  var handleSetWidth = useCallback(function (width) {
    return dispatch(setWidth(width));
  }, [dispatch]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormGroup, {
    label: "Light speed"
  }, /*#__PURE__*/React.createElement(Slider, {
    max: 3000,
    min: 100,
    onChange: handleSetSpeed,
    value: speed
  })), /*#__PURE__*/React.createElement(FormGroup, {
    label: "Light width"
  }, /*#__PURE__*/React.createElement(Slider, {
    max: 60,
    min: 20,
    onChange: handleSetWidth,
    value: width
  })), /*#__PURE__*/React.createElement(Button, {
    css: {
      margin: 'auto'
    },
    disabled: isStopping,
    onClick: handleToggleStart
  }, isStarted ? 'Stop' : 'Start'));
};

export var _default = function () {
  var _useLightbarReducer = useLightbarReducer(),
      _useLightbarReducer2 = _slicedToArray(_useLightbarReducer, 2),
      lightbarState = _useLightbarReducer2[0],
      dispatch = _useLightbarReducer2[1];

  useRequestAnimationFrame(dispatch);
  return /*#__PURE__*/React.createElement(VStack, {
    alignment: "center"
  }, /*#__PURE__*/React.createElement(Heading, {
    size: 1
  }, "EMDR Lightbar"), /*#__PURE__*/React.createElement(Text, null, "Session ID to share with your client: ", sessionId), /*#__PURE__*/React.createElement(TherapistSettings, Object.assign({}, lightbarState, {
    dispatch: dispatch
  })), /*#__PURE__*/React.createElement(Lightbar, lightbarState));
};