import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, ContextSystemProvider, hasNamespace, useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import React from 'react';
import * as linkStyles from '../Link/Link.styles';
import * as styles from './Navigator.styles';
import { NavLink, useHistory } from './Router';

function NavigatorLink(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'NavigatorLink'),
      as = _useContextSystem.as,
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      exact = _useContextSystem.exact,
      href = _useContextSystem.href,
      isBack = _useContextSystem.isBack,
      isPlain = _useContextSystem.isPlain,
      params = _useContextSystem.params,
      showArrow = _useContextSystem.showArrow,
      to = _useContextSystem.to,
      otherProps = _objectWithoutProperties(_useContextSystem, ["as", "children", "className", "exact", "href", "isBack", "isPlain", "params", "showArrow", "to"]);

  var history = useHistory();

  var _React$Children$toArr = React.Children.toArray(children),
      _React$Children$toArr2 = _slicedToArray(_React$Children$toArr, 1),
      child = _React$Children$toArr2[0];

  var isWrappingMenuItem = hasNamespace(child, ['MenuItem']);
  var classes = cx(linkStyles.BaseLink, !isPlain && linkStyles.Link, isWrappingMenuItem && styles.menuItemLink, className);

  var handleOnClick = function (event) {
    if (isBack) {
      event.preventDefault();

      if (to) {
        history.push(to, {
          isBack: true
        });
      } else {
        history.goBack();
      }
    }
  };

  var content = /*#__PURE__*/React.createElement(ContextSystemProvider, {
    value: {
      MenuItem: {
        isBack: isBack,
        showArrow: !!to || !!href || showArrow,
        tabIndex: -1
      }
    }
  }, children);

  if (!to) {
    return /*#__PURE__*/React.createElement("a", Object.assign({
      href: href || '#',
      ref: forwardedRef
    }, otherProps, {
      className: classes,
      onClick: handleOnClick
    }), content);
  }

  return /*#__PURE__*/React.createElement(NavLink, Object.assign({}, otherProps, {
    activeClassName: "is-active",
    className: classes,
    exact: exact,
    onClick: handleOnClick,
    ref: forwardedRef,
    to: to
  }), content);
}

export default contextConnect(NavigatorLink, 'NavigatorLink');