import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/esm/taggedTemplateLiteralLoose";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _templateObject3() {
  var data = _taggedTemplateLiteralLoose(["\n\t\t\t*:focus > & {\n\t\t\t\tbox-shadow: ", ";\n\t\t\t}\n\t\t"]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n\t\t\t*:active > & {\n\t\t\t\tbox-shadow: ", ";\n\t\t\t}\n\t\t"]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n\t\t\t*:hover > & {\n\t\t\t\tbox-shadow: ", ";\n\t\t\t}\n\t\t"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

import { useContextSystem } from '@wp-g2/context';
import { css, cx, getBoxShadow, ui } from '@wp-g2/styles';
import { is } from '@wp-g2/utils';
import { useMemo } from 'react';
import * as styles from './Elevation.styles';
/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'div'>} props
 */

export function useElevation(props) {
  var _useContextSystem = useContextSystem(props, 'Elevation'),
      active = _useContextSystem.active,
      _useContextSystem$bor = _useContextSystem.borderRadius,
      borderRadius = _useContextSystem$bor === void 0 ? 'inherit' : _useContextSystem$bor,
      className = _useContextSystem.className,
      focus = _useContextSystem.focus,
      hover = _useContextSystem.hover,
      _useContextSystem$isI = _useContextSystem.isInteractive,
      isInteractive = _useContextSystem$isI === void 0 ? false : _useContextSystem$isI,
      _useContextSystem$off = _useContextSystem.offset,
      offset = _useContextSystem$off === void 0 ? 0 : _useContextSystem$off,
      _useContextSystem$val = _useContextSystem.value,
      value = _useContextSystem$val === void 0 ? 0 : _useContextSystem$val,
      otherProps = _objectWithoutProperties(_useContextSystem, ["active", "borderRadius", "className", "focus", "hover", "isInteractive", "offset", "value"]);

  var classes = useMemo(function () {
    var hoverValue = is.defined(hover) ? hover : value * 2;
    var activeValue = is.defined(active) ? hover : value / 2;

    if (!isInteractive) {
      hoverValue = is.defined(hover) ? hover : undefined;
      activeValue = is.defined(active) ? active : undefined;
    }

    var transition = "box-shadow " + ui.get('transitionDuration') + " " + ui.get('transitionTimingFunction');
    var sx = {};
    sx.Base = css({
      borderRadius: borderRadius,
      bottom: offset,
      boxShadow: getBoxShadow(value),
      opacity: ui.get('elevationIntensity'),
      left: offset,
      right: offset,
      top: offset,
      transition: transition
    });
    sx.hover = css(_templateObject(), getBoxShadow(hoverValue));
    sx.active = css(_templateObject2(), getBoxShadow(activeValue));
    sx.focus = css(_templateObject3(), getBoxShadow(focus));
    return cx(styles.Elevation, sx.Elevation, sx.Base, is.defined(hoverValue) && sx.hover, is.defined(activeValue) && sx.active, is.defined(focus) && sx.focus, className);
  }, [active, borderRadius, className, focus, hover, isInteractive, offset, value]);
  return _objectSpread(_objectSpread({}, otherProps), {}, {
    className: classes
  });
}