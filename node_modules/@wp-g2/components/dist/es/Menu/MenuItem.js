import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { check, chevronLeft, chevronRight } from '@wordpress/icons';
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import { is, noop } from '@wp-g2/utils';
import React, { useCallback, useMemo } from 'react';
import { MenuItem as ReakitMenuItem } from 'reakit';
import { BaseButton } from '../BaseButton';
import { Flex } from '../Flex';
import { Icon } from '../Icon';
import { Text } from '../Text';
import { View } from '../View';
import { useMenuContext } from './Menu.Context';
import * as styles from './Menu.styles';
/**
 *
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').MenuItemProps, 'div'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */

function MenuItem(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'MenuItem'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$clo = _useContextSystem.closeOnClick,
      closeOnClick = _useContextSystem$clo === void 0 ? false : _useContextSystem$clo,
      _useContextSystem$isB = _useContextSystem.isBack,
      isBack = _useContextSystem$isB === void 0 ? false : _useContextSystem$isB,
      _useContextSystem$isO = _useContextSystem.isOffset,
      isOffset = _useContextSystem$isO === void 0 ? false : _useContextSystem$isO,
      isSelected = _useContextSystem.isSelected,
      _useContextSystem$onC = _useContextSystem.onClick,
      onClick = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      prefix = _useContextSystem.prefix,
      _useContextSystem$sho = _useContextSystem.showArrow,
      showArrow = _useContextSystem$sho === void 0 ? false : _useContextSystem$sho,
      size = _useContextSystem.size,
      suffix = _useContextSystem.suffix,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "className", "closeOnClick", "isBack", "isOffset", "isSelected", "onClick", "prefix", "showArrow", "size", "suffix"]);

  var _useMenuContext = useMenuContext(),
      menu = _useMenuContext.menu;

  var shouldShowArrow = !isBack && showArrow;
  var classes = cx(styles.MenuItem, styles[size], shouldShowArrow && styles.showArrow, isBack && styles.showBackArrow, isOffset && styles.offset, className);
  var Component = menu ? ReakitMenuItem : View;
  var prevArrow = useMemo(function () {
    return isBack && /*#__PURE__*/React.createElement(Text, {
      isBlock: true,
      variant: "muted"
    }, /*#__PURE__*/React.createElement(Icon, {
      icon: chevronLeft,
      size: 16
    }));
  }, [isBack]);
  var nextArrow = useMemo(function () {
    return shouldShowArrow && /*#__PURE__*/React.createElement(Text, {
      isBlock: true,
      variant: "muted"
    }, /*#__PURE__*/React.createElement(Icon, {
      icon: chevronRight,
      size: 16
    }));
  }, [shouldShowArrow]);
  var selectedContent = useMemo(function () {
    return is.defined(isSelected) && /*#__PURE__*/React.createElement(Icon, {
      icon: check,
      size: 16,
      style: {
        opacity: isSelected ? 1 : 0
      }
    });
  }, [isSelected]);
  var prefixContent = useMemo(function () {
    return (prevArrow || prefix) && /*#__PURE__*/React.createElement(Flex, null, prevArrow, prefix);
  }, [prefix, prevArrow]);
  var suffixContent = useMemo(function () {
    return (selectedContent || nextArrow || suffix) && /*#__PURE__*/React.createElement(Flex, null, selectedContent, suffix, nextArrow);
  }, [nextArrow, selectedContent, suffix]);
  var handleOnClick = useCallback(function (event) {
    onClick(event);

    if ((menu == null ? void 0 : menu.hide) && closeOnClick) {
      menu.hide();
    }
  }, [closeOnClick, menu, onClick]);
  return /*#__PURE__*/React.createElement(BaseButton, Object.assign({
    as: Component,
    isBlock: true,
    noWrap: false
  }, otherProps, menu, {
    className: classes,
    onClick: handleOnClick,
    prefix: prefixContent,
    ref: forwardedRef,
    size: size,
    suffix: suffixContent,
    textAlign: "left"
  }), children);
}
/**
 * `MenuItem` is an actionable component that renders within a `Menu`.
 *
 * @example
 * ```jsx
 * <Menu>
 *  <MenuItem onClick={...}>Ana</MenuItem>
 *  <MenuItem onClick={...}>Elsa</MenuItem>
 *  <MenuItem onClick={...}>Olaf</MenuItem>
 * </Menu>
 * ```
 *
 * @see https://reakit.io/docs/menu/#menuitem
 */


var ConnectedMenuItem = contextConnect(MenuItem, 'MenuItem');
export default ConnectedMenuItem;