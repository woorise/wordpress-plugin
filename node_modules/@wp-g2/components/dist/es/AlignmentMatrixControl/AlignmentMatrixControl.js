import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { __ } from '@wordpress/i18n';
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { useRTL } from '@wp-g2/styles';
import { useUpdateEffect } from '@wp-g2/utils';
import { noop } from 'lodash';
import React, { useCallback, useState } from 'react';
import { Composite, CompositeGroup, useCompositeState } from 'reakit';
import { AlignmentMatrixControlView, RowView } from './AlignmentMatrixControl.styles';
import { getItemId } from './AlignmentMatrixControl.utils';
import Cell from './AlignmentMatrixControlCell';
import { GRID } from './constants';

function AlignmentMatrixControl(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'AlignmentMatrixControl'),
      _useContextSystem$bas = _useContextSystem.baseId,
      baseId = _useContextSystem$bas === void 0 ? 'alignment-matrix-control' : _useContextSystem$bas,
      defaultValue = _useContextSystem.defaultValue,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      _useContextSystem$lab = _useContextSystem.label,
      label = _useContextSystem$lab === void 0 ? __('Alignment Matrix Control') : _useContextSystem$lab,
      value = _useContextSystem.value,
      otherProps = _objectWithoutProperties(_useContextSystem, ["baseId", "defaultValue", "onChange", "label", "value"]);

  var _useState = useState(value != null ? value : defaultValue),
      _useState2 = _slicedToArray(_useState, 1),
      immutableDefaultValue = _useState2[0];

  var isRTL = useRTL();
  var initialCurrentId = getItemId(baseId, immutableDefaultValue);
  var composite = useCompositeState({
    baseId: baseId,
    currentId: initialCurrentId,
    rtl: isRTL
  });
  var handleOnChange = useCallback(function (nextValue) {
    return function () {
      onChange(nextValue);
      composite.setCurrentId(getItemId(baseId, nextValue));
    };
  }, [baseId, composite, onChange]);
  useUpdateEffect(function () {
    composite.setCurrentId(getItemId(baseId, value));
  }, [value]);
  return /*#__PURE__*/React.createElement(Composite, Object.assign({
    "aria-label": label,
    as: AlignmentMatrixControlView,
    ref: forwardedRef
  }, otherProps, composite, {
    role: "grid"
  }), GRID.map(function (cells, index) {
    return /*#__PURE__*/React.createElement(CompositeGroup, Object.assign({
      as: RowView,
      key: index,
      role: "row"
    }, composite), cells.map(function (cell) {
      var cellId = getItemId(baseId, cell);
      var isActive = composite.currentId === cellId;
      return /*#__PURE__*/React.createElement(Cell, Object.assign({}, composite, {
        id: cellId,
        isActive: isActive,
        key: cell,
        onFocus: handleOnChange(cell),
        value: cell
      }));
    }));
  }));
}

export default contextConnect(AlignmentMatrixControl, 'AlignmentMatrixControl');