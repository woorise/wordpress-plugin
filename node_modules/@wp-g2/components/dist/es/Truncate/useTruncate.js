import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/esm/taggedTemplateLiteralLoose";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n\t\t\t-webkit-box-orient: vertical;\n\t\t\t-webkit-line-clamp: ", ";\n\t\t\tdisplay: -webkit-box;\n\t\t\toverflow: hidden;\n\t\t"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

import { useContextSystem } from '@wp-g2/context';
import { css, cx } from '@wp-g2/styles';
import { useMemo } from 'react';
import * as styles from './Truncate.styles';
import { TRUNCATE_ELLIPSIS, TRUNCATE_TYPE, truncateContent } from './Truncate.utils';
/**
 * @typedef Props
 * @property {string} [ellipsis='...']
 * @property {'auto' | 'head' | 'tail' | 'middle' | 'none'} [ellipsizeMode='auto']
 * @property {number} [limit=0]
 * @property {number} [numberOfLines=0]
 */

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<Props, 'span'>} props
 */

export function useTruncate(props) {
  var _useContextSystem = useContextSystem(props, 'Truncate'),
      className = _useContextSystem.className,
      children = _useContextSystem.children,
      _useContextSystem$ell = _useContextSystem.ellipsis,
      ellipsis = _useContextSystem$ell === void 0 ? TRUNCATE_ELLIPSIS : _useContextSystem$ell,
      _useContextSystem$ell2 = _useContextSystem.ellipsizeMode,
      ellipsizeMode = _useContextSystem$ell2 === void 0 ? TRUNCATE_TYPE.auto : _useContextSystem$ell2,
      _useContextSystem$lim = _useContextSystem.limit,
      limit = _useContextSystem$lim === void 0 ? 0 : _useContextSystem$lim,
      _useContextSystem$num = _useContextSystem.numberOfLines,
      numberOfLines = _useContextSystem$num === void 0 ? 0 : _useContextSystem$num,
      otherProps = _objectWithoutProperties(_useContextSystem, ["className", "children", "ellipsis", "ellipsizeMode", "limit", "numberOfLines"]);

  var truncatedContent = truncateContent(typeof children === 'string' ? children : '', {
    ellipsis: ellipsis,
    ellipsizeMode: ellipsizeMode,
    limit: limit
  });
  var shouldTruncate = ellipsizeMode === TRUNCATE_TYPE.auto && ellipsizeMode !== TRUNCATE_TYPE.none;
  var classes = useMemo(function () {
    var sx = {};
    sx.numberOfLines = css(_templateObject(), numberOfLines);
    return cx(shouldTruncate && !numberOfLines && styles.Truncate, shouldTruncate && !!numberOfLines && sx.numberOfLines, className);
  }, [className, numberOfLines, shouldTruncate]);
  return _objectSpread(_objectSpread({}, otherProps), {}, {
    className: classes,
    children: truncatedContent
  });
}