import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { useContextSystem } from '@wp-g2/context';
import { css, cx, ui, useResponsiveValue } from '@wp-g2/styles';
import { useMemo } from 'react';
import * as styles from './Flex.styles';
/**
 * @typedef FlexProps
 * @property {import('react').CSSProperties['alignItems']} [align='center']
 * @property {import('react').CSSProperties['alignItems']} [alignItems]
 * @property {import('../utils/types').ResponsiveCSSValue<import('react').CSSProperties['flexDirection']>} [direction='row']
 * @property {boolean} [expanded]
 * @property {number | string} [gap]
 * @property {import('react').CSSProperties['justifyContent']} [justify]
 * @property {import('react').CSSProperties['justifyContent']} [justifyContent]
 * @property {boolean} [wrap=false]
 */

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<FlexProps, 'div'>} props
 */

export function useFlex(props) {
  var _useContextSystem = useContextSystem(props, 'Flex'),
      _useContextSystem$ali = _useContextSystem.align,
      align = _useContextSystem$ali === void 0 ? 'center' : _useContextSystem$ali,
      alignItems = _useContextSystem.alignItems,
      className = _useContextSystem.className,
      _useContextSystem$dir = _useContextSystem.direction,
      directionProp = _useContextSystem$dir === void 0 ? 'row' : _useContextSystem$dir,
      _useContextSystem$exp = _useContextSystem.expanded,
      expanded = _useContextSystem$exp === void 0 ? true : _useContextSystem$exp,
      _useContextSystem$gap = _useContextSystem.gap,
      gap = _useContextSystem$gap === void 0 ? 2 : _useContextSystem$gap,
      _useContextSystem$jus = _useContextSystem.justify,
      justify = _useContextSystem$jus === void 0 ? 'space-between' : _useContextSystem$jus,
      justifyContent = _useContextSystem.justifyContent,
      _useContextSystem$wra = _useContextSystem.wrap,
      wrap = _useContextSystem$wra === void 0 ? false : _useContextSystem$wra,
      otherProps = _objectWithoutProperties(_useContextSystem, ["align", "alignItems", "className", "direction", "expanded", "gap", "justify", "justifyContent", "wrap"]);

  var direction = useResponsiveValue(directionProp);
  var isColumn = typeof direction === 'string' && !!direction.includes('column');
  var isReverse = typeof direction === 'string' && direction.includes('reverse');
  var classes = useMemo(function () {
    var _css;

    var sx = {};
    sx.Base = css((_css = {}, _css[ui.createToken('FlexGap')] = ui.space(gap), _css[ui.createToken('FlexItemDisplay')] = isColumn ? 'block' : null, _css[ui.createToken('FlexItemMarginBottom')] = isColumn ? ui.get('FlexGap') : 0, _css[ui.createToken('FlexItemMarginRight')] = !isColumn && !isReverse ? ui.get('FlexGap') : 0, _css[ui.createToken('FlexItemMarginLeft')] = !isColumn && isReverse ? ui.get('FlexGap') : 0, _css.alignItems = alignItems || isColumn ? 'normal' : align, _css.flexDirection = direction, _css.flexWrap = wrap ? 'wrap' : undefined, _css.justifyContent = justifyContent || justify, _css.height = isColumn && expanded ? '100%' : undefined, _css.width = !isColumn && expanded ? '100%' : undefined, _css.marginBottom = wrap ? "calc(" + ui.space(gap) + " * -1)" : null, _css));
    sx.Items = css({
      /**
       * Workaround to optimize DOM rendering.
       * We'll enhance alignment with naive parent flex assumptions.
       *
       * Trade-off:
       * Far less DOM less. However, UI rendering is not as reliable.
       */
      '> * + *:not(marquee)': {
        marginTop: isColumn ? ui.space(gap) : undefined,
        marginRight: !isColumn && isReverse ? ui.space(gap) : undefined,
        marginLeft: !isColumn && !isReverse ? ui.space(gap) : undefined
      }
    });
    sx.WrapItems = css({
      '> *:not(marquee)': {
        marginBottom: ui.space(gap),
        marginLeft: !isColumn && isReverse ? ui.space(gap) : undefined,
        marginRight: !isColumn && !isReverse ? ui.space(gap) : undefined
      },
      '> *:last-child:not(marquee)': {
        marginLeft: !isColumn && isReverse ? 0 : undefined,
        marginRight: !isColumn && !isReverse ? 0 : undefined
      }
    });
    return cx(styles.Flex, sx.Base, wrap ? sx.WrapItems : sx.Items, isColumn ? styles.ItemsColumn : styles.ItemsRow, className);
  }, [align, alignItems, className, direction, expanded, gap, isColumn, isReverse, justify, justifyContent, wrap]);
  return _objectSpread(_objectSpread({}, otherProps), {}, {
    className: classes
  });
}