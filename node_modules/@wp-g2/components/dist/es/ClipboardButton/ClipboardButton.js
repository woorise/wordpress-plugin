import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { useClipboard } from '@wp-g2/utils';
import { noop } from 'lodash';
import React, { useCallback, useEffect, useRef } from 'react';
import { Button } from '../Button';

function ClipboardButton(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'ClipboardButton'),
      text = _useContextSystem.text,
      _useContextSystem$onC = _useContextSystem.onClick,
      onClick = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      _useContextSystem$onC2 = _useContextSystem.onCopy,
      onCopyProp = _useContextSystem$onC2 === void 0 ? noop : _useContextSystem$onC2,
      _useContextSystem$onF = _useContextSystem.onFinishCopy,
      onFinishCopy = _useContextSystem$onF === void 0 ? noop : _useContextSystem$onF,
      otherProps = _objectWithoutProperties(_useContextSystem, ["text", "onClick", "onCopy", "onFinishCopy"]);

  var _useClipboard = useClipboard(text),
      hasCopied = _useClipboard.hasCopied,
      onCopy = _useClipboard.onCopy;

  var lastHasCopied = useRef(hasCopied);
  useEffect(function () {
    if (lastHasCopied.current === hasCopied) {
      return;
    }

    if (hasCopied) {
      onCopyProp();
    } else {
      onFinishCopy();
    }

    lastHasCopied.current = hasCopied;
  }, [hasCopied, onCopyProp, onFinishCopy]);
  var handleOnClick = useCallback(function (event) {
    onClick(event);
    onCopy();
  }, [onClick, onCopy]);
  return /*#__PURE__*/React.createElement(Button, Object.assign({}, otherProps, {
    onClick: handleOnClick,
    ref: forwardedRef
  }));
}

export default contextConnect(ClipboardButton, 'ClipboardButton');