import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { __ } from '@wordpress/i18n';
import { search } from '@wordpress/icons';
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx, ui } from '@wp-g2/styles';
import { mergeRefs, noop, useControlledValue } from '@wp-g2/utils';
import React, { useCallback, useRef } from 'react';
import { Icon } from '../Icon';
import { Spinner } from '../Spinner';
import { Text } from '../Text';
import { TextInput } from '../TextInput';
import { View } from '../View';
import * as styles from './SearchInput.styles';
import ClearButton from './SearchInputClearButton';

function SearchInput(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'SearchInput'),
      className = _useContextSystem.className,
      _useContextSystem$def = _useContextSystem.defaultValue,
      defaultValue = _useContextSystem$def === void 0 ? '' : _useContextSystem$def,
      _useContextSystem$isL = _useContextSystem.isLoading,
      isLoading = _useContextSystem$isL === void 0 ? false : _useContextSystem$isL,
      _useContextSystem$pla = _useContextSystem.placeholder,
      placeholder = _useContextSystem$pla === void 0 ? __('Search...') : _useContextSystem$pla,
      prefix = _useContextSystem.prefix,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChangeProp = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      _useContextSystem$onC2 = _useContextSystem.onClear,
      onClear = _useContextSystem$onC2 === void 0 ? noop : _useContextSystem$onC2,
      suffix = _useContextSystem.suffix,
      valueProp = _useContextSystem.value,
      otherProps = _objectWithoutProperties(_useContextSystem, ["className", "defaultValue", "isLoading", "placeholder", "prefix", "onChange", "onClear", "suffix", "value"]);

  var _useControlledValue = useControlledValue({
    value: valueProp,
    onChange: onChangeProp,
    defaultValue: defaultValue
  }),
      _useControlledValue2 = _slicedToArray(_useControlledValue, 2),
      value = _useControlledValue2[0],
      onChange = _useControlledValue2[1];

  var textInputRef = useRef();
  var handleOnChange = useCallback(function (next, changeProps) {
    onChange(next, changeProps);
  }, [onChange]);
  var handleOnClearClick = useCallback(function (event) {
    onChange('', {
      event: event
    });
    onClear(event);

    if (textInputRef.current) {
      textInputRef.current.focus();
    }
  }, [onChange, onClear]);
  var classes = cx(styles.SearchInput, className);
  return /*#__PURE__*/React.createElement(TextInput, Object.assign({
    className: classes,
    isCommitOnBlurOrEnter: false,
    onChange: handleOnChange,
    placeholder: placeholder,
    prefix: /*#__PURE__*/React.createElement(SearchPrefix, {
      isLoading: isLoading,
      prefix: prefix
    }),
    ref: mergeRefs([forwardedRef, textInputRef]),
    suffix: /*#__PURE__*/React.createElement(SearchSuffix, {
      onClick: handleOnClearClick,
      suffix: suffix,
      value: !!value
    }),
    type: "search",
    value: value
  }, otherProps));
}

var SearchSuffix = /*#__PURE__*/React.memo(function (_ref) {
  var onClick = _ref.onClick,
      suffix = _ref.suffix,
      value = _ref.value;
  return /*#__PURE__*/React.createElement(React.Fragment, null, suffix, /*#__PURE__*/React.createElement(ClearButton, {
    onClick: onClick,
    value: value ? true : undefined
  }));
});
var SearchPrefix = /*#__PURE__*/React.memo(function (_ref2) {
  var _ref2$isLoading = _ref2.isLoading,
      isLoading = _ref2$isLoading === void 0 ? false : _ref2$isLoading,
      prefix = _ref2.prefix;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(View, {
    css: [ui.alignment.content.center, ui.opacity(0.5), ui.margin.right(-1)]
  }, isLoading ? /*#__PURE__*/React.createElement(Spinner, {
    size: 16
  }) : /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(Icon, {
    icon: search,
    size: 16
  }))), prefix);
});
export default contextConnect(SearchInput, 'SearchInput');