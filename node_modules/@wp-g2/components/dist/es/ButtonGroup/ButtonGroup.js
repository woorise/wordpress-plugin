import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { __ } from '@wordpress/i18n';
import { contextConnect, ContextSystemProvider, useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import { noop, useUpdateEffect } from '@wp-g2/utils';
import React from 'react';
import { RadioGroup, useRadioState } from 'reakit';
import { ControlGroup } from '../ControlGroup';
import { ButtonGroupContext } from './ButtonGroup.Context';
import { ButtonGroupView } from './ButtonGroup.styles';
import * as styles from './ButtonGroup.styles';
/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'div'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */

function ButtonGroup(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'ButtonGroup'),
      baseId = _useContextSystem.baseId,
      className = _useContextSystem.className,
      children = _useContextSystem.children,
      _useContextSystem$ena = _useContextSystem.enableSelectNone,
      enableSelectNone = _useContextSystem$ena === void 0 ? false : _useContextSystem$ena,
      _useContextSystem$exp = _useContextSystem.expanded,
      expanded = _useContextSystem$exp === void 0 ? false : _useContextSystem$exp,
      _useContextSystem$seg = _useContextSystem.segmented,
      segmented = _useContextSystem$seg === void 0 ? false : _useContextSystem$seg,
      id = _useContextSystem.id,
      _useContextSystem$lab = _useContextSystem.label,
      label = _useContextSystem$lab === void 0 ? __('ButtonGroup') : _useContextSystem$lab,
      value = _useContextSystem.value,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      otherProps = _objectWithoutProperties(_useContextSystem, ["baseId", "className", "children", "enableSelectNone", "expanded", "segmented", "id", "label", "value", "onChange"]);

  var radio = useRadioState({
    baseId: baseId || id,
    state: value
  });
  useUpdateEffect(function () {
    onChange(radio.state);
  }, [radio.state]);
  useUpdateEffect(function () {
    radio.setState(value);
  }, [value]);
  var contextProps = React.useMemo(function () {
    return {
      buttonGroup: radio,
      enableSelectNone: enableSelectNone
    };
  }, [enableSelectNone, radio]);
  var contextSystemProps = React.useMemo(function () {
    return {
      Button: {
        isBlock: expanded,
        isSubtle: !segmented,
        isControl: true
      },
      ControlGroup: {
        isItemBlock: expanded
      }
    };
  }, [expanded, segmented]);
  var classes = cx(segmented && styles.segmented, expanded && styles.expanded, className);
  var BaseComponent = segmented ? ControlGroup : ButtonGroupView;
  return /*#__PURE__*/React.createElement(ButtonGroupContext.Provider, {
    value: contextProps
  }, /*#__PURE__*/React.createElement(ContextSystemProvider, {
    value: contextSystemProps
  }, /*#__PURE__*/React.createElement(RadioGroup, Object.assign({
    "aria-label": label,
    as: BaseComponent
  }, otherProps, {
    className: classes,
    ref: forwardedRef
  }), children)));
}
/**
 * `ButtonGroup` is a form component contains and coordinates the checked state of multiple `Button` components.
 *
 * @example
 * ```jsx
 * import { ButtonGroup, Button } from `@wp-g2/components`;
 *
 * function Example() {
 *  return (
 *    <ButtonGroup value="ana">
 *      <Button value="ana">Ana</Button>
 *      <Button value="elsa">Elsa</Button>
 *      <Button value="kristoff">Kristoff</Button>
 *      <Button value="olaf">Olaf</Button>
 *    </ButtonGroup>
 *  );
 * }
 * ```
 */


var ConnectedButtonGroup = contextConnect(ButtonGroup, 'ButtonGroup');
export default ConnectedButtonGroup;