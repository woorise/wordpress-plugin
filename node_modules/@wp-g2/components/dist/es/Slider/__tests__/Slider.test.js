import { fireEvent, render, screen } from '@testing-library/react';
import React from 'react';
import { Slider } from '../index';
describe('props', function () {
  test('should render correctly', function () {
    var _render = render( /*#__PURE__*/React.createElement(Slider, {
      id: "slider"
    })),
        container = _render.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render min', function () {
    var _render2 = render( /*#__PURE__*/React.createElement(Slider, {
      id: "slider",
      min: "5"
    })),
        container = _render2.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render max', function () {
    var _render3 = render( /*#__PURE__*/React.createElement(Slider, {
      id: "slider",
      max: "50"
    })),
        container = _render3.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render size', function () {
    var _render4 = render( /*#__PURE__*/React.createElement(Slider, {
      id: "slider",
      size: "small"
    })),
        container = _render4.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render value', function () {
    var _render5 = render( /*#__PURE__*/React.createElement(Slider, {
      id: "slider",
      value: "40"
    })),
        container = _render5.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render unit value', function () {
    var _render6 = render( /*#__PURE__*/React.createElement(Slider, {
      id: "slider",
      value: "40px"
    })),
        container = _render6.container;

    var input = container.querySelector('input');
    expect(container.firstChild).toMatchSnapshot();
    expect(input.value).toEqual('40');
  });
  test('should include unit in onChange callback (if value contains unit)', function () {
    var value = '40px';
    render( /*#__PURE__*/React.createElement(Slider, {
      "data-testid": "slider",
      id: "slider",
      onChange: function setValue(next) {
        return value = next;
      },
      value: value
    }));
    var input = screen.getByTestId('slider');
    fireEvent.change(input, {
      target: {
        value: 13
      }
    }); // onChange callback value

    expect(value).toBe('13px');
  });
  test('should change unit in onChange callback, if incoming value unit changes', function () {
    var value = '40px';

    var setValue = function (next) {
      return value = next;
    };

    var _render7 = render( /*#__PURE__*/React.createElement(Slider, {
      "data-testid": "slider",
      id: "slider",
      onChange: setValue,
      value: value
    })),
        rerender = _render7.rerender;

    var input = screen.getByTestId('slider');
    expect(input.value).toBe('40');
    rerender( /*#__PURE__*/React.createElement(Slider, {
      "data-testid": "slider",
      id: "slider",
      onChange: setValue,
      value: "100%"
    }));
    expect(input.value).toBe('100');
    fireEvent.change(input, {
      target: {
        value: 13
      }
    }); // onChange callback value

    expect(value).toBe('13%');
  });
});