import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { contextConnect, useContextSystem } from '@wp-g2/context';
import { ui } from '@wp-g2/styles';
import { renderChildren } from '@wp-g2/utils';
import React from 'react';
import { MenuItem } from '../Menu';

function SelectDropdownItem(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'SelectDropdownItem'),
      className = _useContextSystem.className,
      index = _useContextSystem.index,
      isHighlighted = _useContextSystem.isHighlighted,
      isSelected = _useContextSystem.isSelected,
      label = _useContextSystem.label,
      name = _useContextSystem.name,
      renderItem = _useContextSystem.renderItem,
      otherProps = _objectWithoutProperties(_useContextSystem, ["className", "index", "isHighlighted", "isSelected", "label", "name", "renderItem"]);

  var itemProps = _objectSpread({
    index: index,
    isHighlighted: isHighlighted,
    isSelected: isSelected,
    label: label,
    name: name
  }, otherProps);

  var content = renderChildren(renderItem || label || name, itemProps);
  return /*#__PURE__*/React.createElement(MenuItem, Object.assign({}, ui.$('SelectDropdownItem'), otherProps, {
    className: className,
    isSelected: isSelected,
    ref: forwardedRef
  }), content);
}

export default contextConnect(SelectDropdownItem, 'SelectDropdownItem');