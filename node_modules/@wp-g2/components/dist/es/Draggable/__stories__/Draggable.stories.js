import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useListState } from '@wp-g2/protokit';
import { ui } from '@wp-g2/styles';
import faker from 'faker';
import { Schema } from 'faker-schema';
import React from 'react';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { Animated, AnimatedContainer, Card, CardBody, Heading, HStack, Image, Spacer, Text, View, VStack } from '../../index';
export default {
  title: 'Components/Draggable'
};
var ItemTypes = {
  DONE: 'DONE',
  TODO: 'TODO'
};

function DraggableProvider(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/React.createElement(DndProvider, {
    backend: HTML5Backend
  }, children);
}

function DropZone(_ref2) {
  var _ref2$accept = _ref2.accept,
      accept = _ref2$accept === void 0 ? ItemTypes.DONE : _ref2$accept,
      _ref2$dropName = _ref2.dropName,
      dropName = _ref2$dropName === void 0 ? 'Todos' : _ref2$dropName;

  var _useDrop = useDrop({
    accept: accept,
    collect: function collect(monitor) {
      return {
        canDrop: monitor.canDrop(),
        isOver: monitor.isOver()
      };
    },
    drop: function () {
      return {
        name: dropName
      };
    }
  }),
      _useDrop2 = _slicedToArray(_useDrop, 2),
      _useDrop2$ = _useDrop2[0],
      canDrop = _useDrop2$.canDrop,
      isOver = _useDrop2$.isOver,
      drop = _useDrop2[1];

  var isActive = canDrop && isOver;
  return /*#__PURE__*/React.createElement(View, {
    css: [ui.position.full, ui.alignment.content.center, ui.background.blue, isActive && ui.background.green, ui.animation.ease, ui.padding(5), isActive ? ui.background.green : ui.background.yellow, ui.borderRadius.round, {
      opacity: canDrop ? 1 : 0
    }, {
      pointerEvents: canDrop ? 'default' : 'none'
    }, {
      zIndex: 10
    }],
    ref: drop
  }, /*#__PURE__*/React.createElement(Heading, null, isActive ? 'Drop Here' : 'Drag Here'));
}

function Draggable(_ref3) {
  var children = _ref3.children,
      onEnd = _ref3.onEnd,
      _ref3$type = _ref3.type,
      type = _ref3$type === void 0 ? ItemTypes.TODO : _ref3$type;

  var _useDrag = useDrag({
    collect: function collect(monitor) {
      return {
        isDragging: monitor.isDragging()
      };
    },
    end: function end(item, monitor) {
      onEnd && onEnd(item, monitor);
    },
    item: {
      type: type
    }
  }),
      _useDrag2 = _slicedToArray(_useDrag, 2),
      isDragging = _useDrag2[0].isDragging,
      drag = _useDrag2[1];

  return /*#__PURE__*/React.createElement(View, {
    ref: drag
  }, children);
}

var itemSchema = new Schema(function () {
  return {
    avatar: faker.image.avatar(),
    description: faker.lorem.sentence(),
    id: faker.random.uuid(),
    title: faker.name.firstName()
  };
});

function Avatar(_ref4) {
  var src = _ref4.src;
  return /*#__PURE__*/React.createElement(View, {
    css: {
      height: 32,
      width: 32
    }
  }, /*#__PURE__*/React.createElement(Image, {
    css: ui.borderRadius.circle,
    src: src
  }));
}

function ItemCard(_ref5) {
  var avatar = _ref5.avatar,
      description = _ref5.description,
      id = _ref5.id,
      title = _ref5.title;
  return /*#__PURE__*/React.createElement(Animated, {
    auto: true,
    css: {
      margin: -4,
      marginBottom: 4,
      padding: 4
    },
    key: id
  }, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardBody, null, /*#__PURE__*/React.createElement(HStack, null, /*#__PURE__*/React.createElement(Avatar, {
    src: avatar
  }), /*#__PURE__*/React.createElement(Spacer, null, /*#__PURE__*/React.createElement(VStack, {
    spacing: 1
  }, /*#__PURE__*/React.createElement(Text, {
    weight: "bold"
  }, title), /*#__PURE__*/React.createElement(Text, {
    numberOfLines: 2,
    truncate: true,
    variant: "muted"
  }, description)))))));
}

function Example() {
  var _useListState = useListState(itemSchema.make(7)),
      _useListState2 = _slicedToArray(_useListState, 2),
      todos = _useListState2[0],
      todosData = _useListState2[1];

  var _useListState3 = useListState(itemSchema.make(2)),
      _useListState4 = _slicedToArray(_useListState3, 2),
      dones = _useListState4[0],
      donesData = _useListState4[1];

  return /*#__PURE__*/React.createElement(HStack, {
    alignment: "center"
  }, /*#__PURE__*/React.createElement(Spacer, {
    css: {
      maxWidth: 800
    }
  }, /*#__PURE__*/React.createElement(DraggableProvider, null, /*#__PURE__*/React.createElement(HStack, {
    direction: ['column', 'row']
  }, /*#__PURE__*/React.createElement(VStack, {
    css: [{
      width: [null, 240]
    }, ui.position.relative]
  }, /*#__PURE__*/React.createElement(Heading, null, "Pending"), /*#__PURE__*/React.createElement(DropZone, {
    accept: ItemTypes.DONE,
    dropName: "Todos"
  }), /*#__PURE__*/React.createElement(AnimatedContainer, null, todos.map(function (todo) {
    return /*#__PURE__*/React.createElement(Draggable, {
      key: todo.id,
      onEnd: function onEnd(item, monitor) {
        var dropResult = monitor.getDropResult();

        if ((dropResult == null ? void 0 : dropResult.name) === 'Dones') {
          donesData.prepend(todo);
          todosData.remove({
            id: todo.id
          });
        }
      },
      type: ItemTypes.TODO
    }, /*#__PURE__*/React.createElement(ItemCard, todo));
  }))), /*#__PURE__*/React.createElement(Spacer, null, /*#__PURE__*/React.createElement(VStack, {
    css: [ui.position.relative]
  }, /*#__PURE__*/React.createElement(Heading, null, "Added"), /*#__PURE__*/React.createElement(DropZone, {
    accept: ItemTypes.TODO,
    dropName: "Dones"
  }), /*#__PURE__*/React.createElement(AnimatedContainer, null, dones.map(function (todo) {
    return /*#__PURE__*/React.createElement(Draggable, {
      key: todo.id,
      onEnd: function onEnd(item, monitor) {
        var dropResult = monitor.getDropResult();

        if ((dropResult == null ? void 0 : dropResult.name) === 'Todos') {
          todosData.prepend(todo);
          donesData.remove({
            id: todo.id
          });
        }
      },
      type: ItemTypes.DONE
    }, /*#__PURE__*/React.createElement(ItemCard, todo));
  }))))))));
}

export var _default = function () {
  return /*#__PURE__*/React.createElement(Example, null);
};