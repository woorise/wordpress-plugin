import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { check } from '@wordpress/icons';
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { css, cx, ui } from '@wp-g2/styles';
import { is, noop, useControlledState } from '@wp-g2/utils';
import React, { useCallback } from 'react';
import { Checkbox as ReakitCheckbox } from 'reakit';
import { useCheckboxGroupContext } from '../CheckboxGroup';
import { useFormGroupContextId } from '../FormGroup';
import { Icon } from '../Icon';
import { CheckboxIconView, CheckboxWrapperView } from './Checkbox.styles';
import * as styles from './Checkbox.styles';

function CheckboxElement(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'CheckboxElement'),
      checkedProp = _useContextSystem.checked,
      className = _useContextSystem.className,
      cssProp = _useContextSystem.css,
      defaultValue = _useContextSystem.defaultValue,
      idProp = _useContextSystem.id,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      otherProps = _objectWithoutProperties(_useContextSystem, ["checked", "className", "css", "defaultValue", "id", "onChange"]);

  var _useCheckboxGroupCont = useCheckboxGroupContext(),
      checkbox = _useCheckboxGroupCont.checkbox;

  var id = useFormGroupContextId(idProp);

  var _useControlledState = useControlledState(checkedProp, {
    initial: defaultValue || false
  }),
      _useControlledState2 = _slicedToArray(_useControlledState, 2),
      checked = _useControlledState2[0],
      setChecked = _useControlledState2[1];

  var classes = cx(styles.Checkbox, [css(cssProp), className]);
  var handleOnChange = useCallback(function (event) {
    var next = event.target.checked;

    if (is.empty(checkbox)) {
      setChecked(next);
    }

    onChange(next, {
      event: event
    });
  }, [checkbox, onChange, setChecked]);
  var checkedState = is.empty(checkbox) ? checked : undefined;
  return /*#__PURE__*/React.createElement(CheckboxWrapperView, ui.$('CheckboxWrapper'), /*#__PURE__*/React.createElement(ReakitCheckbox, Object.assign({
    checked: checkedState
  }, otherProps, checkbox, {
    className: classes,
    id: id,
    onChange: handleOnChange,
    ref: forwardedRef
  })), /*#__PURE__*/React.createElement(CheckboxIconView, Object.assign({}, ui.$('CheckboxIcon'), {
    "aria-hidden": true
  }), /*#__PURE__*/React.createElement(Icon, {
    icon: check,
    size: 12
  })));
}

export default contextConnect(CheckboxElement, 'CheckboxElement');