import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { contextConnect, ContextSystemProvider, hasNamespace, useContextSystem } from '@wp-g2/context';
import { useResponsiveValue } from '@wp-g2/styles';
import { getValidChildren } from '@wp-g2/utils';
import React, { Fragment } from 'react';
import { Divider } from '../Divider';
import { View } from '../View';
import { useVStack } from '../VStack';
import ListGroupContent from './ListGroupContent';
/**
 * Shallowly adjusts child MenuItem components.
 */

var listGroupContextProps = {
  MenuItem: {
    isOffset: true
  }
};
/**
 * Shallowly adjusts child Grid components.
 */

var listGroupGridContextProps = {
  Grid: {
    gap: 3,
    rowGap: 2
  }
};

function ListGroup(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'ListGroup'),
      children = _useContextSystem.children,
      _useContextSystem$sep = _useContextSystem.separator,
      separator = _useContextSystem$sep === void 0 ? false : _useContextSystem$sep,
      _useContextSystem$spa = _useContextSystem.spacing,
      spacing = _useContextSystem$spa === void 0 ? 2 : _useContextSystem$spa,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "separator", "spacing"]);

  var vStackProps = useVStack(_objectSpread({
    spacing: spacing
  }, otherProps));
  var validChildren = getValidChildren(children);
  var separatorValue = useResponsiveValue(separator);
  var headerComponent;
  var footerComponent;
  /**
   * We're scanning for potential ListGroupHeader and ListGroupFooter components.
   * If found, they'll be hoisted (once) and removed from the children list.
   * The Header and Footer components will be rendered in a different "slot"
   * within ListGroup.
   */

  var filteredChildren = validChildren.filter(function (child) {
    var isGroupHeader = hasNamespace(child, ['ListGroupHeader']);

    if (isGroupHeader && !headerComponent) {
      // Hoist the ListGroupHeader
      headerComponent = child;
      return false;
    }

    var isGroupFooter = hasNamespace(child, ['ListGroupFooter']);

    if (isGroupFooter && !footerComponent) {
      // Hoist the ListGroupFooter
      footerComponent = child;
      return false;
    }

    return true;
  });
  var clonedChildren = filteredChildren.map(function (child, index) {
    var isLast = index + 1 === filteredChildren.length;
    var isGrid = hasNamespace(child, ['Grid']);

    var _key = child.key || index;

    var content = child;

    if (isGrid) {
      content = /*#__PURE__*/React.createElement(ContextSystemProvider, {
        value: listGroupGridContextProps
      }, child);
    }

    return /*#__PURE__*/React.createElement(Fragment, {
      key: _key
    }, content, separatorValue && !isLast && /*#__PURE__*/React.createElement(Divider, null));
  });
  return /*#__PURE__*/React.createElement(View, Object.assign({}, vStackProps, {
    ref: forwardedRef
  }), headerComponent, /*#__PURE__*/React.createElement(ListGroupContent, Object.assign({
    spacing: separatorValue ? 0 : 2
  }, {
    spacing: spacing
  }), /*#__PURE__*/React.createElement(ContextSystemProvider, {
    value: listGroupContextProps
  }, clonedChildren)), footerComponent);
}

export default contextConnect(ListGroup, 'ListGroup');