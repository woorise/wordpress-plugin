import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, ContextSystemProvider, useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import React from 'react';
import { FlexItem } from '../Flex';
import { HStack } from '../HStack';
import { Subheading } from '../Subheading';
import { useListGroupContext } from './ListGroup.Context';
import * as styles from './ListGroup.styles';
var listGroupTextContextProps = {
  Text: {
    size: 'subheading'
  }
};

function ListGroupHeader(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'ListGroupHeader'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "className"]);

  var _useListGroupContext = useListGroupContext(),
      inset = _useListGroupContext.inset;

  var validChildren = React.Children.toArray(children);
  var clonedChildren = validChildren.map(function (child, index) {
    var _key = child.key || index;

    return typeof child === 'string' ? /*#__PURE__*/React.createElement(FlexItem, {
      isBlock: true,
      key: _key
    }, /*#__PURE__*/React.createElement(Subheading, null, child)) : child;
  });
  var classes = cx(inset && styles.headerFooterInset, className);
  return /*#__PURE__*/React.createElement(HStack, Object.assign({}, otherProps, {
    className: classes,
    ref: forwardedRef
  }), /*#__PURE__*/React.createElement(ContextSystemProvider, {
    value: listGroupTextContextProps
  }, clonedChildren));
}

export default contextConnect(ListGroupHeader, 'ListGroupHeader');