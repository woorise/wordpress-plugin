import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { check } from '@wordpress/icons';
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx, ui } from '@wp-g2/styles';
import { colorize, getOptimalTextColor } from '@wp-g2/utils';
import React from 'react';
import { Icon } from '../Icon';
import * as styles from './ColorCircle.styles';
var CheckboxIconView = styles.CheckboxIconView,
    ColorCircleView = styles.ColorCircleView;

function ColorCircle(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'ColorCircle'),
      colorProp = _useContextSystem.color,
      _useContextSystem$siz = _useContextSystem.size,
      size = _useContextSystem$siz === void 0 ? 'medium' : _useContextSystem$siz,
      _useContextSystem$isA = _useContextSystem.isActive,
      isActive = _useContextSystem$isA === void 0 ? false : _useContextSystem$isA,
      _useContextSystem$isI = _useContextSystem.isInteractive,
      isInteractive = _useContextSystem$isI === void 0 ? false : _useContextSystem$isI,
      _useContextSystem$var = _useContextSystem.variant,
      variant = _useContextSystem$var === void 0 ? 'default' : _useContextSystem$var,
      _useContextSystem$sty = _useContextSystem.style,
      style = _useContextSystem$sty === void 0 ? {} : _useContextSystem$sty,
      className = _useContextSystem.className,
      otherProps = _objectWithoutProperties(_useContextSystem, ["color", "size", "isActive", "isInteractive", "variant", "style", "className"]);

  var backgroundColor = colorize(colorProp).toRgbString();
  var classes = cx(styles[size], styles[variant], styles.expand, isActive && styles.active, isInteractive && styles.interactive, className);
  var iconColor = getOptimalTextColor(backgroundColor);
  return /*#__PURE__*/React.createElement(ColorCircleView, Object.assign({
    "data-active": isActive,
    style: _objectSpread(_objectSpread({}, style), {}, {
      backgroundColor: backgroundColor
    })
  }, otherProps, {
    className: classes,
    ref: forwardedRef
  }), /*#__PURE__*/React.createElement(CheckboxIconView, Object.assign({}, ui.$('CheckboxIcon'), {
    "aria-hidden": true
  }), /*#__PURE__*/React.createElement(Icon, {
    fill: iconColor,
    icon: check,
    size: 12
  })));
}

export default contextConnect(ColorCircle, 'ColorCircle');