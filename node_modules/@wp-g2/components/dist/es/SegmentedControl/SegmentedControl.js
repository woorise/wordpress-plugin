import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { __ } from '@wordpress/i18n';
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import { mergeRefs, noop, useResizeAware, useUpdateEffect } from '@wp-g2/utils';
import React, { useRef } from 'react';
import { RadioGroup, useRadioState } from 'reakit';
import { View } from '../View';
import * as styles from './SegmentedControl.styles';
import Backdrop from './SegmentedControlBackdrop';
import Button from './SegmentedControlButton';

function SegmentControl(props, forwardedRef) {
  var _options$;

  var _useContextSystem = useContextSystem(props, 'SegmentedControl'),
      className = _useContextSystem.className,
      baseId = _useContextSystem.baseId,
      _useContextSystem$isA = _useContextSystem.isAdaptiveWidth,
      isAdaptiveWidth = _useContextSystem$isA === void 0 ? false : _useContextSystem$isA,
      _useContextSystem$isB = _useContextSystem.isBlock,
      isBlock = _useContextSystem$isB === void 0 ? false : _useContextSystem$isB,
      id = _useContextSystem.id,
      _useContextSystem$lab = _useContextSystem.label,
      label = _useContextSystem$lab === void 0 ? __('SegmentControl') : _useContextSystem$lab,
      _useContextSystem$opt = _useContextSystem.options,
      options = _useContextSystem$opt === void 0 ? [] : _useContextSystem$opt,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      _useContextSystem$siz = _useContextSystem.size,
      size = _useContextSystem$siz === void 0 ? 'medium' : _useContextSystem$siz,
      value = _useContextSystem.value,
      otherProps = _objectWithoutProperties(_useContextSystem, ["className", "baseId", "isAdaptiveWidth", "isBlock", "id", "label", "options", "onChange", "size", "value"]);

  var containerRef = useRef();

  var _useResizeAware = useResizeAware(),
      _useResizeAware2 = _slicedToArray(_useResizeAware, 2),
      resizeListener = _useResizeAware2[0],
      sizes = _useResizeAware2[1];

  var radio = useRadioState({
    baseId: baseId || id,
    unstable_virtual: true,
    state: value || ((_options$ = options[0]) == null ? void 0 : _options$.value)
  }); // Propagate radio.state change

  useUpdateEffect(function () {
    onChange(radio.state);
  }, [radio.state]); // Sync incoming value with radio.state

  useUpdateEffect(function () {
    if (value !== radio.state) {
      radio.setState(value);
    }
  }, [value]);
  var classes = cx(styles.SegmentedControl, isBlock && styles.block, styles[size], className);
  return /*#__PURE__*/React.createElement(RadioGroup, Object.assign({}, radio, {
    "aria-label": label,
    as: View,
    className: classes
  }, otherProps, {
    ref: mergeRefs([containerRef, forwardedRef])
  }), resizeListener, /*#__PURE__*/React.createElement(Backdrop, Object.assign({}, radio, {
    containerRef: containerRef,
    containerWidth: sizes.width
  })), options.map(function (option, index) {
    var showSeparator = getShowSeparator(radio, index);
    return /*#__PURE__*/React.createElement(Button, Object.assign({}, radio, option, {
      isBlock: !isAdaptiveWidth,
      key: option.value || index,
      showSeparator: showSeparator
    }));
  }));
}

function getShowSeparator(radio, index) {
  var _items$index, _items;

  var currentId = radio.currentId,
      items = radio.items;
  var isLast = index === items.length - 1;
  var isActive = ((_items$index = items[index]) == null ? void 0 : _items$index.id) === currentId;
  var isNextActive = ((_items = items[index + 1]) == null ? void 0 : _items.id) === currentId;
  var showSeparator = true;

  if (items.length < 3) {
    showSeparator = false;
  }

  if (isActive || isNextActive || isLast) {
    showSeparator = false;
  }

  return showSeparator;
}

export default contextConnect(SegmentControl, 'SegmentControl');