import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { ui } from '@wp-g2/styles';
import React, { useEffect, useState } from 'react';
import * as styles from './SegmentedControl.styles';
var BackdropView = styles.BackdropView;

function SegmentedControlBackdrop(_ref) {
  var containerRef = _ref.containerRef,
      containerWidth = _ref.containerWidth,
      state = _ref.state;

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      left = _useState2[0],
      setLeft = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      width = _useState4[0],
      setWidth = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      canAnimate = _useState6[0],
      setCanAnimate = _useState6[1];

  useEffect(function () {
    var containerNode = containerRef == null ? void 0 : containerRef.current;
    if (!containerNode) return;
    /**
     * Workaround for Reakit
     */

    var targetNode = containerNode.querySelector("[data-value=\"" + state + "\"]");
    if (!targetNode) return;

    var _containerNode$getBou = containerNode.getBoundingClientRect(),
        parentX = _containerNode$getBou.x;

    var _targetNode$getBoundi = targetNode.getBoundingClientRect(),
        offsetWidth = _targetNode$getBoundi.width,
        x = _targetNode$getBoundi.x;

    setLeft(x - parentX - 1);
    setWidth(offsetWidth);

    if (!canAnimate) {
      requestAnimationFrame(function () {
        setCanAnimate(true);
      });
    }
  }, [canAnimate, containerRef, containerWidth, state]);
  return /*#__PURE__*/React.createElement(BackdropView, Object.assign({
    role: "presentation"
  }, ui.$('SegmentedControlBackdrop'), {
    style: {
      transform: "translateX(" + left + "px)",
      transition: canAnimate ? null : 'none',
      width: width
    }
  }));
}

export default /*#__PURE__*/React.memo(SegmentedControlBackdrop);