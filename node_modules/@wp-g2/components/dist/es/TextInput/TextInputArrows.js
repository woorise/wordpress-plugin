import { chevronDown, chevronUp } from '@wordpress/icons';
import { ui } from '@wp-g2/styles';
import { clamp, noop } from 'lodash';
import React, { useCallback, useEffect, useRef } from 'react';
import { Icon } from '../Icon';
import { View } from '../View';
import { VStack } from '../VStack';
import * as styles from './TextInput.styles';
/**
 * @typedef Props
 * @property {import('./useTextInputState').TextInputState} __store
 * @property {(int: number) => void} decrement
 * @property {(int: number) => void} increment
 */

/**
 *
 * @param {Props} props
 * @param {import('react').Ref<any>} forwardedRef
 */

function TextInputArrows(props, forwardedRef) {
  var decrement = props.decrement,
      dragHandlersRef = props.dragHandlersRef,
      increment = props.increment;
  var dragHandlers = dragHandlersRef.current;
  return /*#__PURE__*/React.createElement(View, {
    className: styles.SpinnerWrapper
  }, /*#__PURE__*/React.createElement(VStack, Object.assign({}, dragHandlers, {
    className: styles.Spinner,
    expanded: true,
    spacing: 0
  }, ui.$('TextInputArrows'), {
    ref: forwardedRef
  }), /*#__PURE__*/React.createElement(UpDownArrows, {
    onDecrement: decrement,
    onIncrement: increment
  })));
}

var _UpDownArrows = function (_ref) {
  var _ref$onIncrement = _ref.onIncrement,
      onIncrement = _ref$onIncrement === void 0 ? noop : _ref$onIncrement,
      _ref$onDecrement = _ref.onDecrement,
      onDecrement = _ref$onDecrement === void 0 ? noop : _ref$onDecrement;

  /** @type {import('react').MutableRefObject<number | undefined>} */
  var timeoutRef = useRef();
  var timeoutDurationStart = 500;
  var timeoutDurationEnd = 20;
  var timeoutDurationRef = useRef(timeoutDurationStart);
  var handleOnClearTimers = useCallback(function () {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    timeoutDurationRef.current = timeoutDurationStart;
  }, []);
  var handleOnMouseDownIncrement = useCallback(function (event) {
    if (event) {
      event.preventDefault();
    }

    timeoutRef.current = setTimeout(function () {
      onIncrement();
      timeoutDurationRef.current = clamp(timeoutDurationRef.current / 2, timeoutDurationEnd, timeoutDurationStart);
      handleOnMouseDownIncrement();
    }, timeoutDurationRef.current);
  }, [onIncrement]);
  var handleOnMouseDownDecrement = useCallback(function (event) {
    if (event) {
      event.preventDefault();
    }

    timeoutRef.current = setTimeout(function () {
      onDecrement();
      timeoutDurationRef.current = clamp(timeoutDurationRef.current / 2, timeoutDurationEnd, timeoutDurationStart);
      handleOnMouseDownDecrement();
    }, timeoutDurationRef.current);
  }, [onDecrement]);
  useEffect(function () {
    return function () {
      return handleOnClearTimers();
    };
  }, [handleOnClearTimers]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Icon, Object.assign({
    className: styles.SpinnerArrowUp,
    onClick: onIncrement,
    onMouseDown: handleOnMouseDownIncrement,
    onMouseLeave: handleOnClearTimers,
    onMouseUp: handleOnClearTimers,
    tabIndex: -1
  }, ui.$('TextInputArrowUp'), {
    icon: chevronUp,
    size: 12,
    width: 16
  })), /*#__PURE__*/React.createElement(Icon, Object.assign({
    className: styles.SpinnerArrowDown,
    onClick: onDecrement,
    onMouseDown: handleOnMouseDownDecrement,
    onMouseLeave: handleOnClearTimers,
    onMouseUp: handleOnClearTimers,
    tabIndex: -1
  }, ui.$('TextInputArrowDown'), {
    icon: chevronDown,
    size: 12,
    width: 16
  })));
};

var UpDownArrows = /*#__PURE__*/React.memo(_UpDownArrows);
export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(TextInputArrows));