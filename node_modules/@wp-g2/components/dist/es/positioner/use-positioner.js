import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createPopper } from '@popperjs/core';
import { useIsomorphicLayoutEffect, useSealedState } from '@wp-g2/utils';
import React from 'react';
export function usePositioner(props) {
  var _useSealedState = useSealedState(props),
      _useSealedState$gutte = _useSealedState.gutter,
      gutter = _useSealedState$gutte === void 0 ? 4 : _useSealedState$gutte,
      _useSealedState$place = _useSealedState.placement,
      placement = _useSealedState$place === void 0 ? 'bottom-start' : _useSealedState$place,
      _useSealedState$unsta = _useSealedState.unstable_fixed,
      fixed = _useSealedState$unsta === void 0 ? false : _useSealedState$unsta,
      sealedOffset = _useSealedState.unstable_offset;

  var popper = React.useRef(null);
  var referenceRef = React.useRef(null);
  var popoverRef = React.useRef(null);
  var popperCreated = React.useRef(false);

  var _React$useState = React.useState(sealedOffset || [0, gutter]),
      _React$useState2 = _slicedToArray(_React$useState, 1),
      offset = _React$useState2[0];

  useIsomorphicLayoutEffect(function () {
    if (referenceRef.current && popoverRef.current) {
      popper.current = createPopper(referenceRef.current, popoverRef.current, {
        // https://popper.js.org/docs/v2/constructors/#options
        placement: placement,
        strategy: fixed ? 'fixed' : 'absolute',
        modifiers: [{
          // https://popper.js.org/docs/v2/modifiers/offset/
          name: 'offset',
          options: {
            offset: offset
          }
        }]
      });
      popperCreated.current = true;
    }

    return function () {
      if (popper.current) {
        popper.current.destroy();
        popper.current = null;
      }
    };
  }, [placement, fixed, offset]);
  return {
    popoverRef: popoverRef,
    referenceRef: referenceRef,
    popper: popper
  };
}