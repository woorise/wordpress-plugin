import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { css, cx, get } from '@wp-g2/styles';
import { ui } from '@wp-g2/styles';
import React, { useState } from 'react';
import { Image } from '../Image';
import { Initials } from '../Initials';
import { View } from '../View';
import { AvatarView } from './Avatar.styles';
import * as styles from './Avatar.styles';
import { getBorderRadius, getInitialsTextSize, getSize } from './Avatar.utils';

function Avatar(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'Avatar'),
      _useContextSystem$ani = _useContextSystem.animateOnImageLoad,
      animateOnImageLoad = _useContextSystem$ani === void 0 ? true : _useContextSystem$ani,
      _useContextSystem$bor = _useContextSystem.border,
      border = _useContextSystem$bor === void 0 ? false : _useContextSystem$bor,
      _useContextSystem$col = _useContextSystem.color,
      color = _useContextSystem$col === void 0 ? get('lightGray500') : _useContextSystem$col,
      name = _useContextSystem.name,
      _useContextSystem$sha = _useContextSystem.shape,
      shape = _useContextSystem$sha === void 0 ? 'circle' : _useContextSystem$sha,
      _useContextSystem$siz = _useContextSystem.size,
      sizeProp = _useContextSystem$siz === void 0 ? 'medium' : _useContextSystem$siz,
      src = _useContextSystem.src,
      className = _useContextSystem.className,
      otherProps = _objectWithoutProperties(_useContextSystem, ["animateOnImageLoad", "border", "color", "name", "shape", "size", "src", "className"]);

  var _useState = useState(!animateOnImageLoad),
      _useState2 = _slicedToArray(_useState, 2),
      imageLoaded = _useState2[0],
      setImageLoaded = _useState2[1];

  var size = getSize(sizeProp);
  var borderRadius = getBorderRadius(shape, size);
  var textSize = getInitialsTextSize(size);
  var sx = {};
  sx.base = css({
    background: color,
    width: size,
    height: size
  });
  sx.borderRadius = css({
    borderRadius: borderRadius
  });
  var classes = cx(sx.base, sx.borderRadius, border && styles.border, className);
  return /*#__PURE__*/React.createElement(AvatarView, Object.assign({}, otherProps, {
    className: classes,
    ref: forwardedRef
  }), !!name && /*#__PURE__*/React.createElement(View, {
    css: css([ui.position.absolute, ui.alignment.center])
  }, /*#__PURE__*/React.createElement(Initials, Object.assign({}, ui.$('AvatarInitials'), {
    align: "center",
    as: "div",
    lineHeight: 1,
    name: name,
    optimizeReadabilityFor: color,
    size: textSize
  }))), src && /*#__PURE__*/React.createElement(Image, Object.assign({}, ui.$('AvatarImage'), {
    alt: name,
    aspectRatio: 1,
    css: css([{
      borderRadius: borderRadius,
      // Prevents image clipping from revealing background colour
      transform: 'scale(1.025)'
    }, ui.opacity(imageLoaded ? 1 : 0), ui.animation.default]),
    onLoad: function handleOnImageLoad() {
      return setImageLoaded(true);
    },
    src: src
  })));
}

export default contextConnect(Avatar, 'Avatar');