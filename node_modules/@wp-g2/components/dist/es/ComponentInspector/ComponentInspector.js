import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { contextConnect, ns, useContextSystem } from '@wp-g2/context';
import { is, mergeRefs } from '@wp-g2/utils';
import React, { useEffect, useRef, useState } from 'react';
import { Debugger } from '../Debugger';
import { ComponentInspectorView } from './ComponentInspector.styles';

var _Object$keys = Object.keys(ns()),
    _Object$keys2 = _slicedToArray(_Object$keys, 1),
    NAMESPACE = _Object$keys2[0];

function ComponentInspector(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'ComponentInspector'),
      children = _useContextSystem.children,
      _useContextSystem$dis = _useContextSystem.disabled,
      disabled = _useContextSystem$dis === void 0 ? false : _useContextSystem$dis,
      tooltipElement = _useContextSystem.tooltipElement,
      _useContextSystem$too = _useContextSystem.tooltipOnly,
      tooltipOnly = _useContextSystem$too === void 0 ? false : _useContextSystem$too,
      visible = _useContextSystem.visible,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "disabled", "tooltipElement", "tooltipOnly", "visible"]);

  var nodeRef = useRef();

  var _useState = useState({
    x: 0,
    y: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      position = _useState2[0],
      setPosition = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      label = _useState4[0],
      setLabel = _useState4[1];

  var isHidden = is.boolean(visible) && !visible;
  useEffect(function () {
    if (isHidden) {
      setPosition({
        x: 0,
        y: 0
      });
      setLabel(null);
    }
  }, [isHidden]);
  useEffect(function () {
    var node = tooltipElement || nodeRef.current;
    if (!node || disabled || isHidden) return;

    var clear = function () {
      setPosition({
        x: 0,
        y: 0
      });
      setLabel(null);
    };

    var handleOnMouseMove = function (event) {
      var target = event.target;
      var componentName = target.getAttribute(NAMESPACE);
      setPosition({
        x: event.clientX,
        y: event.clientY
      });

      if (componentName) {
        if (!['Debugger', 'ComponentInspector'].includes(componentName)) {
          setLabel("<" + componentName + " />");
        } else {
          setLabel(null);
        }
      }
    };

    node.addEventListener('mousemove', handleOnMouseMove);
    node.addEventListener('mouseenter', clear);
    node.addEventListener('mouseleave', clear);
    return function () {
      node.removeEventListener('mousemove', handleOnMouseMove);
      node.removeEventListener('mouseenter', clear);
      node.removeEventListener('mouseleave', clear);
    };
  }, [disabled, isHidden, tooltipElement]);
  var x = position.x,
      y = position.y;
  return /*#__PURE__*/React.createElement(ComponentInspectorView, Object.assign({
    disabled: tooltipOnly || disabled || isHidden,
    ref: mergeRefs([forwardedRef, nodeRef])
  }, otherProps), label && !!x && !!y && !disabled && /*#__PURE__*/React.createElement(Debugger, {
    __force: true,
    style: {
      left: x,
      position: 'fixed',
      top: y,
      transform: "translate(-50%, calc(-100% + -10px)",
      zIndex: 99999999
    }
  }, label), children);
}

export default contextConnect(ComponentInspector, 'ComponentInspector');