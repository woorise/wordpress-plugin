import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import { noop, useUniqueId } from '@wp-g2/utils';
import React, { useCallback } from 'react';
import { useAccordion } from '../Accordion';
import { Collapsible } from '../Collapsible';
import { PanelContext } from './Panel.Context';
import * as styles from './Panel.styles';

function Panel(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'Panel'),
      baseId = _useContextSystem.baseId,
      className = _useContextSystem.className,
      children = _useContextSystem.children,
      _useContextSystem$col = _useContextSystem.collapsible,
      collapsible = _useContextSystem$col === void 0 ? true : _useContextSystem$col,
      idProp = _useContextSystem.id,
      _useContextSystem$isB = _useContextSystem.isBorderless,
      isBorderless = _useContextSystem$isB === void 0 ? false : _useContextSystem$isB,
      _useContextSystem$sea = _useContextSystem.seamless,
      seamless = _useContextSystem$sea === void 0 ? false : _useContextSystem$sea,
      _useContextSystem$onV = _useContextSystem.onVisibleChange,
      onVisibleChange = _useContextSystem$onV === void 0 ? noop : _useContextSystem$onV,
      _useContextSystem$vis = _useContextSystem.visible,
      visibleProp = _useContextSystem$vis === void 0 ? false : _useContextSystem$vis,
      otherProps = _objectWithoutProperties(_useContextSystem, ["baseId", "className", "children", "collapsible", "id", "isBorderless", "seamless", "onVisibleChange", "visible"]);

  var id = useUniqueId(Panel, 'Panel', baseId || idProp);
  var classes = cx(styles.Panel, isBorderless && styles.borderless, className);

  var _useAccordion = useAccordion({
    id: id,
    visible: visibleProp
  }),
      _useAccordion2 = _slicedToArray(_useAccordion, 2),
      visible = _useAccordion2[0],
      setVisible = _useAccordion2[1];

  var handleOnVisibleChange = useCallback(function (next, disclosure) {
    setVisible(next);
    onVisibleChange(next, disclosure);
  }, [onVisibleChange, setVisible]);
  var contextProps = React.useMemo(function () {
    return {
      collapsible: collapsible,
      seamless: seamless
    };
  }, [collapsible, seamless]);
  return /*#__PURE__*/React.createElement(PanelContext.Provider, {
    value: contextProps
  }, /*#__PURE__*/React.createElement(Collapsible, Object.assign({
    baseId: id,
    visible: visible
  }, otherProps, {
    className: classes,
    onVisibleChange: handleOnVisibleChange,
    ref: forwardedRef
  }), children));
}

export default contextConnect(Panel, 'Panel');