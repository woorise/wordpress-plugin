import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import React from 'react';
import { ArrowIndicator } from '../ArrowIndicator';
import { CollapsibleTrigger, useCollapsibleContext } from '../Collapsible';
import { Flex, FlexBlock } from '../Flex';
import { Heading } from '../Heading';
import { HStack } from '../HStack';
import { Text } from '../Text';
import { usePanelContext } from './Panel.Context';
import * as styles from './Panel.styles';

function PanelHeader(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'PanelHeader'),
      actions = _useContextSystem.actions,
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$hid = _useContextSystem.hideArrow,
      hideArrow = _useContextSystem$hid === void 0 ? false : _useContextSystem$hid,
      title = _useContextSystem.title,
      otherProps = _objectWithoutProperties(_useContextSystem, ["actions", "children", "className", "hideArrow", "title"]);

  var _useCollapsibleContex = useCollapsibleContext(),
      disclosure = _useCollapsibleContex.disclosure;

  var _usePanelContext = usePanelContext(),
      collapsible = _usePanelContext.collapsible,
      seamless = _usePanelContext.seamless;

  var visible = (disclosure || {}).visible;
  var direction = visible ? 'down' : 'right';
  var content = title ? /*#__PURE__*/React.createElement(Heading, {
    size: 5
  }, title) : children;

  if (actions) {
    content = /*#__PURE__*/React.createElement(HStack, null, content, actions);
  }

  var classes = cx(styles.PanelHeader, seamless && styles.seamless, collapsible && styles.collapsibleHeader, !collapsible && styles.nonCollapsibleHeader, className);

  if (!collapsible) {
    return /*#__PURE__*/React.createElement(Flex, Object.assign({
      className: classes
    }, otherProps, {
      ref: forwardedRef
    }), /*#__PURE__*/React.createElement(FlexBlock, null, content));
  }

  return /*#__PURE__*/React.createElement(CollapsibleTrigger, Object.assign({
    as: Flex,
    className: classes
  }, otherProps, {
    ref: forwardedRef
  }), !hideArrow && /*#__PURE__*/React.createElement(Text, {
    isBlock: true
  }, /*#__PURE__*/React.createElement(ArrowIndicator, {
    direction: direction,
    size: 5,
    width: 5
  })), /*#__PURE__*/React.createElement(FlexBlock, null, content));
}

export default contextConnect(PanelHeader, 'PanelHeader');