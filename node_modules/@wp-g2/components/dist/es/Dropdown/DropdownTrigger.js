import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { contextConnect, useContextSystem } from '@wp-g2/context';
import React from 'react';
import { MenuButton } from 'reakit';
import { Button } from '../Button';
import { useDropdownContext } from './Dropdown.Context';
/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('../Button/Button').Props, 'button'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */

function DropdownTrigger(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'DropdownTrigger'),
      _useContextSystem$has = _useContextSystem.hasCaret,
      hasCaret = _useContextSystem$has === void 0 ? false : _useContextSystem$has,
      otherProps = _objectWithoutProperties(_useContextSystem, ["hasCaret"]);

  var _useDropdownContext = useDropdownContext(),
      menu = _useDropdownContext.menu;

  var componentProps = _objectSpread(_objectSpread({
    hasCaret: hasCaret
  }, otherProps), {}, {
    ref: forwardedRef
  });

  if (!menu) {
    return /*#__PURE__*/React.createElement(Button, componentProps);
  }

  return /*#__PURE__*/React.createElement(MenuButton, Object.assign({
    as: Button
  }, componentProps, menu));
}
/**
 * `DropdownTrigger` is an actionable component that toggles the visibility of a `Dropdown`.
 *
 * @example
 * ```jsx
 * <Dropdown>
 *  <DropdownTrigger>Edit</DropdownTrigger>
 *  <DropdownMenu>
 *    ...
 *  </DropdownMenu>
 * </Dropdown>
 * ```
 */


var ConnectedDropdownTrigger = contextConnect(DropdownTrigger, 'DropdownTrigger');
export default ConnectedDropdownTrigger;