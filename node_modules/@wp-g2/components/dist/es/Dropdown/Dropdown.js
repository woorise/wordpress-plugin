import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { contextConnect, useContextSystem } from '@wp-g2/context';
import { renderChildren } from '@wp-g2/utils';
import React, { useMemo } from 'react';
import { useMenuState } from 'reakit';
import { DropdownContext } from './Dropdown.Context';
/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'div'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */

function Dropdown(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'Dropdown'),
      _useContextSystem$ani = _useContextSystem.animated,
      animated = _useContextSystem$ani === void 0 ? true : _useContextSystem$ani,
      _useContextSystem$ani2 = _useContextSystem.animationDuration,
      animationDuration = _useContextSystem$ani2 === void 0 ? 160 : _useContextSystem$ani2,
      _useContextSystem$ani3 = _useContextSystem.animationTimingFunction,
      animationTimingFunction = _useContextSystem$ani3 === void 0 ? 'ease' : _useContextSystem$ani3,
      baseId = _useContextSystem.baseId,
      children = _useContextSystem.children,
      _useContextSystem$gut = _useContextSystem.gutter,
      gutter = _useContextSystem$gut === void 0 ? 4 : _useContextSystem$gut,
      id = _useContextSystem.id,
      label = _useContextSystem.label,
      _useContextSystem$mod = _useContextSystem.modal,
      modal = _useContextSystem$mod === void 0 ? true : _useContextSystem$mod,
      placement = _useContextSystem.placement,
      state = _useContextSystem.state,
      visible = _useContextSystem.visible,
      otherProps = _objectWithoutProperties(_useContextSystem, ["animated", "animationDuration", "animationTimingFunction", "baseId", "children", "gutter", "id", "label", "modal", "placement", "state", "visible"]);

  var _menu = useMenuState(_objectSpread({
    animated: animated ? animationDuration : undefined,
    baseId: baseId || id,
    gutter: gutter,
    modal: modal,
    placement: placement,
    visible: visible
  }, otherProps));

  var menu = state || _menu;
  var contextProps = useMemo(function () {
    var uniqueId = "dropdown-" + menu.baseId;
    return {
      animationDuration: animationDuration,
      animationTimingFunction: animationTimingFunction,
      label: label || uniqueId,
      menu: menu
    };
  }, [animationDuration, animationTimingFunction, label, menu]);
  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {
    ref: forwardedRef,
    value: contextProps
  }, renderChildren(children, mapMenuStateToProps(menu)));
}
/**
 * Remap Reakit's menuState for `@wordpress/components` current Dropdown/
 * DropdownMenu API.
 *
 * @see
 * https://github.com/WordPress/gutenberg/tree/master/packages/components/src/dropdown-menu
 */


function mapMenuStateToProps(state) {
  var hide = state.hide,
      toggle = state.toggle,
      visible = state.visible;
  return _objectSpread(_objectSpread({}, state), {}, {
    isOpen: visible,
    onToggle: toggle,
    onClose: hide
  });
}
/**
 * `Dropdown` is an actionable component renders a list of actions or selectable options for a given context.
 *
 * @example
 * ```jsx
 * <Dropdown>
 *  <DropdownTrigger>Edit</DropdownTrigger>
 *  <DropdownMenu>
 *    <DropdownMenuItem>...</DropdownMenuItem>
 *    <DropdownMenuItem>...</DropdownMenuItem>
 *    <DropdownMenuItem>...</DropdownMenuItem>
 *  </DropdownMenu>
 * </Dropdown>
 * ```
 */


var ConnectedDropdown = contextConnect(Dropdown, 'Dropdown');
export default ConnectedDropdown;