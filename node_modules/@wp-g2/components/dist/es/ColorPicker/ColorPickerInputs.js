import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { __ } from '@wordpress/i18n';
import { interpolate, is, roundClamp } from '@wp-g2/utils';
import React from 'react';
import { FormGroup } from '../FormGroup';
import { Grid } from '../Grid';
import { Slider } from '../Slider';
import { Text } from '../Text';
import { TextInput } from '../TextInput';
import { VStack } from '../VStack';
import { useColorPickerContext } from './ColorPicker.Context';
import * as styles from './ColorPicker.styles';
import { ColorInputHex } from './ColorPickerInputHex';
export var ColorInputSliderAlpha = /*#__PURE__*/React.memo(function (_ref) {
  var _ref$label = _ref.label,
      label = _ref$label === void 0 ? __('Alpha') : _ref$label,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'rgb' : _ref$type,
      otherProps = _objectWithoutProperties(_ref, ["label", "type"]);

  var parse = React.useCallback(function (next) {
    return interpolate(next, [0, 1], [0, 100]);
  }, []);
  var serialize = React.useCallback(function (next) {
    return interpolate(next, [100, 0], [1, 0]);
  }, []);
  var suffix = /*#__PURE__*/React.createElement(Text, {
    className: styles.suffixText,
    isBlock: true,
    variant: "muted"
  }, "%");
  return /*#__PURE__*/React.createElement(ColorInputSlider, Object.assign({
    label: label,
    max: 100,
    min: 0,
    parse: parse,
    prop: "a",
    serialize: serialize,
    step: 1,
    suffix: suffix,
    type: type
  }, otherProps));
});
export var ColorInputSlider = /*#__PURE__*/React.memo(function (_ref2) {
  var label = _ref2.label,
      _ref2$max = _ref2.max,
      max = _ref2$max === void 0 ? 255 : _ref2$max,
      _ref2$min = _ref2.min,
      min = _ref2$min === void 0 ? 0 : _ref2$min,
      parse = _ref2.parse,
      prop = _ref2.prop,
      serialize = _ref2.serialize,
      _ref2$step = _ref2.step,
      step = _ref2$step === void 0 ? 1 : _ref2$step,
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? 'rgb' : _ref2$type,
      otherProps = _objectWithoutProperties(_ref2, ["label", "max", "min", "parse", "prop", "serialize", "step", "type"]);

  var _useColorPickerContex = useColorPickerContext(),
      changeValues = _useColorPickerContex.changeValues,
      colorValues = _useColorPickerContex.colorValues,
      disableAlpha = _useColorPickerContex.disableAlpha;

  var value = colorValues[type]()[prop];
  var setValue = changeValues[type];
  var handleOnChange = React.useCallback(function (next) {
    var _setValue;

    var changeValue = next;

    if (typeof serialize === 'function') {
      changeValue = serialize(changeValue);
    }

    setValue((_setValue = {}, _setValue[prop] = changeValue, _setValue));
  }, [prop, serialize, setValue]);
  var parsedValue = value;

  if (typeof parse === 'function') {
    parsedValue = parse(value);
  }

  parsedValue = is.numeric(parsedValue) ? roundClamp(parsedValue, min, max, step) : parsedValue;
  if (prop === 'a' && disableAlpha) return null;
  return /*#__PURE__*/React.createElement(FormGroup, {
    horizontal: true,
    label: label
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(TextInput, Object.assign({}, otherProps, {
    max: max,
    min: min,
    onChange: handleOnChange,
    step: step,
    type: "number",
    value: parsedValue
  })), /*#__PURE__*/React.createElement(Slider, Object.assign({}, otherProps, {
    max: max,
    min: min,
    onChange: handleOnChange,
    step: step,
    value: parsedValue
  }))));
});
export var ColorPickerRGBInputs = /*#__PURE__*/React.memo(function () {
  return /*#__PURE__*/React.createElement(VStack, null, /*#__PURE__*/React.createElement(ColorInputSlider, {
    label: "Red",
    prop: "r",
    type: "rgb"
  }), /*#__PURE__*/React.createElement(ColorInputSlider, {
    label: "Green",
    prop: "g",
    type: "rgb"
  }), /*#__PURE__*/React.createElement(ColorInputSlider, {
    label: "Blue",
    prop: "b",
    type: "rgb"
  }), /*#__PURE__*/React.createElement(ColorInputSliderAlpha, {
    label: "Alpha",
    type: "rgb"
  }));
});
export var ColorPickerHSLInputs = /*#__PURE__*/React.memo(function () {
  var parse = React.useCallback(function (next) {
    return interpolate(next, [0, 1], [0, 100]);
  }, []);
  var serialize = React.useCallback(function (next) {
    return interpolate(next, [100, 0], [1, 0]);
  }, []);
  var degrees = /*#__PURE__*/React.createElement(Text, {
    className: styles.suffixText,
    isBlock: true,
    variant: "muted"
  }, "\xB0");
  var percentage = /*#__PURE__*/React.createElement(Text, {
    className: styles.suffixText,
    isBlock: true,
    variant: "muted"
  }, "%");
  return /*#__PURE__*/React.createElement(VStack, null, /*#__PURE__*/React.createElement(ColorInputSlider, {
    label: "Hue",
    max: 360,
    min: 0,
    prop: "h",
    step: 1,
    suffix: degrees,
    type: "hsl"
  }), /*#__PURE__*/React.createElement(ColorInputSlider, {
    label: "Saturation",
    max: 100,
    min: 0,
    parse: parse,
    prop: "s",
    serialize: serialize,
    suffix: percentage,
    type: "hsl"
  }), /*#__PURE__*/React.createElement(ColorInputSlider, {
    label: "Luminance",
    max: 100,
    min: 0,
    parse: parse,
    prop: "l",
    serialize: serialize,
    suffix: percentage,
    type: "hsl"
  }), /*#__PURE__*/React.createElement(ColorInputSliderAlpha, {
    label: "Alpha",
    type: "hsl"
  }));
});
export var ColorPickerHexInputs = /*#__PURE__*/React.memo(function () {
  return /*#__PURE__*/React.createElement(VStack, null, /*#__PURE__*/React.createElement(ColorInputHex, null));
});
export var ColorPickerInputs = /*#__PURE__*/React.memo(function () {
  var _useColorPickerContex2 = useColorPickerContext(),
      inputType = _useColorPickerContex2.inputType;

  switch (inputType) {
    case 'hex':
      return /*#__PURE__*/React.createElement(ColorPickerHexInputs, null);

    case 'rgb':
      return /*#__PURE__*/React.createElement(ColorPickerRGBInputs, null);

    case 'hsl':
      return /*#__PURE__*/React.createElement(ColorPickerHSLInputs, null);

    default:
      return null;
  }
});