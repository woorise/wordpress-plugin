import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { useContextSystem } from '@wp-g2/context';
import { ui } from '@wp-g2/styles';
import { noop } from 'lodash';
import { useCallback, useState } from 'react';
/**
 * @typedef {('hex'|'rgb'|'hsl')} InputType
 */

/**
 * @typedef ColorValues
 * @property {string} hex
 * @property {string} hsl
 * @property {string} rgb
 */

/**
 * @typedef ChangeValues
 * @property {(color: string) => void} hex
 * @property {(color: string) => void} hsl
 * @property {(color: string) => void} rgb
 */

/**
 * @typedef ColorPickerStore
 * @property {ChangeValues} changeValues
 * @property {string} color
 * @property {string} colorRgb
 * @property {ColorValues} colorValues
 * @property {boolean} disableAlpha
 * @property {InputType} inputType
 * @property {() => void} increment
 * @property {() => void} decrement
 * @property {(color: string) => void} onChange
 * @property {(inputType: InputType) => void} setInputType
 * @property {boolean} showPreview
 */

/**
 * Retrieves the color using the primary color translation format.
 *
 * @param {string} color color to transform.
 * @returns {string} The color.
 */

function getColor(color) {
  return ui.color(color).toRgbString();
}
/**
 * Retrieves the color value for a particular inputType.
 * @param {string} color
 * @param {InputType} inputType
 * @return {string | undefined} The formatted color value.
 */


var getColorValue = function (color, inputType) {
  var colorValue = color;

  switch (inputType) {
    case 'hex':
      colorValue = ui.color(color).toHexString();
      break;

    case 'rgb':
      colorValue = ui.color(color).toRgbString();
      break;

    case 'hsl':
      colorValue = ui.color(color).toHslString();
      break;

    default:
      break;
  }

  return colorValue;
};
/**
 * @typedef ColorPickerProps
 * @property {number} alpha
 * @property {string} color
 * @property {boolean} disableAlpha
 * @property {InputType} format
 * @property {InputType} inputType
 * @property {(color: string, data: object) => void} onChange
 * @property {boolean} showPreview
 * @property {number|string} width
 */

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<ColorPickerProps, 'div'>} props
 */


export function useColorPicker(props) {
  var _useContextSystem = useContextSystem(props, 'ColorPicker'),
      alpha = _useContextSystem.alpha,
      color = _useContextSystem.color,
      _useContextSystem$dis = _useContextSystem.disableAlpha,
      disableAlpha = _useContextSystem$dis === void 0 ? true : _useContextSystem$dis,
      _useContextSystem$for = _useContextSystem.format,
      format = _useContextSystem$for === void 0 ? 'rgb' : _useContextSystem$for,
      _useContextSystem$inp = _useContextSystem.inputType,
      initialInputType = _useContextSystem$inp === void 0 ? 'hex' : _useContextSystem$inp,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      _useContextSystem$sho = _useContextSystem.showPreview,
      showPreview = _useContextSystem$sho === void 0 ? true : _useContextSystem$sho,
      _useContextSystem$wid = _useContextSystem.width,
      width = _useContextSystem$wid === void 0 ? '100%' : _useContextSystem$wid,
      otherProps = _objectWithoutProperties(_useContextSystem, ["alpha", "color", "disableAlpha", "format", "inputType", "onChange", "showPreview", "width"]);

  var _useState = useState(initialInputType),
      _useState2 = _slicedToArray(_useState, 2),
      inputType = _useState2[0],
      setInputType = _useState2[1];

  var handleOnChange = useCallback(function (next) {
    var result = ui.color(next).toHexString();
    var data = result;

    switch (format) {
      case 'rgb':
        result = ui.color(next).toRgbString();
        data = ui.color(next).toRgb();
        break;

      case 'hsl':
        result = ui.color(next).toHslString();
        data = ui.color(next).toHsl();
        break;

      case 'hex':
        result = ui.color(next).toHexString();
        break;

      default:
        break;
    }

    onChange(result, data);
  }, [format, onChange]);
  var colorValues = {
    rgb: function rgb() {
      return ui.color(color).toRgb();
    },
    hex: function hex() {
      return ui.color(color).toHex();
    },
    hsl: function hsl() {
      return ui.color(color).toHsl();
    }
  };
  var changeValues = {
    rgb: function rgb(next) {
      var nextState = _objectSpread(_objectSpread({}, colorValues.rgb()), next);

      nextState = getColor(nextState);
      handleOnChange(nextState);
    },
    hex: function hex(next) {
      var nextState = getColor(next);
      handleOnChange(nextState);
    },
    hsl: function hsl(next) {
      var nextState = _objectSpread(_objectSpread({}, colorValues.hsl()), next);

      nextState = getColor(nextState);
      handleOnChange(nextState);
    }
  };
  return _objectSpread(_objectSpread({}, otherProps), {}, {
    width: width,
    store: {
      changeValues: changeValues,
      color: getColor(color),
      colorRgb: ui.color(color).toRgb(),
      colorValue: getColorValue(color, inputType),
      colorValues: colorValues,
      decrement: function decrement() {
        var _colorValues$rgb2 = colorValues.rgb(color),
            b = _colorValues$rgb2.b,
            g = _colorValues$rgb2.g,
            r = _colorValues$rgb2.r;

        var next = {
          r: r,
          g: g,
          b: b
        };

        switch (true) {
          case b > 0:
            next.b = b - 1;
            break;

          case g > 0:
            next.g = g - 1;
            break;

          case r > 0:
            next.r = r - 1;
            break;

          default:
            break;
        }

        return changeValues.rgb(next);
      },
      disableAlpha: disableAlpha,
      increment: function increment() {
        var _colorValues$rgb = colorValues.rgb(color),
            b = _colorValues$rgb.b,
            g = _colorValues$rgb.g,
            r = _colorValues$rgb.r;

        var next = {
          r: r,
          g: g,
          b: b
        };

        switch (true) {
          case b < 255:
            next.b = b + 1;
            break;

          case g < 255:
            next.g = g + 1;
            break;

          case r < 255:
            next.r = r + 1;
            break;

          default:
            break;
        }

        return changeValues.rgb(next);
      },
      inputType: inputType,
      onChange: handleOnChange,
      setInputType: setInputType,
      showPreview: showPreview
    }
  });
}