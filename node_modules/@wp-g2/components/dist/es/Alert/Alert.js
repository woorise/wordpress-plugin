import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx, ui } from '@wp-g2/styles';
import React from 'react';
import { Animated } from '../Animated';
import { Flex, FlexBlock } from '../Flex';
import { View } from '../View';
import * as styles from './Alert.styles';
import AlertCloseButton from './AlertCloseButton';
import AlertTitle from './AlertTitle';
var AlertView = styles.AlertView;

function Alert(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'Alert'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$isD = _useContextSystem.isDismissable,
      isDismissableProp = _useContextSystem$isD === void 0 ? false : _useContextSystem$isD,
      onDismiss = _useContextSystem.onDismiss,
      _useContextSystem$sta = _useContextSystem.status,
      status = _useContextSystem$sta === void 0 ? 'default' : _useContextSystem$sta,
      title = _useContextSystem.title,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "className", "isDismissable", "onDismiss", "status", "title"]);

  var isDismissable = isDismissableProp || !!onDismiss;
  var classes = cx(styles[status], className);
  var viewClasses = cx([isDismissable && styles.contentWithDismiss]);
  return /*#__PURE__*/React.createElement(Animated, {
    auto: true
  }, /*#__PURE__*/React.createElement(AlertView, Object.assign({}, otherProps, {
    className: classes,
    ref: forwardedRef
  }), /*#__PURE__*/React.createElement(Flex, {
    align: "flex-start"
  }, /*#__PURE__*/React.createElement(FlexBlock, null, /*#__PURE__*/React.createElement(AlertTitle, {
    title: title
  }), /*#__PURE__*/React.createElement(View, Object.assign({}, ui.$('AlertContent'), {
    className: viewClasses
  }), children)), /*#__PURE__*/React.createElement(AlertCloseButton, {
    isDismissable: isDismissable,
    onDismiss: onDismiss,
    status: status
  }))));
}

export default contextConnect(Alert, 'Alert');