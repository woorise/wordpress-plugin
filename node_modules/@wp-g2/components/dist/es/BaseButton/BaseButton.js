import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { chevronDown } from '@wordpress/icons';
import { contextConnect } from '@wp-g2/context';
import { cx, ui } from '@wp-g2/styles';
import React from 'react';
import { Radio as ReakitRadio } from 'reakit';
import { useButtonGroupContext } from '../ButtonGroup';
import { Elevation } from '../Elevation';
import { FlexItem } from '../Flex';
import { Icon } from '../Icon';
import { View } from '../View';
import * as styles from './BaseButton.styles';
import LoadingOverlay from './BaseButtonLoadingOverlay';
import { useBaseButton } from './useBaseButton';
/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'button'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */

function BaseButton(props, forwardedRef) {
  var _useBaseButton = useBaseButton(props),
      asProp = _useBaseButton.as,
      children = _useBaseButton.children,
      _useBaseButton$disabl = _useBaseButton.disabled,
      disabled = _useBaseButton$disabl === void 0 ? false : _useBaseButton$disabl,
      _useBaseButton$elevat = _useBaseButton.elevation,
      elevation = _useBaseButton$elevat === void 0 ? 0 : _useBaseButton$elevat,
      elevationActive = _useBaseButton.elevationActive,
      elevationFocus = _useBaseButton.elevationFocus,
      elevationHover = _useBaseButton.elevationHover,
      _useBaseButton$hasCar = _useBaseButton.hasCaret,
      hasCaret = _useBaseButton$hasCar === void 0 ? false : _useBaseButton$hasCar,
      href = _useBaseButton.href,
      icon = _useBaseButton.icon,
      _useBaseButton$iconSi = _useBaseButton.iconSize,
      iconSize = _useBaseButton$iconSi === void 0 ? 16 : _useBaseButton$iconSi,
      _useBaseButton$isActi = _useBaseButton.isActive,
      isActive = _useBaseButton$isActi === void 0 ? false : _useBaseButton$isActi,
      _useBaseButton$isDest = _useBaseButton.isDestructive,
      isDestructive = _useBaseButton$isDest === void 0 ? false : _useBaseButton$isDest,
      _useBaseButton$isFocu = _useBaseButton.isFocused,
      isFocused = _useBaseButton$isFocu === void 0 ? false : _useBaseButton$isFocu,
      _useBaseButton$isLoad = _useBaseButton.isLoading,
      isLoading = _useBaseButton$isLoad === void 0 ? false : _useBaseButton$isLoad,
      _useBaseButton$noWrap = _useBaseButton.noWrap,
      noWrap = _useBaseButton$noWrap === void 0 ? true : _useBaseButton$noWrap,
      prefix = _useBaseButton.prefix,
      suffix = _useBaseButton.suffix,
      otherProps = _objectWithoutProperties(_useBaseButton, ["as", "children", "disabled", "elevation", "elevationActive", "elevationFocus", "elevationHover", "hasCaret", "href", "icon", "iconSize", "isActive", "isDestructive", "isFocused", "isLoading", "noWrap", "prefix", "suffix"]);

  var _useButtonGroupContex = useButtonGroupContext(),
      buttonGroup = _useButtonGroupContex.buttonGroup;

  var BaseComponent = buttonGroup ? ReakitRadio : View;
  var as = asProp || (href ? 'a' : 'button');
  return (
    /*#__PURE__*/
    // @ts-ignore No idea why TS is confused about this but ReakitRadio and ReakitButton are definitely renderable
    React.createElement(BaseComponent, Object.assign({
      "aria-busy": isLoading,
      as: as,
      "data-active": isActive,
      "data-destructive": isDestructive,
      "data-focused": isFocused,
      "data-icon": !!icon,
      disabled: disabled || isLoading,
      href: href
    }, buttonGroup || {}, otherProps, {
      ref: forwardedRef
    }), /*#__PURE__*/React.createElement(LoadingOverlay, {
      isLoading: isLoading
    }), prefix && /*#__PURE__*/React.createElement(FlexItem, Object.assign({
      as: "span",
      className: cx(styles.PrefixSuffix, isLoading && styles.loading)
    }, ui.$('ButtonPrefix')), prefix), icon && /*#__PURE__*/React.createElement(FlexItem, Object.assign({
      as: "span",
      className: cx(styles.PrefixSuffix, isLoading && styles.loading)
    }, ui.$('ButtonIcon')), /*#__PURE__*/React.createElement(Icon, {
      icon: icon,
      size: iconSize
    })), children && /*#__PURE__*/React.createElement(FlexItem, Object.assign({
      as: "span",
      className: cx(styles.Content, isLoading && styles.loading, noWrap && styles.noWrap),
      isBlock: true
    }, ui.$('ButtonContent')), children), suffix && /*#__PURE__*/React.createElement(FlexItem, Object.assign({
      as: "span",
      className: cx(styles.PrefixSuffix, isLoading && styles.loading)
    }, ui.$('ButtonSuffix')), suffix), hasCaret && /*#__PURE__*/React.createElement(FlexItem, Object.assign({
      as: "span",
      className: cx(styles.CaretWrapper, isLoading && styles.loading)
    }, ui.$('ButtonCaret')), /*#__PURE__*/React.createElement(Icon, {
      icon: chevronDown,
      size: 16
    })), /*#__PURE__*/React.createElement(Elevation, Object.assign({
      active: elevationActive,
      as: "span",
      focus: elevationFocus,
      hover: elevationHover,
      offset: -1,
      value: elevation
    }, ui.$('ButtonElevation'))))
  );
}
/**
 * `BaseButton` is a primitive component used to create actionable components (e.g. `Button`).
 */


var ConnectedBaseButton = contextConnect(BaseButton, 'BaseButton');
export default ConnectedBaseButton;