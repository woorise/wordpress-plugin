import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { css, cx } from '@wp-g2/styles';
import { getValidChildren } from '@wp-g2/utils';
import React from 'react';
import { AspectRatioResizer, AspectRatioView } from './AspectRatio.styles';
import * as styles from './AspectRatio.styles';

function AspectRatio(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'AspectRatio'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$rat = _useContextSystem.ratio,
      ratio = _useContextSystem$rat === void 0 ? 1 : _useContextSystem$rat,
      width = _useContextSystem.width,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "className", "ratio", "width"]);

  var validChildren = getValidChildren(children);

  var _validChildren = _slicedToArray(validChildren, 1),
      child = _validChildren[0];

  var clonedChild = child && /*#__PURE__*/React.cloneElement(child, {
    className: cx(styles.content, child.props.className)
  });
  var classes = cx(css({
    maxWidth: width
  }), className);
  var resizerClasses = cx(css({
    paddingBottom: 1 / ratio * 100 + "%"
  }));
  return /*#__PURE__*/React.createElement(AspectRatioView, Object.assign({}, otherProps, {
    className: classes,
    ref: forwardedRef
  }), clonedChild, /*#__PURE__*/React.createElement(AspectRatioResizer, {
    "aria-hidden": true,
    className: resizerClasses
  }));
}

export default contextConnect(AspectRatio, 'AspectRatio');