import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { registerStore } from '@wordpress/data';
var MODAL_STORE = 'g2/modal';
/**
 * @type {{ isStacked: boolean, modals: string[]}}
 */

var DEFAULT_STATE = {
  isStacked: false,
  modals: []
};
/** @typedef {{ type: 'MOUNT', ref: string}} MountAction */

/** @typedef {{ type: 'UNMOUNT', ref: string}} UnmountAction */

/**
 * @type {import('@wordpress/data').Store<typeof DEFAULT_STATE>}
 */

registerStore(MODAL_STORE, {
  /**
   * @param {typeof DEFAULT_STATE} state
   * @param {MountAction | UnmountAction} action
   */
  reducer: function reducer(state, action) {
    if (state === void 0) {
      state = DEFAULT_STATE;
    }

    switch (action.type) {
      case 'MOUNT':
        {
          var modals = [].concat(state.modals, [action.ref]);
          var isStacked = modals.length > 1;
          return _objectSpread(_objectSpread({}, state), {}, {
            isStacked: isStacked,
            modals: modals
          });
        }

      case 'UNMOUNT':
        {
          var _modals = state.modals.filter(function (m) {
            return m !== action.ref;
          });

          var _isStacked = _modals.length > 1;

          return _objectSpread(_objectSpread({}, state), {}, {
            isStacked: _isStacked,
            modals: _modals
          });
        }

      default:
        {
          return state;
        }
    }
  },
  actions: {
    /**
     * @param {string} ref
     * @return {MountAction}
     */
    mount: function mount(ref) {
      return {
        type: 'MOUNT',
        ref: ref
      };
    },

    /**
     * @param {string} ref
     * @return {UnmountAction}
     */
    unmount: function unmount(ref) {
      return {
        type: 'UNMOUNT',
        ref: ref
      };
    }
  },
  selectors: {
    /**
     * @param {typeof DEFAULT_STATE} state
     * @param {string} ref
     */
    getIsUnderLayer: function getIsUnderLayer(state, ref) {
      var isStacked = state.isStacked,
          modals = state.modals;
      var latestRef = modals[modals.length - 1];
      if (!isStacked) return false;
      return latestRef !== ref;
    }
  }
});
export default MODAL_STORE;