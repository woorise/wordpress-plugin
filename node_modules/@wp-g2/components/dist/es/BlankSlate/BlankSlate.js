import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import { useResizeAware } from '@wp-g2/utils';
import React from 'react';
import { Card, CardBody } from '../Card';
import { Heading } from '../Heading';
import { Icon } from '../Icon';
import { Text } from '../Text';
import { VStack } from '../VStack';
import * as styles from './BlankSlate.styles';
/**
 * @typedef Props
 * @property {import('react').ReactNode} [description]
 * @property {import('react').ReactNode} title
 * @property {import('react').ReactNode} [icon]
 */

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<Props, 'div'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */

function BlankSlate(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'BlankSlate'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      description = _useContextSystem.description,
      icon = _useContextSystem.icon,
      title = _useContextSystem.title,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "className", "description", "icon", "title"]);

  var _useResizeAware = useResizeAware(),
      _useResizeAware2 = _slicedToArray(_useResizeAware, 2),
      resizeListener = _useResizeAware2[0],
      width = _useResizeAware2[1].width; // Since `useResizeObserver` will report a width of `null` until after the
  // first render, avoid applying any modifier classes until width is known.


  var modifierClassNames;

  if (typeof width === 'number') {
    modifierClassNames = {
      'is-large': width >= 320,
      'is-medium': width >= 160 && width < 320,
      'is-small': width < 160
    };
  }

  var classes = cx(className, modifierClassNames);
  return /*#__PURE__*/React.createElement(Card, Object.assign({
    className: classes
  }, otherProps, {
    ref: forwardedRef
  }), resizeListener, /*#__PURE__*/React.createElement(CardBody, {
    className: styles.CardBody
  }, /*#__PURE__*/React.createElement(VStack, null, /*#__PURE__*/React.createElement(Heading, {
    size: 1
  }, icon && /*#__PURE__*/React.createElement(Icon, {
    className: styles.Icon,
    icon: icon,
    inline: true
  }), title), description && /*#__PURE__*/React.createElement(Text, null, description), children)));
}

export default contextConnect(BlankSlate, 'BlankSlate');