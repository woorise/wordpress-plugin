import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { is, isValidCSSValueForProp, parseUnitValue } from '@wp-g2/utils';
export var UNITS = ['px', '%', 'em', 'rem', 'vh', 'vw', 'vmin', 'vmax'];
export function findUnitMatch(_ref) {
  var _ref$units = _ref.units,
      units = _ref$units === void 0 ? UNITS : _ref$units,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value;
  var match = units.find(function (unit) {
    return unit.indexOf(value.toLowerCase()) === 0;
  });
  return match;
}
export function findUnitMatchExact(_ref2) {
  var _ref2$units = _ref2.units,
      units = _ref2$units === void 0 ? UNITS : _ref2$units,
      _ref2$value = _ref2.value,
      value = _ref2$value === void 0 ? '' : _ref2$value;
  var match = units.find(function (unit) {
    return unit.toLowerCase() === value.toLowerCase();
  });
  return match;
}
export var isPotentialUnitValue = function (value) {
  return is.numeric(value) && Number(value) !== 0;
};
export function getInitialParsedUnitValue(_ref3) {
  var cssProp = _ref3.cssProp,
      value = _ref3.value;

  var _parseUnitValue = parseUnitValue(value),
      _parseUnitValue2 = _slicedToArray(_parseUnitValue, 2),
      parsedValue = _parseUnitValue2[0],
      unit = _parseUnitValue2[1];

  var isUndefinedParsedValue = is.valueEmpty(parsedValue);
  var evalutedValue = isUndefinedParsedValue ? value : parsedValue; // Validation without cssProp

  if (!cssProp) {
    if (isUndefinedParsedValue) {
      return [evalutedValue, undefined];
    } else {
      return [parsedValue, unit];
    }
  } // Validation with cssProp


  if (isValidCSSValueForProp(cssProp, value)) {
    if (isUndefinedParsedValue) {
      return [evalutedValue, undefined];
    } else {
      return [parsedValue, unit];
    }
  }

  return [undefined, undefined];
}