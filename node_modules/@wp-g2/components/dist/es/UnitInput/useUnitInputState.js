import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useControlledValue } from '@wp-g2/utils';
import { createUnitValue, is, isValidCSSValueForProp, usePropRef } from '@wp-g2/utils';
import { useCallback } from 'react';
import { findUnitMatchExact, getInitialParsedUnitValue, isPotentialUnitValue } from './UnitInput.utils';
export function useUnitInputState(_ref) {
  var _ref$allowEmptyValue = _ref.allowEmptyValue,
      allowEmptyValue = _ref$allowEmptyValue === void 0 ? false : _ref$allowEmptyValue,
      cssProp = _ref.cssProp,
      _ref$fallbackUnit = _ref.fallbackUnit,
      fallbackUnit = _ref$fallbackUnit === void 0 ? 'px' : _ref$fallbackUnit,
      _ref$incrementFromNon = _ref.incrementFromNonNumericValue,
      incrementFromNonNumericValue = _ref$incrementFromNon === void 0 ? true : _ref$incrementFromNon,
      onChangeProp = _ref.onChange,
      valueProp = _ref.value;

  var _useControlledValue = useControlledValue({
    value: valueProp,
    onChange: onChangeProp
  }),
      _useControlledValue2 = _slicedToArray(_useControlledValue, 2),
      value = _useControlledValue2[0],
      onChange = _useControlledValue2[1];

  var _getInitialParsedUnit = getInitialParsedUnitValue({
    cssProp: cssProp,
    value: value
  }),
      _getInitialParsedUnit2 = _slicedToArray(_getInitialParsedUnit, 2),
      parsedValue = _getInitialParsedUnit2[0],
      parsedUnit = _getInitialParsedUnit2[1];

  var unit = findUnitMatchExact({
    value: parsedUnit
  }) || null;
  var propRefs = usePropRef({
    allowEmptyValue: allowEmptyValue,
    fallbackUnit: fallbackUnit,
    cssProp: cssProp,
    incrementFromNonNumericValue: incrementFromNonNumericValue,
    value: value,
    parsedValue: parsedValue,
    unit: unit
  });
  var getIsValidCSSValue = useCallback(function (next) {
    var cssProp = propRefs.current.cssProp;
    if (!cssProp) return true;
    return isValidCSSValueForProp(cssProp, next);
  }, [propRefs]);
  var validate = useCallback(function (next) {
    var _propRefs$current = propRefs.current,
        allowEmptyValue = _propRefs$current.allowEmptyValue,
        cssProp = _propRefs$current.cssProp,
        fallbackUnit = _propRefs$current.fallbackUnit,
        incrementFromNonNumericValue = _propRefs$current.incrementFromNonNumericValue,
        unit = _propRefs$current.unit,
        value = _propRefs$current.value;
    if (next === value) return false;
    if (!cssProp) return true;
    /**
     * Handle cases that allow for empty values.
     */

    if (allowEmptyValue && is.empty(next)) {
      return true;
    }

    var validationValue = next;

    if (isPotentialUnitValue(validationValue)) {
      if (!unit && incrementFromNonNumericValue) {
        validationValue = createUnitValue(validationValue, fallbackUnit);
      } else {
        validationValue = createUnitValue(validationValue, unit);
      }
    }

    return getIsValidCSSValue(validationValue);
  }, [getIsValidCSSValue, propRefs]);
  var handleOnChange = useCallback(function (next) {
    var _propRefs$current2 = propRefs.current,
        allowEmptyValue = _propRefs$current2.allowEmptyValue,
        fallbackUnit = _propRefs$current2.fallbackUnit,
        unit = _propRefs$current2.unit;
    var nextValue = next;

    if (is.numeric(nextValue)) {
      nextValue = createUnitValue(next, unit || fallbackUnit);
    }

    if (allowEmptyValue && is.empty(next)) {
      nextValue = '';
    }

    if (!validate(nextValue)) return;
    onChange(nextValue);
  }, [onChange, propRefs, validate]);
  var handleOnSelectChange = useCallback(function (next) {
    var parsedValue = propRefs.current.parsedValue;
    if (!parsedValue) return;
    var final = createUnitValue(parsedValue, next);
    handleOnChange(final);
  }, [handleOnChange, propRefs]);
  return {
    incrementFromNonNumericValue: incrementFromNonNumericValue,
    value: parsedValue,
    onChange: handleOnChange,
    onSelectChange: handleOnSelectChange,
    validate: validate,
    unit: unit
  };
}