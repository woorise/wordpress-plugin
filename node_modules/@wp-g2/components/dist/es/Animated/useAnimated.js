import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { useContextSystem } from '@wp-g2/context';
import { useReducedMotion } from '@wp-g2/styles';
import { useReducedMotion as useSystemReducedMotion } from 'framer-motion';
export function useAnimated(props) {
  var _useContextSystem = useContextSystem(props, 'Animated'),
      _useContextSystem$as = _useContextSystem.as,
      as = _useContextSystem$as === void 0 ? 'div' : _useContextSystem$as,
      _useContextSystem$aut = _useContextSystem.auto,
      auto = _useContextSystem$aut === void 0 ? false : _useContextSystem$aut,
      otherProps = _objectWithoutProperties(_useContextSystem, ["as", "auto"]);

  var _useReducedMotion = useReducedMotion(),
      _useReducedMotion2 = _slicedToArray(_useReducedMotion, 1),
      isProviderReducedMotion = _useReducedMotion2[0];

  var isSystemReducedMotion = useSystemReducedMotion();
  var baseProps = {
    initial: false
  };

  if (auto) {
    baseProps = {
      animate: {
        opacity: 1,
        scale: 1,
        transition: props.transition || {
          duration: 0.2,
          ease: 'easeInOut'
        }
      },
      exit: {
        opacity: 0,
        scale: 0.9,
        transition: {
          duration: 0.2,
          ease: 'easeInOut'
        }
      },
      initial: {
        opacity: 0,
        scale: 0.9
      }
    };
  }

  var finalProps = _objectSpread(_objectSpread({}, baseProps), otherProps);

  if (isSystemReducedMotion || isProviderReducedMotion) {
    finalProps = _objectSpread(_objectSpread({}, finalProps), {}, {
      layout: undefined,
      transition: {
        duration: 0
      }
    });
  }

  return _objectSpread(_objectSpread({}, finalProps), {}, {
    as: as
  });
}