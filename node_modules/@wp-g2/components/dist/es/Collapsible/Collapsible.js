import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { noop, useUpdateEffect } from '@wp-g2/utils';
import React from 'react';
import { useDisclosureState } from 'reakit';
import { View } from '../View';
import { CollapsibleContext } from './Collapsible.Context';

function Collapsible(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'Collapsible'),
      baseId = _useContextSystem.baseId,
      children = _useContextSystem.children,
      visible = _useContextSystem.visible,
      _useContextSystem$onV = _useContextSystem.onVisibleChange,
      onVisibleChange = _useContextSystem$onV === void 0 ? noop : _useContextSystem$onV,
      otherProps = _objectWithoutProperties(_useContextSystem, ["baseId", "children", "visible", "onVisibleChange"]);

  var disclosure = useDisclosureState({
    baseId: baseId,
    visible: visible
  });
  useUpdateEffect(function () {
    if (!visible) {
      disclosure.hide();
    } else {
      disclosure.show();
    }
  }, [visible]);
  useUpdateEffect(function () {
    onVisibleChange(disclosure.visible, disclosure);
  }, [disclosure.visible]);
  return /*#__PURE__*/React.createElement(CollapsibleContext.Provider, {
    value: {
      disclosure: disclosure
    }
  }, /*#__PURE__*/React.createElement(View, Object.assign({}, otherProps, {
    "data-expanded": disclosure.visible,
    ref: forwardedRef
  }), children));
}

export default contextConnect(Collapsible, 'Collapsible');