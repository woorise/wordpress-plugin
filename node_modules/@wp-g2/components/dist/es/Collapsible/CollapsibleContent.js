import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx, ui } from '@wp-g2/styles';
import React from 'react';
import { DisclosureContent } from 'reakit';
import { Animated } from '../Animated';
import { useCollapsibleContext } from './Collapsible.Context';
import * as styles from './Collapsible.styles';
var animationVariants = {
  visible: {
    height: 'auto',
    opacity: 1,
    transitionEnd: {
      display: 'block'
    }
  },
  hidden: {
    height: 0,
    opacity: 0,
    transitionEnd: {
      display: 'none'
    }
  }
};

function CollapsibleContent(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'CollapsibleContent'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "className"]);

  var _useCollapsibleContex = useCollapsibleContext(),
      disclosure = _useCollapsibleContex.disclosure;

  var isVisible = disclosure == null ? void 0 : disclosure.visible;
  var classes = cx(styles.CollapsibleContent, className);
  return /*#__PURE__*/React.createElement(DisclosureContent, Object.assign({
    className: classes,
    ref: forwardedRef
  }, otherProps, disclosure), /*#__PURE__*/React.createElement(Animated, Object.assign({
    animate: isVisible ? 'visible' : 'hidden',
    className: cx(styles.innerContent),
    initial: false,
    transition: {
      duration: 0.2
    },
    variants: animationVariants
  }, ui.$('CollapsibleInnerContent')), children));
}

export default contextConnect(CollapsibleContent, 'CollapsibleContent');