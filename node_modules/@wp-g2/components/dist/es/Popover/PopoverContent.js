import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { css, cx } from '@wp-g2/styles';
import React from 'react';
import { Popover as ReakitPopover } from 'reakit';
import { Card } from '../Card';
import { View } from '../View';
import { usePopoverContext } from './Popover.Context';
import * as styles from './Popover.styles';

function PopoverContent(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'PopoverContent'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$ele = _useContextSystem.elevation,
      elevation = _useContextSystem$ele === void 0 ? 5 : _useContextSystem$ele,
      _useContextSystem$max = _useContextSystem.maxWidth,
      maxWidth = _useContextSystem$max === void 0 ? 360 : _useContextSystem$max,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "className", "elevation", "maxWidth"]);

  var _usePopoverContext = usePopoverContext(),
      label = _usePopoverContext.label,
      popover = _usePopoverContext.popover;

  var classes = cx(styles.PopoverContent, css({
    maxWidth: maxWidth
  }), className);
  var showContent = popover.visible || popover.animating;
  return /*#__PURE__*/React.createElement(ReakitPopover, Object.assign({
    "aria-label": label,
    as: View,
    className: classes
  }, otherProps, popover), showContent && /*#__PURE__*/React.createElement(Card, {
    elevation: elevation,
    ref: forwardedRef
  }, children));
}

export default contextConnect(PopoverContent, 'PopoverContent');