import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { contextConnect, useContextSystem } from '@wp-g2/context';
import { noop, useUpdateEffect } from '@wp-g2/utils';
import React, { useCallback } from 'react';
import { PopoverDisclosure, usePopoverState } from 'reakit';
import { Portal } from '../Portal';
import { PopoverContext } from './Popover.Context';
import { usePopoverResizeUpdater } from './Popover.utils';
import PopoverContent from './PopoverContent';

function Popover(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'Popover'),
      _useContextSystem$ani = _useContextSystem.animated,
      animated = _useContextSystem$ani === void 0 ? true : _useContextSystem$ani,
      _useContextSystem$ani2 = _useContextSystem.animationDuration,
      animationDuration = _useContextSystem$ani2 === void 0 ? 160 : _useContextSystem$ani2,
      baseId = _useContextSystem.baseId,
      children = _useContextSystem.children,
      _useContextSystem$ele = _useContextSystem.elevation,
      elevation = _useContextSystem$ele === void 0 ? 5 : _useContextSystem$ele,
      id = _useContextSystem.id,
      label = _useContextSystem.label,
      _useContextSystem$max = _useContextSystem.maxWidth,
      maxWidth = _useContextSystem$max === void 0 ? 360 : _useContextSystem$max,
      _useContextSystem$onV = _useContextSystem.onVisibleChange,
      onVisibleChange = _useContextSystem$onV === void 0 ? noop : _useContextSystem$onV,
      placement = _useContextSystem.placement,
      state = _useContextSystem.state,
      trigger = _useContextSystem.trigger,
      visible = _useContextSystem.visible,
      otherProps = _objectWithoutProperties(_useContextSystem, ["animated", "animationDuration", "baseId", "children", "elevation", "id", "label", "maxWidth", "onVisibleChange", "placement", "state", "trigger", "visible"]);

  var _popover = usePopoverState(_objectSpread({
    animated: animated ? animationDuration : undefined,
    baseId: baseId || id,
    placement: placement,
    visible: visible
  }, otherProps));

  var popover = state || _popover;
  var resizeListener = usePopoverResizeUpdater({
    onResize: popover.unstable_update
  });
  var uniqueId = "popover-" + popover.baseId;
  var labelId = label || uniqueId;
  var contextProps = React.useMemo(function () {
    return {
      label: labelId,
      popover: popover
    };
  }, [labelId, popover]);
  var triggerContent = useCallback(function (triggerProps) {
    return /*#__PURE__*/React.cloneElement(trigger, triggerProps);
  }, [trigger]);
  useUpdateEffect(function () {
    onVisibleChange(popover.visible);
  }, [popover.visible]);
  return /*#__PURE__*/React.createElement(PopoverContext.Provider, {
    value: contextProps
  }, trigger && /*#__PURE__*/React.createElement(PopoverDisclosure, Object.assign({}, popover, {
    ref: trigger.ref
  }, trigger.props), triggerContent), /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(PopoverContent, Object.assign({
    ref: forwardedRef
  }, otherProps, {
    elevation: elevation,
    maxWidth: maxWidth
  }), resizeListener, children)));
}

export default contextConnect(Popover, 'Popover');