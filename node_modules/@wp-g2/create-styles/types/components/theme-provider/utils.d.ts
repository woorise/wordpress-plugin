/**
 * @typedef UseColorBlindModeProps
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {boolean} isColorBlind Determines if color-blind-mode styles should be rendered.
 * @property {import('react').RefObject<HTMLElement | undefined>} ref React ref.
 */
/**
 * Hook that sets the Style system's color-blind mode.
 * @param {UseColorBlindModeProps} props Props for the hook.
 */
export function useColorBlindMode({ isColorBlind, isGlobal, ref }: UseColorBlindModeProps): void;
/**
 * @typedef UseDarkModeProps
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {boolean} isDark Determines if dark-mode styles should be rendered.
 * @property {import('react').RefObject<HTMLElement | undefined>} ref React ref.
 */
/**
 * Hook that sets the Style system's dark mode.
 * @param {UseDarkModeProps} props Props for the hook.
 */
export function useDarkMode({ isDark, isGlobal, ref }: UseDarkModeProps): void;
/**
 * @typedef UseHighContrastMode
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {boolean} isHighContrast Determines if high-contrast styles should be rendered.
 * @property {import('react').RefObject<HTMLElement | undefined>} ref React ref.
 */
/**
 * Hook that sets the Style system's high-contrast mode.
 * @param {UseHighContrastMode} props Props for the hook.
 */
export function useHighContrastMode({ isGlobal, isHighContrast, ref }: UseHighContrastMode): void;
/**
 * @typedef UseReducedMotionProps
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {boolean} isReducedMotion Determines if reduced-motion styles should be rendered.
 * @property {import('react').RefObject<HTMLElement | undefined>} ref React ref.
 */
/**
 * Hook that sets the Style system's reduced-motion mode.
 * @param {UseReducedMotionProps} props Props for the hook.
 */
export function useReducedMotionMode({ isGlobal, isReducedMotion, ref, }: UseReducedMotionProps): void;
/**
 * @typedef UseThemeStyles
 * @property {import('create-emotion').Emotion['injectGlobal']} injectGlobal
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {Record<string, string>} theme Custom theme values.
 * @property {string} selector
 */
/**
 * Hook that sets the Style system's theme.
 * @param {UseThemeStyles} props Props for the hook.
 * @return {string}
 */
export function useThemeStyles({ injectGlobal, isGlobal, theme, selector, }: UseThemeStyles): string;
export type UseColorBlindModeProps = {
    /**
     * Determines if the theme styles are rendered globally or scoped locally.
     */
    isGlobal: boolean;
    /**
     * Determines if color-blind-mode styles should be rendered.
     */
    isColorBlind: boolean;
    /**
     * React ref.
     */
    ref: import('react').RefObject<HTMLElement | undefined>;
};
export type UseDarkModeProps = {
    /**
     * Determines if the theme styles are rendered globally or scoped locally.
     */
    isGlobal: boolean;
    /**
     * Determines if dark-mode styles should be rendered.
     */
    isDark: boolean;
    /**
     * React ref.
     */
    ref: import('react').RefObject<HTMLElement | undefined>;
};
export type UseHighContrastMode = {
    /**
     * Determines if the theme styles are rendered globally or scoped locally.
     */
    isGlobal: boolean;
    /**
     * Determines if high-contrast styles should be rendered.
     */
    isHighContrast: boolean;
    /**
     * React ref.
     */
    ref: import('react').RefObject<HTMLElement | undefined>;
};
export type UseReducedMotionProps = {
    /**
     * Determines if the theme styles are rendered globally or scoped locally.
     */
    isGlobal: boolean;
    /**
     * Determines if reduced-motion styles should be rendered.
     */
    isReducedMotion: boolean;
    /**
     * React ref.
     */
    ref: import('react').RefObject<HTMLElement | undefined>;
};
export type UseThemeStyles = {
    injectGlobal: import('create-emotion').Emotion['injectGlobal'];
    /**
     * Determines if the theme styles are rendered globally or scoped locally.
     */
    isGlobal: boolean;
    /**
     * Custom theme values.
     */
    theme: Record<string, string>;
    selector: string;
};
//# sourceMappingURL=utils.d.ts.map