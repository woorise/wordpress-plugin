/**
 * Creates a RootStore instance.
 * This store contains a collection of CSS variables that is expected to
 * be added to the :root {} node.
 *
 * @param {Record<string, string>} initialState The initial config.
 * @returns {RootStore} The RootStore instance.
 */
export function createRootStore(initialState?: Record<string, string>): RootStore;
/**
 * Stores CSS config variables that are expected to be added to :root.
 * This is used for CSS variable fallback handling for IE 11.
 */
export class RootStore {
    /**
     *
     * @param {Record<string, string>} initialState
     */
    constructor(initialState?: Record<string, string>);
    /**
     * @type {Record<string, string>}
     */
    state: Record<string, string>;
    /**
     * Retrieve a value from the state.
     * @param {string} key The key to retrieve.
     * @returns {string} The value.
     */
    get: (key: string) => string;
    /**
     * Retrieves the current state.
     * @returns {Record<string, string>} The state.
     */
    getState: () => Record<string, string>;
    /**
     * Sets the state.
     * @param {Record<string, string>} next The next state to merge into the current state.
     * @returns {Record<string, string>} The state.
     */
    setState: (next?: Record<string, string>) => Record<string, string>;
    /**
     * Updates the state.
     * @param {Record<string, string>} next The next state to merge into the current state.
     */
    _updateState: (next?: Record<string, string>) => void;
    /**
     * Resolves potential CSS variables that may exist within the state's values.
     */
    _resolveVariablesInStateValue: () => void;
}
//# sourceMappingURL=create-root-store.d.ts.map