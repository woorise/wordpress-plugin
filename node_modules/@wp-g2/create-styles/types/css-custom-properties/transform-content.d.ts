/**
 * Interprets and retrieves the CSS fallback value of a declaration rule.
 *
 * @param {string} declaration A CSS declaration rule to parse.
 * @param {object} rootStore A store for CSS root variables.
 * @returns {string | undefined} A CSS declaration rule with a fallback (if applicable).
 */
export function getFallbackDeclaration(declaration: string, rootStore: object): string | undefined;
/**
 * Parses the incoming content from stylis to add fallback CSS values for
 * variables.
 *
 * @param {string} content Stylis content to parse.
 * @param {object} rootStore A store for CSS root variables.
 * @return {string | undefined} The transformed content with CSS variable fallbacks.
 */
export function baseTransformContent(content: string, rootStore: object): string | undefined;
export const transformContent: typeof baseTransformContent & memoize.MemizeMemoizedFunction;
import { memoize } from "@wp-g2/utils/types/memoize";
//# sourceMappingURL=transform-content.d.ts.map