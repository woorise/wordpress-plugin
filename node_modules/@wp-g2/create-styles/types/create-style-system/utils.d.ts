/**
 * Creates the (CSS Variable) design token used by the Style system.
 *
 * @param {string} key The variable (key).
 * @returns {string} The token (CSS variable).
 */
export function createToken(key: string): string;
/**
 * The primary mechanism to retrieve Style system configs values - values that
 * have been transformed into CSS variables with a dedicated namespace.
 *
 * @example
 * ```js
 * get('colorAdmin'); // var(--wp-g2-color-admin, 'blue');
 * ```
 * @template {Record<string, string | number>} TConfig
 * @template {Record<string, string | number>} TDarkConfig
 * @template {Record<string, string | number>} THCConfig
 * @template {Record<string, string | number>} TDarkHCConfig
 * @template {string} TGeneratedTokens
 * @param {keyof (TConfig & TDarkConfig & THCConfig & TDarkHCConfig) | TGeneratedTokens} key The config variable to retrieve.
 * @returns {string} The compiled CSS variable associated with the config key.
 */
export function get<TConfig extends Record<string, import("react").ReactText>, TDarkConfig extends Record<string, import("react").ReactText>, THCConfig extends Record<string, import("react").ReactText>, TDarkHCConfig extends Record<string, import("react").ReactText>, TGeneratedTokens extends string>(key: TGeneratedTokens | keyof TConfig | keyof TDarkConfig | keyof THCConfig | keyof TDarkHCConfig): string;
/** @typedef {Record<string, string | number>} StyleConfigValues */
/** @typedef {Record<string, string>} StyleConfig */
/**
 * Transforms a series of config values into set of namespaced CSS
 * references for the Style system.
 *
 * @param {StyleConfigValues} values Style config values to transform into CSS variables.
 * @returns {StyleConfig} The set of CSS variables, transformed from config values.
 */
export function transformValuesToReferences(values?: StyleConfigValues): StyleConfig;
/**
 * Transforms a series of config values into set of namespaced CSS
 * variables for the Style system. These values can then be safely and predictable
 * retrieved using the get() function.
 *
 * @param {StyleConfigValues} values Style config values to transform into CSS variables.
 * @returns {StyleConfig} The set of CSS variables, transformed from config values.
 */
export function transformValuesToVariables(values?: StyleConfigValues): StyleConfig;
/**
 * Transforms a series of config values into set of namespaced CSS
 * references for the Style system. These values are then transformed into
 * a CSS style value (`string`) that can be injected into the DOM, within a
 * <style> tag.
 *
 * @param {string} [selector=':root'] The selector to attach the config values to.
 * @param {StyleConfigValues} values Style config values to transform into CSS variables.
 * @returns {string} Compiled innerHTML styles to be injected into a <style /> tag.
 */
export function transformValuesToVariablesString(selector?: string | undefined, values?: StyleConfigValues, isGlobal?: boolean): string;
/**
 * Resolves and compiles interpolated CSS styles for styled-components.
 * Allows for prop (function) interpolation within the style rules.
 *
 * For more information on tagged template literals, check out:
 * https://mxstbr.blog/2016/11/styled-components-magic-explained/
 *
 * @template TProps
 * @param {(string | ((props: TProps) => string) | import('../create-style-system/polymorphic-component').PolymorphicComponent<any, any>)[]} interpolatedStyles The interpolated styles from a Styled component.
 * @param {TProps} props Incoming component props.
 * @returns {string[]} Compiled CSS style rules.
 */
export function compileInterpolatedStyles<TProps>(interpolatedStyles: (string | import("./polymorphic-component").PolymorphicComponent<any, any> | ((props: TProps) => string))[], props: TProps): string[];
/**
 * Creates an interpolated className. This is used when styled components are
 * interpolated in the template literal.
 *
 * @param {string} displayName The displayName of the component.
 * @returns {string} The interpolated className.
 */
export function getInterpolatedClassName(displayName: string): string;
/**
 * @type {{
    baseStyles: any;
    config: any;
    darkModeConfig: any;
    highContrastModeConfig: any;
    darkHighContrastModeConfig: any;
    compilerOptions: any;
    }}
 */
export const DEFAULT_STYLE_SYSTEM_OPTIONS: {
    baseStyles: any;
    config: any;
    darkModeConfig: any;
    highContrastModeConfig: any;
    darkHighContrastModeConfig: any;
    compilerOptions: any;
};
export type StyleConfigValues = {
    [x: string]: import("react").ReactText;
};
export type StyleConfig = {
    [x: string]: string;
};
//# sourceMappingURL=utils.d.ts.map