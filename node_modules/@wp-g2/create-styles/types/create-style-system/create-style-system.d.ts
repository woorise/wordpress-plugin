/** @typedef {Omit<import('../components/theme-provider/theme-provider').ThemeProviderProps, 'compiler' | 'globalStyles'>} WrappedThemeProviderProps */
/**
 * @template {Record<string, string | number>} TConfig
 * @template {Record<string, string | number>} TDarkConfig
 * @template {Record<string, string | number>} THCConfig
 * @template {Record<string, string | number>} TDarkHCConfig
 * @template {string} TGeneratedTokens
 * @typedef CreateStyleSystemObjects
 * @property {import('./polymorphic-component').CoreElements} core A set of coreElements.
 * @property {import('../create-compiler').Compiler} compiler The Style system compiler (a custom Emotion instance).
 * @property {(tagName: import('react').ComponentType) => ReturnType<createCoreElement>} createCoreElement A function to create a coreElement (with settings from the Style system).
 * @property {import('../create-compiler').Compiler['css']} css A function to compile CSS styles.
 * @property {import('../create-compiler').Compiler['cx']} cx A function to resolve + combine classNames.
 * @property {(tokenName: string) => string} createToken A function to generate a design token (CSS variable) used by the system.
 * @property {(value: keyof (TConfig & TDarkConfig & THCConfig & TDarkHCConfig) | TGeneratedTokens) => string} get The primary function to retrieve Style system variables.
 * @property {import('./polymorphic-component').CreateStyled} styled A set of styled components.
 * @property {import('react').ComponentType} View The base <View /> component.
 * @property {import('react').ComponentType<WrappedThemeProviderProps>} ThemeProvider The component (Provider) used to adjust design tokens.
 * @property {import('../css-custom-properties').RootStore} rootStore
 */
/**
 * @template {Record<string, string | number>} TConfig
 * @template {Record<string, string | number>} TDarkConfig
 * @template {Record<string, string | number>} THCConfig
 * @template {Record<string, string | number>} TDarkHCConfig
 * @template {string} TGeneratedTokens
 * @typedef CreateStyleSystemOptions
 * @property {import('create-emotion').ObjectInterpolation<any>} baseStyles
 * @property {TConfig} config
 * @property {TDarkConfig} darkModeConfig
 * @property {THCConfig} highContrastModeConfig
 * @property {TDarkHCConfig} darkHighContrastModeConfig
 * @property {import('../create-compiler').CreateCompilerOptions} [compilerOptions]

 */
/**
 * Creates a Style system using a set of baseStyles and configs.
 *
 * @example
 * ```js
 * const baseStyles = { background: 'blue' };
 * const blueStyleSystem = createStyleSystem({ baseStyles });
 * ```
 *
 * @template {Record<string, string | number>} TConfig
 * @template {Record<string, string | number>} TDarkConfig
 * @template {Record<string, string | number>} THCConfig
 * @template {Record<string, string | number>} TDarkHCConfig
 * @template {string} TGeneratedTokens
 * @param {CreateStyleSystemOptions<TConfig, TDarkConfig, THCConfig, TDarkHCConfig, TGeneratedTokens>} options Options to create a Style system with.
 * @returns {CreateStyleSystemObjects<TConfig, TDarkConfig, THCConfig, TDarkHCConfig, TGeneratedTokens>} A collection of functions and elements from the generated Style system.
 */
export function createStyleSystem<TConfig extends Record<string, React.ReactText>, TDarkConfig extends Record<string, React.ReactText>, THCConfig extends Record<string, React.ReactText>, TDarkHCConfig extends Record<string, React.ReactText>, TGeneratedTokens extends string>(options?: CreateStyleSystemOptions<TConfig, TDarkConfig, THCConfig, TDarkHCConfig, TGeneratedTokens>): CreateStyleSystemObjects<TConfig, TDarkConfig, THCConfig, TDarkHCConfig, TGeneratedTokens>;
export default createStyleSystem;
export type WrappedThemeProviderProps = {
    /**
     * Children to render.
     */
    children: React.ReactNode;
    /**
     * Optional className to render on the provider.
     */
    className?: string | undefined;
    /**
     * Custom theme properties.
     */
    theme?: Record<string, string> | undefined;
    /**
     * Determines if color-blind-mode styles should be rendered.
     */
    isColorBlind?: boolean | undefined;
    /**
     * Determines if dark-mode styles should be rendered.
     */
    isDark?: boolean | undefined;
    /**
     * Determines if high-contrast-mode styles should be rendered.
     */
    isHighContrast?: boolean | undefined;
    /**
     * Determines if reduced-motion-mode styles should be rendered.
     */
    isReducedMotion?: boolean | undefined;
    /**
     * Determines if the theme styles are rendered globally or scoped locally.
     */
    isGlobal?: boolean | undefined;
    /**
     * Custom dark theme properties.
     */
    darkTheme?: Record<string, string> | undefined;
    /**
     * Custom high contrast theme properties.
     */
    highContrastTheme?: Record<string, string> | undefined;
    /**
     * Custom dark & high contrast theme properties.
     */
    darkHighContrastTheme?: Record<string, string> | undefined;
};
export type CreateStyleSystemObjects<TConfig extends Record<string, React.ReactText>, TDarkConfig extends Record<string, React.ReactText>, THCConfig extends Record<string, React.ReactText>, TDarkHCConfig extends Record<string, React.ReactText>, TGeneratedTokens extends string> = {
    /**
     * A set of coreElements.
     */
    core: import('./polymorphic-component').CoreElements;
    /**
     * The Style system compiler (a custom Emotion instance).
     */
    compiler: import('../create-compiler').Compiler;
    /**
     * A function to create a coreElement (with settings from the Style system).
     */
    createCoreElement: (tagName: import('react').ComponentType) => ReturnType<(<TTagName extends "symbol" | "object" | "small" | "meter" | "textarea" | "button" | "style" | "progress" | "text" | "ruby" | "table" | "sub" | "circle" | "embed" | "pre" | "caption" | "menu" | "menuitem" | "clipPath" | "filter" | "mask" | "marker" | "big" | "link" | "sup" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "base" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "canvas" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "div" | "dl" | "dt" | "em" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "keygen" | "label" | "legend" | "li" | "main" | "map" | "mark" | "meta" | "nav" | "noindex" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "q" | "rp" | "rt" | "s" | "samp" | "slot" | "script" | "section" | "select" | "source" | "span" | "strong" | "summary" | "template" | "tbody" | "td" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr" | "webview" | "svg" | "animate" | "animateMotion" | "animateTransform" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feDropShadow" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "metadata" | "mpath" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "switch" | "textPath" | "tspan" | "use" | "view">(tagName: TTagName, options: import("./create-core-element").CreateCoreElementOptions) => import("./polymorphic-component").PolymorphicComponent<TTagName, {}>)>;
    /**
     * A function to compile CSS styles.
     */
    css: import('../create-compiler').Compiler['css'];
    /**
     * A function to resolve + combine classNames.
     */
    cx: import('../create-compiler').Compiler['cx'];
    /**
     * A function to generate a design token (CSS variable) used by the system.
     */
    createToken: (tokenName: string) => string;
    /**
     * The primary function to retrieve Style system variables.
     */
    get: (value: TGeneratedTokens | keyof TConfig | keyof TDarkConfig | keyof THCConfig | keyof TDarkHCConfig) => string;
    /**
     * A set of styled components.
     */
    styled: import('./polymorphic-component').CreateStyled;
    /**
     * The base <View /> component.
     */
    View: import('react').ComponentType;
    /**
     * The component (Provider) used to adjust design tokens.
     */
    ThemeProvider: import('react').ComponentType<WrappedThemeProviderProps>;
    rootStore: import('../css-custom-properties').RootStore;
};
export type CreateStyleSystemOptions<TConfig extends Record<string, React.ReactText>, TDarkConfig extends Record<string, React.ReactText>, THCConfig extends Record<string, React.ReactText>, TDarkHCConfig extends Record<string, React.ReactText>, TGeneratedTokens extends string> = {
    baseStyles: import('create-emotion').ObjectInterpolation<any>;
    config: TConfig;
    darkModeConfig: TDarkConfig;
    highContrastModeConfig: THCConfig;
    darkHighContrastModeConfig: TDarkHCConfig;
    compilerOptions?: (import("create-emotion").Options & {
        key?: string | undefined;
        specificityLevel?: number | undefined;
        rootStore: import("../css-custom-properties").RootStore;
    }) | undefined;
};
import React from "react";
//# sourceMappingURL=create-style-system.d.ts.map