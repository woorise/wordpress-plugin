import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { clamp, repeat } from 'lodash';
var seen = new WeakSet();
var seenMatch = new Set();
var defaultOptions = {
  key: 'wp-css',
  level: 7
};
/**
 * @typedef ExtraSpecificityPluginOptions
 * @property {string} [key='wp-css']
 * @property {number} [level=7]
 */

/**
 * Custom stylis plugin that increases the scope of generated selectors.
 * The default compounding "level" is 7.
 *
 * For example, a selector of `.css-ah12df` would result in a final selector
 * of `.css-ah12df.css-ah12df.css-ah12df.css-ah12df.css-ah12df.css-ah12df.css-ah12df`.
 *
 * @param {ExtraSpecificityPluginOptions} options Options to adjust the plugin
 */

function stylisExtraSpecificityPlugin(options) {
  if (options === void 0) {
    options = defaultOptions;
  }

  var _defaultOptions$optio = _objectSpread(_objectSpread({}, defaultOptions), options),
      key = _defaultOptions$optio.key,
      level = _defaultOptions$optio.level;

  var repeatLevel = clamp(level, 0, 20);
  return function (
  /** @type {number} */
  _,
  /** @type {string} */
  __,
  /** @type {string[]} */
  selectors) {
    if (seen.has(selectors)) return;
    seen.add(selectors);
    var regex = new RegExp("." + key + "-[\\w|\\d]*", 'g');

    for (var i = 0; i < selectors.length; i++) {
      var item = selectors[i];

      var _ref = item.match(regex) || [],
          _ref2 = _slicedToArray(_ref, 1),
          match = _ref2[0];

      if (match) {
        if (seenMatch.has(match)) return;
        seenMatch.add(match);
        item = item.replace(new RegExp(match, 'g'), match).replace(match, repeat(match, repeatLevel));
        selectors[i] = item;
      }
    }
  };
}

export default stylisExtraSpecificityPlugin;