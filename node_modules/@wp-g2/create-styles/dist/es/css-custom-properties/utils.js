import { repeat } from 'lodash';
export var VAR_REG_EXP = new RegExp(/var\(.*?\)[ ) ]*/, 'g');
/**
 * Checks to see if a CSS declaration rule is a CSS variable (e.g. --font: 14px)
 *
 * @param {string} declaration  A CSS declaration rule.
 * @returns {boolean} Result of whether declaration is a CSS variable.
 */

export function isCustomProperty(declaration) {
  return declaration.indexOf('--') === 0;
}
/**
 * Checks to see if a CSS declaration rule uses var().
 *
 * @param {string} declaration  A CSS declaration rule.
 * @returns {boolean} Result of whether declaration contains a CSS variable.
 */

export function hasVariable(declaration) {
  return declaration == null ? void 0 : declaration.includes == null ? void 0 : declaration.includes('var(');
}
/**
 * Appends or trims parens from a value.
 *
 * @param {string} value Value to sanitize.
 * @returns {string} The sanitized value
 */

export function sanitizeParens(value) {
  var _value$match, _value$match2, _result;

  var parenStartCount = ((_value$match = value.match(/\(/g)) == null ? void 0 : _value$match.length) || 0;
  var parenEndCount = ((_value$match2 = value.match(/\)/g)) == null ? void 0 : _value$match2.length) || 0;
  var result;

  if (parenStartCount > parenEndCount) {
    // We need to append ) to the end if there are any missing.
    var append = repeat(')', parenStartCount - parenEndCount);
    result = "" + value + append;
  } else {
    // Otherwise, we need to trim the extra parens at the end.
    var trimRegExp = new RegExp("((\\)){" + (parenEndCount - parenStartCount) + "})$", 'gi');
    result = value.replace(trimRegExp, '');
  }

  return (_result = result) == null ? void 0 : _result.trim();
}