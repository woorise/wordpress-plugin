import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { ThemeProvider as BaseThemeProvider } from '../components/theme-provider';
import { createCompiler } from '../create-compiler';
import { createRootStore } from '../css-custom-properties';
import { createCoreElement } from './create-core-element';
import { createCoreElements } from './create-core-elements';
import { createStyledComponents } from './create-styled-components';
import { generateTheme } from './generate-theme';
import { createToken, DEFAULT_STYLE_SYSTEM_OPTIONS } from './utils';
var defaultOptions = DEFAULT_STYLE_SYSTEM_OPTIONS;
/** @typedef {Omit<import('../components/theme-provider/theme-provider').ThemeProviderProps, 'compiler' | 'globalStyles'>} WrappedThemeProviderProps */

/**
 * @template {Record<string, string | number>} TConfig
 * @template {Record<string, string | number>} TDarkConfig
 * @template {Record<string, string | number>} THCConfig
 * @template {Record<string, string | number>} TDarkHCConfig
 * @template {string} TGeneratedTokens
 * @typedef CreateStyleSystemObjects
 * @property {import('./polymorphic-component').CoreElements} core A set of coreElements.
 * @property {import('../create-compiler').Compiler} compiler The Style system compiler (a custom Emotion instance).
 * @property {(tagName: import('react').ComponentType) => ReturnType<createCoreElement>} createCoreElement A function to create a coreElement (with settings from the Style system).
 * @property {import('../create-compiler').Compiler['css']} css A function to compile CSS styles.
 * @property {import('../create-compiler').Compiler['cx']} cx A function to resolve + combine classNames.
 * @property {(tokenName: string) => string} createToken A function to generate a design token (CSS variable) used by the system.
 * @property {(value: keyof (TConfig & TDarkConfig & THCConfig & TDarkHCConfig) | TGeneratedTokens) => string} get The primary function to retrieve Style system variables.
 * @property {import('./polymorphic-component').CreateStyled} styled A set of styled components.
 * @property {import('react').ComponentType} View The base <View /> component.
 * @property {import('react').ComponentType<WrappedThemeProviderProps>} ThemeProvider The component (Provider) used to adjust design tokens.
 * @property {import('../css-custom-properties').RootStore} rootStore
 */

/**
 * @template {Record<string, string | number>} TConfig
 * @template {Record<string, string | number>} TDarkConfig
 * @template {Record<string, string | number>} THCConfig
 * @template {Record<string, string | number>} TDarkHCConfig
 * @template {string} TGeneratedTokens
 * @typedef CreateStyleSystemOptions
 * @property {import('create-emotion').ObjectInterpolation<any>} baseStyles
 * @property {TConfig} config
 * @property {TDarkConfig} darkModeConfig
 * @property {THCConfig} highContrastModeConfig
 * @property {TDarkHCConfig} darkHighContrastModeConfig
 * @property {import('../create-compiler').CreateCompilerOptions} [compilerOptions]

 */

/**
 * Creates a Style system using a set of baseStyles and configs.
 *
 * @example
 * ```js
 * const baseStyles = { background: 'blue' };
 * const blueStyleSystem = createStyleSystem({ baseStyles });
 * ```
 *
 * @template {Record<string, string | number>} TConfig
 * @template {Record<string, string | number>} TDarkConfig
 * @template {Record<string, string | number>} THCConfig
 * @template {Record<string, string | number>} TDarkHCConfig
 * @template {string} TGeneratedTokens
 * @param {CreateStyleSystemOptions<TConfig, TDarkConfig, THCConfig, TDarkHCConfig, TGeneratedTokens>} options Options to create a Style system with.
 * @returns {CreateStyleSystemObjects<TConfig, TDarkConfig, THCConfig, TDarkHCConfig, TGeneratedTokens>} A collection of functions and elements from the generated Style system.
 */

export function createStyleSystem(options) {
  if (options === void 0) {
    options = defaultOptions;
  }

  var _defaultOptions$optio = _objectSpread(_objectSpread({}, defaultOptions), options),
      baseStyles = _defaultOptions$optio.baseStyles,
      compilerOptions = _defaultOptions$optio.compilerOptions,
      config = _defaultOptions$optio.config,
      darkHighContrastModeConfig = _defaultOptions$optio.darkHighContrastModeConfig,
      darkModeConfig = _defaultOptions$optio.darkModeConfig,
      highContrastModeConfig = _defaultOptions$optio.highContrastModeConfig;

  var globalStyles = generateTheme({
    config: config,
    darkHighContrastModeConfig: darkHighContrastModeConfig,
    darkModeConfig: darkModeConfig,
    highContrastModeConfig: highContrastModeConfig
  });
  var rootStore = createRootStore(globalStyles.globalVariables);
  rootStore.setState(globalStyles.globalVariables);
  /**
   * Compiler (Custom Emotion instance).
   */

  var compiler = createCompiler(_objectSpread(_objectSpread({}, compilerOptions), {}, {
    rootStore: rootStore
  }));
  var css = compiler.css,
      cx = compiler.cx;
  /**
   * Core elements.
   *
   * @example
   * ```jsx
   * <core.div />
   * ```
   */

  var core = createCoreElements({
    baseStyles: baseStyles,
    compiler: compiler,
    globalStyles: globalStyles
  });
  /**
   * Styled components.
   *
   * @example
   * ```jsx
   * const StyledDiv = styled.div``
   *
   * <StyledDiv />
   * ```
   */

  var styled = createStyledComponents({
    compiler: compiler,
    core: core
  });
  /**
   * Export prebound createCoreElement factory.
   */

  var View = core.div;
  /**
   * An enhanced (base) ThemeProvider with injectGlobal from the custom Emotion instance.
   */

  return {
    compiler: compiler,
    core: core,
    createCoreElement: function _createCoreElement(tagName) {
      return createCoreElement(tagName, {
        baseStyles: baseStyles,
        compiler: compiler,
        globalStyles: globalStyles
      });
    },
    createToken: createToken,
    css: css,
    cx: cx,
    get: function get(
    /** @type {keyof TConfig | keyof TDarkConfig | keyof THCConfig | keyof TDarkHCConfig | TGeneratedTokens} */
    key) {
      return "var(" + createToken(key.toString()) + ")";
    },
    styled: styled,
    View: View,
    ThemeProvider: function ThemeProvider(
    /** @type {WrappedThemeProviderProps} */
    props) {
      return /*#__PURE__*/React.createElement(BaseThemeProvider, Object.assign({}, props, {
        compiler: compiler,
        globalStyles: globalStyles
      }));
    },
    rootStore: rootStore
  };
}
export default createStyleSystem;