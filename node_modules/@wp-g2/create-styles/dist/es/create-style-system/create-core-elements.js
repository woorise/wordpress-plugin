function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { createCoreElement } from './create-core-element';
import { tags } from './tags';
/**
 * @typedef CreateCoreElementProps
 * @property {import('create-emotion').ObjectInterpolation<any>} baseStyles Base styles for the coreElements.
 * @property {import('../create-compiler').Compiler} compiler The injectGlobal from the Style system's compiler.
 * @property {import('./generate-theme').GenerateThemeResults} globalStyles Global styles for the coreElements.
 */

/**
 * Generates a set of coreElements based on React supported HTML tags.
 *
 * @param {CreateCoreElementProps} props Properties to create coreElements with.
 * @returns {import('./polymorphic-component').CoreElements} A set of coreElements.
 */

export function createCoreElements(_ref) {
  var baseStyles = _ref.baseStyles,
      compiler = _ref.compiler,
      globalStyles = _ref.globalStyles;

  /** @type {import('./polymorphic-component').CoreElements} */
  // @ts-ignore We fill in the missing properties in the loop below
  var core = {};

  var _createStyledElement = function (
  /** @type {keyof JSX.IntrinsicElements} */
  tagName) {
    return createCoreElement(tagName, {
      baseStyles: baseStyles,
      compiler: compiler,
      globalStyles: globalStyles
    });
  };

  for (var _iterator = _createForOfIteratorHelperLoose(tags), _step; !(_step = _iterator()).done;) {
    var tagName = _step.value;
    core[tagName] = _createStyledElement(tagName);
  }

  return core;
}