import { repeat } from 'lodash';
import { DARK_HIGH_CONTRAST_MODE_MODE_ATTR, DARK_MODE_ATTR, HIGH_CONTRAST_MODE_MODE_ATTR, MODE_SPECIFICITY_COMPOUND_LEVEL } from './constants';
import { transformValuesToReferences, transformValuesToVariables, transformValuesToVariablesString } from './utils';
/**
 * @typedef GenerateThemeProps
 * @property {import('./utils').StyleConfigValues} config Default theme config.
 * @property {import('./utils').StyleConfigValues} darkModeConfig Dark mode theme config.
 * @property {import('./utils').StyleConfigValues} highContrastModeConfig High contrast mode theme config.
 * @property {import('./utils').StyleConfigValues} darkHighContrastModeConfig Dark high contrast mode theme config.
 */

/**
 * @typedef GenerateThemeResults
 * @property {import('./utils').StyleConfig} theme A set of theme style references.
 * @property {import('./utils').StyleConfig} globalVariables A set of global variables.
 * @property {string} globalCSSVariables The compiled CSS string for global variables.
 * @property {string} darkModeCSSVariables The compiled CSS string for global dark variables.
 * @property {string} highContrastModeCSSVariables The compiled CSS string for global high contrast variables.
 * @property {string} darkHighContrastModeCSSVariables The compiled CSS string for global dark high contrast variables.
 */

/**
 * Generates theme references and compiles CSS variables to be used by the Style System.
 *
 * @param {GenerateThemeProps} props Props to generate a Style system theme with.
 * @returns {GenerateThemeResults} A set of variables and content for the System.
 */

export function generateTheme(_ref) {
  var _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      _ref$darkModeConfig = _ref.darkModeConfig,
      darkModeConfig = _ref$darkModeConfig === void 0 ? {} : _ref$darkModeConfig,
      _ref$highContrastMode = _ref.highContrastModeConfig,
      highContrastModeConfig = _ref$highContrastMode === void 0 ? {} : _ref$highContrastMode,
      _ref$darkHighContrast = _ref.darkHighContrastModeConfig,
      darkHighContrastModeConfig = _ref$darkHighContrast === void 0 ? {} : _ref$darkHighContrast;
  var theme = transformValuesToReferences(config);
  var globalVariables = transformValuesToVariables(config);
  var globalCSSVariables = transformValuesToVariablesString(':root', config);
  var darkModeCSSVariables = transformValuesToVariablesString(repeat(DARK_MODE_ATTR, MODE_SPECIFICITY_COMPOUND_LEVEL), darkModeConfig);
  var highContrastModeCSSVariables = transformValuesToVariablesString(repeat(HIGH_CONTRAST_MODE_MODE_ATTR, MODE_SPECIFICITY_COMPOUND_LEVEL), highContrastModeConfig);
  var darkHighContrastModeCSSVariables = transformValuesToVariablesString(repeat(DARK_HIGH_CONTRAST_MODE_MODE_ATTR, MODE_SPECIFICITY_COMPOUND_LEVEL), darkHighContrastModeConfig);
  return {
    theme: theme,
    globalVariables: globalVariables,
    globalCSSVariables: globalCSSVariables,
    darkModeCSSVariables: darkModeCSSVariables,
    highContrastModeCSSVariables: highContrastModeCSSVariables,
    darkHighContrastModeCSSVariables: darkHighContrastModeCSSVariables
  };
}