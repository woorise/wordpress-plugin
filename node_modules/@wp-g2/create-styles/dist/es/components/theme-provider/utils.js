import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/esm/taggedTemplateLiteralLoose";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["", ""]);

  _templateObject = function () {
    return data;
  };

  return data;
}

import { isShallowEqualObjects } from '@wordpress/is-shallow-equal';
import { is, useIsomorphicLayoutEffect } from '@wp-g2/utils';
import { useEffect, useRef } from 'react';
import { transformValuesToVariablesString } from '../../create-style-system/utils';
import { useReducedMotion } from '../../hooks';
import useThemeStylesStore, { setTheme } from './use-theme-styles-store';
/**
 * @typedef UseColorBlindModeProps
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {boolean} isColorBlind Determines if color-blind-mode styles should be rendered.
 * @property {import('react').RefObject<HTMLElement | undefined>} ref React ref.
 */

/**
 * Hook that sets the Style system's color-blind mode.
 * @param {UseColorBlindModeProps} props Props for the hook.
 */

export function useColorBlindMode(_ref) {
  var isColorBlind = _ref.isColorBlind,
      _ref$isGlobal = _ref.isGlobal,
      isGlobal = _ref$isGlobal === void 0 ? true : _ref$isGlobal,
      ref = _ref.ref;
  useEffect(function () {
    if (!is.defined(isColorBlind)) return;
    var target = document.documentElement;

    if (!isGlobal && ref.current) {
      target = ref.current;
    }

    if (isColorBlind) {
      target.setAttribute('data-system-ui-color-blind-mode', 'true');
    } else {
      target.setAttribute('data-system-ui-color-blind-mode', 'false');
    }
  }, [isGlobal, isColorBlind, ref]);
}
/**
 * @typedef UseDarkModeProps
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {boolean} isDark Determines if dark-mode styles should be rendered.
 * @property {import('react').RefObject<HTMLElement | undefined>} ref React ref.
 */

/**
 * Hook that sets the Style system's dark mode.
 * @param {UseDarkModeProps} props Props for the hook.
 */

export function useDarkMode(_ref2) {
  var isDark = _ref2.isDark,
      _ref2$isGlobal = _ref2.isGlobal,
      isGlobal = _ref2$isGlobal === void 0 ? true : _ref2$isGlobal,
      ref = _ref2.ref;
  useEffect(function () {
    if (!is.defined(isDark)) return;
    var target = document.documentElement;

    if (!isGlobal && ref.current) {
      target = ref.current;
    }

    if (isDark) {
      target.setAttribute('data-system-ui-mode', 'dark');
    } else {
      target.setAttribute('data-system-ui-mode', 'light');
    }
  }, [isGlobal, isDark, ref]);
}
/**
 * @typedef UseHighContrastMode
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {boolean} isHighContrast Determines if high-contrast styles should be rendered.
 * @property {import('react').RefObject<HTMLElement | undefined>} ref React ref.
 */

/**
 * Hook that sets the Style system's high-contrast mode.
 * @param {UseHighContrastMode} props Props for the hook.
 */

export function useHighContrastMode(_ref3) {
  var _ref3$isGlobal = _ref3.isGlobal,
      isGlobal = _ref3$isGlobal === void 0 ? true : _ref3$isGlobal,
      isHighContrast = _ref3.isHighContrast,
      ref = _ref3.ref;
  useEffect(function () {
    if (!is.defined(isHighContrast)) return;
    var target = document.documentElement;

    if (!isGlobal && ref.current) {
      target = ref.current;
    }

    if (isHighContrast) {
      target.setAttribute('data-system-ui-contrast-mode', 'high');
    } else {
      target.setAttribute('data-system-ui-contrast-mode', 'normal');
    }
  }, [isGlobal, isHighContrast, ref]);
}
/**
 * @typedef UseReducedMotionProps
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {boolean} isReducedMotion Determines if reduced-motion styles should be rendered.
 * @property {import('react').RefObject<HTMLElement | undefined>} ref React ref.
 */

/**
 * Hook that sets the Style system's reduced-motion mode.
 * @param {UseReducedMotionProps} props Props for the hook.
 */

export function useReducedMotionMode(_ref4) {
  var _ref4$isGlobal = _ref4.isGlobal,
      isGlobal = _ref4$isGlobal === void 0 ? true : _ref4$isGlobal,
      isReducedMotion = _ref4.isReducedMotion,
      ref = _ref4.ref;

  var _useReducedMotion = useReducedMotion(),
      _useReducedMotion2 = _slicedToArray(_useReducedMotion, 2),
      setIsReducedMotion = _useReducedMotion2[1];

  useEffect(function () {
    if (isGlobal) {
      setIsReducedMotion(!!isReducedMotion);
    }
  }, [isGlobal, isReducedMotion, setIsReducedMotion]);
  useEffect(function () {
    if (!is.defined(isReducedMotion)) return;
    var target = document.documentElement;

    if (!isGlobal && ref.current) {
      target = ref.current;
    }

    if (isReducedMotion) {
      target.setAttribute('data-system-ui-reduced-motion-mode', 'true');
    } else {
      target.setAttribute('data-system-ui-reduced-motion-mode', 'false');
    }
  }, [isGlobal, isReducedMotion, ref]);
}
/**
 * @typedef UseThemeStyles
 * @property {import('create-emotion').Emotion['injectGlobal']} injectGlobal
 * @property {boolean} isGlobal Determines if the theme styles are rendered globally or scoped locally.
 * @property {Record<string, string>} theme Custom theme values.
 * @property {string} selector
 */

/**
 * Hook that sets the Style system's theme.
 * @param {UseThemeStyles} props Props for the hook.
 * @return {string}
 */

export function useThemeStyles(_ref5) {
  var injectGlobal = _ref5.injectGlobal,
      _ref5$isGlobal = _ref5.isGlobal,
      isGlobal = _ref5$isGlobal === void 0 ? true : _ref5$isGlobal,
      _ref5$theme = _ref5.theme,
      theme = _ref5$theme === void 0 ? {} : _ref5$theme,
      _ref5$selector = _ref5.selector,
      selector = _ref5$selector === void 0 ? ':root' : _ref5$selector;

  var _useThemeStylesStore = useThemeStylesStore(),
      _useThemeStylesStore2 = _slicedToArray(_useThemeStylesStore, 2),
      themeStyles = _useThemeStylesStore2[0].theme,
      dispatch = _useThemeStylesStore2[1];
  /**
   * Used to track/compare changes for theme prop changes.
   */

  /** @type {import('react').MutableRefObject<object | undefined>} */


  var themeRef = useRef();
  /**
   * Work-around to inject a global theme style. This makes it compatible with
   * SSR solutions, as injectGlobal is understood by Emotion's SSR flow.
   */

  var didInjectGlobalStyles = useRef(false);

  if (!didInjectGlobalStyles.current && isGlobal && theme) {
    if (typeof injectGlobal === 'function') {
      try {
        var globalStyles = transformValuesToVariablesString(selector, theme, isGlobal);
        injectGlobal(_templateObject(), globalStyles);
      } catch (err) {// eslint-disable-next-line
      }
    }

    didInjectGlobalStyles.current = true;
  }

  useIsomorphicLayoutEffect(function () {
    /**
     * We only want to update + set the theme if there's a change.
     * Since themes (potentially) be nested, we need to do a shallowEqual check.
     */
    if (themeRef.current && theme && isShallowEqualObjects(themeRef.current, theme)) return;
    themeRef.current = theme;
    /**
     * This compiles the theme config (object) into CSS variables that
     * the Style system understands and can be retrieved using the get() function.
     */

    var styleNode = getStyleNode();
    var nextThemeHtml = transformValuesToVariablesString(selector, theme, isGlobal);

    if (isGlobal) {
      /**
       * If isGlobal is preferred, we need to set the custom CSS variables onto
       * the root element.
       */
      if (styleNode) {
        styleNode.innerHTML = nextThemeHtml;
      }
    } else {
      /**
       * Otherwise, we can set it to the themeStyles state, which will be
       * rendered as custom properties on the ThemeProvider (HTMLDivElement).
       */
      dispatch(setTheme(nextThemeHtml));
    }
  }, [injectGlobal, isGlobal, dispatch, theme]);
  return themeStyles;
}

function getStyleNode() {
  var id = 'StyleSystemThemeProviderStyleNode';
  var node = document.getElementById(id);
  if (node) return node;
  node = document.createElement('style');
  node.id = id;
  node.setAttribute('data-g2-theme-provider', 'theme');
  var headNode = document.querySelector('head');

  if (headNode) {
    headNode.appendChild(node);
  }

  return node;
}