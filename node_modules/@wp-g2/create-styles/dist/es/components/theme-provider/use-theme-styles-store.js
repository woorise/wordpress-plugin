import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { useReducer } from 'react';
/** @typedef {{ type: 'SET_THEME', theme: string }} SetThemeAction */

/**
 * @param {string} theme
 * @return {SetThemeAction}
 */

export var setTheme = function (theme) {
  return {
    type: 'SET_THEME',
    theme: theme
  };
};
/**
 * @param {{ theme: string }} state
 * @param {SetThemeAction} action
 */

var reducer = function (state, action) {
  switch (action.type) {
    case 'SET_THEME':
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          theme: action.theme
        });
      }

    default:
      {
        return state;
      }
  }
};

var useThemeStylesStore = function (initialTheme) {
  if (initialTheme === void 0) {
    initialTheme = '';
  }

  return useReducer(reducer, {
    theme: initialTheme
  });
};

export default useThemeStylesStore;