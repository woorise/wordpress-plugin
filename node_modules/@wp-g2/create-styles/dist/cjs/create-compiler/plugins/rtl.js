"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRtl = getRtl;
exports.default = exports.STYLIS_PROPERTY_CONTEXT = void 0;

var _rtlcss = _interopRequireDefault(require("rtlcss"));

var _utils = require("./utils");

/**
 * Fork of:
 * https://github.com/styled-components/stylis-plugin-rtl
 */
function getRtl() {
  if (typeof window !== 'undefined') {
    var _window, _window$document;

    return ((_window = window) == null ? void 0 : (_window$document = _window.document) == null ? void 0 : _window$document.dir) === 'rtl';
  }

  return false;
} // We need to apply cssjanus as early as possible to capture the noflip directives if used
// (they are not present at the PROPERTY, SELECTOR_BLOCK, or POST_PROCESS steps)


var STYLIS_PROPERTY_CONTEXT = _utils.STYLIS_CONTEXTS.PREPARATION;
/**
 * Custom stylis plugin that flips applicable styles from LTR to RTL based
 * on the <html dir="" /> property. On render, if dir="rtl", the styles will render
 * as RTL flipped.
 *
 * It's currently not possible to dynamically flip between LTR and RTL styles.
 * The LTR/RTL detection happens only once on render.
 *
 * This is something that can be improved in future.
 *
 * @param {number} context
 * @param {string} content
 * @return {string | undefined}
 */

exports.STYLIS_PROPERTY_CONTEXT = STYLIS_PROPERTY_CONTEXT;

function stylisRTLPlugin(context, content) {
  if (context === STYLIS_PROPERTY_CONTEXT) {
    // pass four undefineds to let TS know which overload we're using
    return getRtl() ? _rtlcss.default.process(content, undefined, undefined, undefined) : undefined;
  }

  return undefined;
}

var _default = stylisRTLPlugin;
exports.default = _default;