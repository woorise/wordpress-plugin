"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCSS = createCSS;

var _utils = require("@wp-g2/utils");

var _responsive = require("./responsive");

/**
 * @param {CSS} compile
 * @return {CSS}
 */
function createCSS(compile) {
  /**
   * An enhanced version of the compiler's (Emotion) CSS function.
   * This enhanced CSS supports dynamic responsive (breakpoint-based) styles if
   * the value is an array of values.
   *
   * @example
   * ```js
   * // The following will render a CSS rule where the widths will be:
   * // 100px for mobile
   * // 200px for tablet
   * // 500px for desktop
   * css({
   * 		width: [100, 200, 500]
   * })
   * ```
   * @param {Parameters<CSS>} args
   * @returns {ReturnType<CSS>} The compiled CSS className associated with the styles.
   */
  // @ts-ignore No amount of zhuzhing will convince TypeScript that a function with the parameters and return type for CSS is in fact the same type
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var arg = args[0],
        rest = args.slice(1);

    if (_utils.is.objectInterpolation(arg)) {
      return compile((0, _responsive.responsive)(arg));
    }

    if (Array.isArray(arg)) {
      for (var i = 0, len = arg.length; i < len; i++) {
        var n = arg[i];

        if (_utils.is.objectInterpolation(n)) {
          arg[i] = (0, _responsive.responsive)(n);
        }
      }

      return compile.apply(void 0, [arg].concat(rest));
    }

    return compile.apply(void 0, args);
  };
}
/** @typedef {import('create-emotion').Emotion['css']} CSS */