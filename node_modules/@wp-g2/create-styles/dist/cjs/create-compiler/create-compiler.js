"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCompiler = createCompiler;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("@wp-g2/utils");

var _createEmotion = _interopRequireDefault(require("create-emotion"));

var _mitt = _interopRequireDefault(require("mitt"));

var _cssCustomProperties = require("../css-custom-properties");

var _createCss = require("./create-css");

var _plugins = require("./plugins");

var _utils2 = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultOptions = {
  key: 'css',
  specificityLevel: 7,
  rootStore: new _cssCustomProperties.RootStore()
};
/**
 * @typedef {import('create-emotion').Emotion & {
 *	breakpoints: typeof breakpoints,
 *	__events: import('mitt').Emitter,
 *  generateInterpolationName(): string,
 * }} Compiler
 */

/**
 * @typedef {import('create-emotion').Options & {
 *	key?: string,
 *	specificityLevel?: number,
 *	rootStore: import('../css-custom-properties').RootStore
 * }} CreateCompilerOptions
 */

/**
 * @param {CreateCompilerOptions} options
 * @return {Compiler}
 */

function createCompiler(options) {
  var mergedOptions = _objectSpread(_objectSpread({}, defaultOptions), options);

  var key = mergedOptions.key,
      rootStore = mergedOptions.rootStore,
      specificityLevel = mergedOptions.specificityLevel;
  var defaultPlugins = (0, _plugins.createPlugins)({
    key: key,
    specificityLevel: specificityLevel,
    rootStore: rootStore
  });

  if (options.stylisPlugins) {
    if (Array.isArray(options.stylisPlugins)) {
      mergedOptions.stylisPlugins = [].concat(defaultPlugins, options.stylisPlugins);
    } else if (_utils.is.defined(options.stylisPlugins)) {
      // just a single plugin was passed in, as is allowed by emotion
      mergedOptions.stylisPlugins = [].concat(defaultPlugins, [options.stylisPlugins]);
    } else {
      mergedOptions.stylisPlugins = defaultPlugins;
    }
  } else {
    mergedOptions.stylisPlugins = defaultPlugins;
  }
  /**
   * We're creating a custom Emotion instance to ensure that the style system
   * does not conflict with (potential) existing Emotion instances.
   *
   * We're also able to provide createEmotion with our custom Stylis plugins.
   */


  var customEmotionInstance = _objectSpread(_objectSpread({}, (0, _createEmotion.default)(mergedOptions)), {}, {
    /**
     * Exposing the breakpoints used in the internal Style system.
     */
    breakpoints: _utils2.breakpoints,

    /**
     * An internal custom event emitter (pub/sub) for Emotion.
     * This is currently used in <StyleFrameProvider /> from `@wp-g2/styled`
     * to subscribe to and sync style injection.
     */
    __events: (0, _mitt.default)(),
    generateInterpolationName: _utils2.generateInterpolationName
  });
  /**
   * Enhance the base css function from Emotion to add features like responsive
   * value handling and compiling an Array of css() calls.
   */


  var css = customEmotionInstance.css;
  customEmotionInstance.css = (0, _createCss.createCSS)(css);
  /**
   * Modify the sheet.insert method to emit a `sheet.insert` event
   * within the internal custom event emitter.
   */

  var __insert = customEmotionInstance.sheet.insert;

  customEmotionInstance.sheet.insert = function () {
    var _customEmotionInstanc;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    __insert.apply(customEmotionInstance.sheet, [].concat(args));

    (_customEmotionInstanc = customEmotionInstance.__events).emit.apply(_customEmotionInstanc, ['sheet.insert'].concat(args));
  };

  return customEmotionInstance;
}