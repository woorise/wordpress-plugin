"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHydrateGlobalStyles = useHydrateGlobalStyles;

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteralLoose"));

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["\n\t\t\t", ";\n\t\t\t", ";\n\t\t\t", ";\n\t\t\t", ";\n\t\t"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

var __INTERNAL_STATE__ = {
  didInjectGlobal: false
};
/**
 * @typedef UseHydrateGlobalStylesProps
 * @property {import('create-emotion').Emotion['injectGlobal']} injectGlobal injectGlobal function from the compiler (Emotion).
 * @property {import('../create-style-system/generate-theme').GenerateThemeResults} globalStyles Global style values to be injected.
 */

/**
 * Renders configs (global styles) from the Style system into the DOM on
 * initial render.
 *
 * This is a very important custom hook for the Style system.
 * This hook injects the global styles (theme configs, dark mode configs, etc...)
 * from the Style system into the DOM. It does so seamlessly (once) on initial
 * render, enabling the styled coreElements, components, and CSS compiler
 * to work without the need for Context Providers/Consumers.
 *
 * @param {UseHydrateGlobalStylesProps} props Props for the hook.
 */

function useHydrateGlobalStyles(_ref) {
  var globalStyles = _ref.globalStyles,
      injectGlobal = _ref.injectGlobal;
  if (__INTERNAL_STATE__.didInjectGlobal) return;
  var darkHighContrastModeCSSVariables = globalStyles.darkHighContrastModeCSSVariables,
      darkModeCSSVariables = globalStyles.darkModeCSSVariables,
      globalCSSVariables = globalStyles.globalCSSVariables,
      highContrastModeCSSVariables = globalStyles.highContrastModeCSSVariables;
  /**
   * Using the compiler's (Emotion) injectGlobal function.
   */

  if (injectGlobal) {
    injectGlobal(_templateObject(), globalCSSVariables, darkModeCSSVariables, highContrastModeCSSVariables, darkHighContrastModeCSSVariables);
    /**
     * Ensure that this only happens once with a singleton state.
     */

    __INTERNAL_STATE__.didInjectGlobal = true;
  }
}