"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCoreElement = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteralLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isPropValid = _interopRequireDefault(require("@emotion/is-prop-valid"));

var _utils = require("@wp-g2/utils");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../hooks");

var _constants = require("./constants");

var _utils2 = require("./utils");

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["\n\t\t\t@media (prefers-reduced-motion) {\n\t\t\t\ttransition: none !important;\n\t\t\t}\n\t\t\t", " & {\n\t\t\t\ttransition: none !important;\n\t\t\t}\n\t\t"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var shouldForwardProp = _isPropValid.default;
var defaultOptions = _utils2.DEFAULT_STYLE_SYSTEM_OPTIONS;
/**
 * @typedef CreateCoreElementOptions
 * @property {import('create-emotion').ObjectInterpolation<any>} baseStyles The baseStyles from the Style system.
 * @property {import('../create-compiler').Compiler} compiler The injectGlobal from the Style system's compiler.
 * @property {import('./generate-theme').GenerateThemeResults} globalStyles The globalStyles from the Style system.
 */

/**
 * Creates the core styled elements for the Style system. These elements are
 * an in-between of Emotion's <div css="" /> solution and a styled.div``
 * solution.
 *
 * createCoreElement is a super light-weight higher-order wrapper that
 * enhances base elements (like `div`, `input`, or even Components) with
 * features provided by the Style system, such as direct CSS compiling via
 * the `css` prop.
 *
 * A styled element also has built-in baseStyles (which can be adjusted using
 * the createStyleSystem factory).
 *
 * @example
 * ```jsx
 * const alwaysBlueDiv = createCoreElement('div', { baseStyles: { background: 'blue' }})
 * ```
 *
 * @template {keyof JSX.IntrinsicElements} TTagName
 * @param {TTagName} tagName The HTMLElement/React.Component to connect with the Style system.
 * @param {CreateCoreElementOptions} options Options to custom coreElement styles.
 * @returns {import('./polymorphic-component').PolymorphicComponent<TTagName, {}>} The Style system wrapped HTMLElement/React.Component.
 */

var createCoreElement = function (tagName, options) {
  var _defaultOptions$optio = _objectSpread(_objectSpread({}, defaultOptions), options),
      baseStyles = _defaultOptions$optio.baseStyles,
      compiler = _defaultOptions$optio.compiler,
      globalStyles = _defaultOptions$optio.globalStyles;

  var css = compiler.css,
      cx = compiler.cx,
      injectGlobal = compiler.injectGlobal;
  /**
   * Default baseStyles for the system.
   */

  var styles = {
    Base: css({
      // Automatic box-sizing resets.
      boxSizing: 'border-box'
    }),
    // Enforced reduced-motion preferred styles.
    reduceMotion: css(_templateObject(), _constants.REDUCED_MOTION_MODE_ATTR)
  };
  var compiledBaseStyles = css(baseStyles);
  var interpolationClassName = (0, _utils2.getInterpolatedClassName)(tagName);
  /**
   * @param {any} props
   * @param {import('react').Ref<any>} ref
   */

  var SystemComponent = /*#__PURE__*/(0, _react.forwardRef)(function render(_ref, ref) {
    var cssProp = _ref.css,
        as = _ref.as,
        children = _ref.children,
        classNameProp = _ref.className,
        forwardedRef = _ref.forwardedRef,
        props = (0, _objectWithoutProperties2.default)(_ref, ["css", "as", "children", "className", "forwardedRef"]);

    /**
     * useHydrateGlobalStyles an incredibly important hook, and is vital
     * to the Style system. It automatically injects the variables Style
     * system configs (configs, dark mode, etc...) on first-render.
     *
     * This way avoids....
     *
     * 1. The need to wrap coreElements / styled components in any <Provider />.
     * 2. The need to use Context connectors (e.g. for ThemeProvider), which is HUGE for performance.
     */
    // eslint-disable-next-line
    (0, _hooks.useHydrateGlobalStyles)({
      globalStyles: globalStyles,
      injectGlobal: injectGlobal
    });
    var element = as || tagName;
    var className = typeof classNameProp !== 'string' ? cx(classNameProp) : classNameProp;
    /**
     * Compiles all of the custom styles into classNames before binding it
     * to the HTMLElement / React.Component.
     */

    var classes = cx(styles.Base, styles.reduceMotion, compiledBaseStyles, className, cssProp && css(cssProp), interpolationClassName);
    /**
     * A conventient feature to (attempt to) filter out non HTML-friendly
     * props for HTMLElements.
     */

    /** @type {Record<string, any>} */
    var newProps = {};

    for (var key in props) {
      if (typeof element === 'string') {
        if (shouldForwardProp(key)) {
          newProps[key] = props[key];
        }
      } else {
        newProps[key] = props[key];
      }
    } // eslint-disable-next-line


    var refs = _react.default.useMemo(function () {
      return forwardedRef ? (0, _utils.mergeRefs)([forwardedRef, ref]) : ref;
    }, [forwardedRef, ref]);

    return /*#__PURE__*/_react.default.createElement(element, _objectSpread({
      className: classes,
      ref: refs
    }, newProps), children);
  });

  if (process.env.NODE_ENV === 'development') {
    var displayName = typeof tagName === 'string' ? tagName : 'Component';
    SystemComponent.displayName = displayName;
  } // @ts-ignore internal property


  SystemComponent[_constants.INTERPOLATION_CLASS_NAME] = interpolationClassName; // @ts-ignore

  return SystemComponent;
};

exports.createCoreElement = createCoreElement;