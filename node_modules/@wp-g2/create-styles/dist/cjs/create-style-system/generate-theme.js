"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateTheme = generateTheme;

var _lodash = require("lodash");

var _constants = require("./constants");

var _utils = require("./utils");

/**
 * @typedef GenerateThemeProps
 * @property {import('./utils').StyleConfigValues} config Default theme config.
 * @property {import('./utils').StyleConfigValues} darkModeConfig Dark mode theme config.
 * @property {import('./utils').StyleConfigValues} highContrastModeConfig High contrast mode theme config.
 * @property {import('./utils').StyleConfigValues} darkHighContrastModeConfig Dark high contrast mode theme config.
 */

/**
 * @typedef GenerateThemeResults
 * @property {import('./utils').StyleConfig} theme A set of theme style references.
 * @property {import('./utils').StyleConfig} globalVariables A set of global variables.
 * @property {string} globalCSSVariables The compiled CSS string for global variables.
 * @property {string} darkModeCSSVariables The compiled CSS string for global dark variables.
 * @property {string} highContrastModeCSSVariables The compiled CSS string for global high contrast variables.
 * @property {string} darkHighContrastModeCSSVariables The compiled CSS string for global dark high contrast variables.
 */

/**
 * Generates theme references and compiles CSS variables to be used by the Style System.
 *
 * @param {GenerateThemeProps} props Props to generate a Style system theme with.
 * @returns {GenerateThemeResults} A set of variables and content for the System.
 */
function generateTheme(_ref) {
  var _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      _ref$darkModeConfig = _ref.darkModeConfig,
      darkModeConfig = _ref$darkModeConfig === void 0 ? {} : _ref$darkModeConfig,
      _ref$highContrastMode = _ref.highContrastModeConfig,
      highContrastModeConfig = _ref$highContrastMode === void 0 ? {} : _ref$highContrastMode,
      _ref$darkHighContrast = _ref.darkHighContrastModeConfig,
      darkHighContrastModeConfig = _ref$darkHighContrast === void 0 ? {} : _ref$darkHighContrast;
  var theme = (0, _utils.transformValuesToReferences)(config);
  var globalVariables = (0, _utils.transformValuesToVariables)(config);
  var globalCSSVariables = (0, _utils.transformValuesToVariablesString)(':root', config);
  var darkModeCSSVariables = (0, _utils.transformValuesToVariablesString)((0, _lodash.repeat)(_constants.DARK_MODE_ATTR, _constants.MODE_SPECIFICITY_COMPOUND_LEVEL), darkModeConfig);
  var highContrastModeCSSVariables = (0, _utils.transformValuesToVariablesString)((0, _lodash.repeat)(_constants.HIGH_CONTRAST_MODE_MODE_ATTR, _constants.MODE_SPECIFICITY_COMPOUND_LEVEL), highContrastModeConfig);
  var darkHighContrastModeCSSVariables = (0, _utils.transformValuesToVariablesString)((0, _lodash.repeat)(_constants.DARK_HIGH_CONTRAST_MODE_MODE_ATTR, _constants.MODE_SPECIFICITY_COMPOUND_LEVEL), darkHighContrastModeConfig);
  return {
    theme: theme,
    globalVariables: globalVariables,
    globalCSSVariables: globalCSSVariables,
    darkModeCSSVariables: darkModeCSSVariables,
    highContrastModeCSSVariables: highContrastModeCSSVariables,
    darkHighContrastModeCSSVariables: darkHighContrastModeCSSVariables
  };
}