"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteralLoose"));

var _react = require("@testing-library/react");

var _react2 = _interopRequireDefault(require("react"));

var _index = require("../index");

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["\n\t\t\tpadding: 10px;\n\t\t"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

describe('createStyleSystem', function () {
  var compiler;

  var testCreateStyleSystem = function () {
    var styleSystem = _index.createStyleSystem.apply(void 0, arguments);

    compiler = styleSystem.compiler;
    return styleSystem;
  };

  afterAll(function () {
    var _compiler;

    if ((_compiler = compiler) == null ? void 0 : _compiler.flush) {
      compiler.flush();
    }
  });
  test('should include a styled element, View, and styled component that renders', function () {
    var _testCreateStyleSyste = testCreateStyleSystem(),
        View = _testCreateStyleSyste.View,
        core = _testCreateStyleSyste.core,
        styled = _testCreateStyleSyste.styled;

    var Box = styled.p(_templateObject());

    var _render = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_react2.default.Fragment, null, /*#__PURE__*/_react2.default.createElement(core.input, null), /*#__PURE__*/_react2.default.createElement(View, {
      as: "span"
    }), /*#__PURE__*/_react2.default.createElement(Box, null))),
        container = _render.container;

    expect(container.querySelector('input')).toHaveStyle({
      boxSizing: 'border-box'
    });
    expect(container.querySelector('span')).toHaveStyle({
      boxSizing: 'border-box'
    });
    expect(container.querySelector('p')).toHaveStyle({
      boxSizing: 'border-box',
      padding: '10px'
    });
  });
  test('should render custom baseStyles', function () {
    var _testCreateStyleSyste2 = testCreateStyleSystem({
      baseStyles: {
        background: 'blue'
      }
    }),
        View = _testCreateStyleSyste2.View;

    var _render2 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(View, null)),
        container = _render2.container;

    expect(container.querySelector('div')).toHaveStyle({
      boxSizing: 'border-box',
      background: 'blue'
    });
  });
  test('should support multiple nested style system instances', function () {
    var _testCreateStyleSyste3 = testCreateStyleSystem(),
        View = _testCreateStyleSyste3.View;

    var _testCreateStyleSyste4 = testCreateStyleSystem({
      baseStyles: {
        padding: '2em'
      }
    }),
        AnotherView = _testCreateStyleSyste4.View;

    var _render3 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(View, null, /*#__PURE__*/_react2.default.createElement(AnotherView, {
      as: "span"
    }))),
        container = _render3.container;

    expect(container.querySelector('div')).toHaveStyle({
      boxSizing: 'border-box'
    });
    expect(container.querySelector('span')).toHaveStyle({
      boxSizing: 'border-box',
      padding: '2em'
    });
  });
});