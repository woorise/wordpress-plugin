"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useThemeProviderContextBridge = useThemeProviderContextBridge;
exports.useThemeProviderModeHtmlAttributes = useThemeProviderModeHtmlAttributes;
exports.useThemeProviderContext = exports.ThemeProviderContext = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("@wp-g2/utils");

var _react = require("react");

var _constants = require("../../create-style-system/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ThemeProviderContext = /*#__PURE__*/(0, _react.createContext)({
  isDark: null,
  isColorBlind: null,
  isReducedMotion: null,
  isHighContrast: null
});
exports.ThemeProviderContext = ThemeProviderContext;

var useThemeProviderContext = function () {
  return (0, _react.useContext)(ThemeProviderContext);
};
/**
 * Combines parent ThemeProvider context values with the current ThemeProvider
 * context values. This mechanism allows for "mode" settings to cascade
 * throughout the React component render tree.
 */


exports.useThemeProviderContext = useThemeProviderContext;

function useThemeProviderContextBridge(currentContextState) {
  if (currentContextState === void 0) {
    currentContextState = {};
  }

  var parentThemeProviderContextState = useThemeProviderContext();
  var nextContextState = (0, _react.useRef)(_objectSpread({}, parentThemeProviderContextState)).current;

  for (var _i = 0, _Object$entries = Object.entries(currentContextState); _i < _Object$entries.length; _i++) {
    var _ref3 = _Object$entries[_i];

    var _ref2 = (0, _slicedToArray2.default)(_ref3, 2);

    var key = _ref2[0];
    var value = _ref2[1];

    if (_utils.is.defined(value)) {
      nextContextState[key] = value;
    }
  }

  return nextContextState;
}
/**
 * Creates HTML attributes corresponding to ThemeProvider modes.
 */


function useThemeProviderModeHtmlAttributes(currentContextState) {
  if (currentContextState === void 0) {
    currentContextState = {};
  }

  var _currentContextState = currentContextState,
      isColorBlind = _currentContextState.isColorBlind,
      isDark = _currentContextState.isDark,
      isHighContrast = _currentContextState.isHighContrast,
      isReducedMotion = _currentContextState.isReducedMotion;
  var htmlAttrs = {};

  if (isDark) {
    htmlAttrs[_constants.DARK_MODE_ATTR_PROP] = 'dark';
  }

  if (isHighContrast) {
    htmlAttrs[_constants.HIGH_CONTRAST_MODE_ATTR_PROP] = true;
  }

  if (isColorBlind) {
    htmlAttrs[_constants.COLOR_BLIND_MODE_ATTR_PROP] = true;
  }

  if (isReducedMotion) {
    htmlAttrs[_constants.REDUCED_MOTION_MODE_ATTR_PROP] = true;
  }

  return htmlAttrs;
}