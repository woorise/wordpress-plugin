"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteralLoose"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _utils = require("@wp-g2/utils");

var _lodash = require("lodash");

var _react = _interopRequireWildcard(require("react"));

var _constants = require("../../create-style-system/constants");

var _hooks = require("../../hooks");

var _themeProviderContext = require("./theme-provider-context");

var _utils2 = require("./utils");

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["\n\t\t\t", "\n\t\t\t", "\n\t\t\t", "\n\t\t\t", "\n\t\t"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

/**
 * @typedef ThemeProviderProps
 * @property {import('react').ReactNode} children Children to render.
 * @property {import('../../create-compiler').Compiler} compiler The style compiler.
 * @property {string} [className] Optional className to render on the provider.
 * @property {boolean} [isGlobal=false] Determines if the theme styles are rendered globally or scoped locally.
 * @property {import('../../create-style-system/generate-theme').GenerateThemeResults} globalStyles Styles to apply globally.
 * @property {boolean} [isDark=false] Determines if dark-mode styles should be rendered.
 * @property {boolean} [isColorBlind=false] Determines if color-blind-mode styles should be rendered.
 * @property {boolean} [isReducedMotion=false] Determines if reduced-motion-mode styles should be rendered.
 * @property {boolean} [isHighContrast=false] Determines if high-contrast-mode styles should be rendered.
 * @property {Record<string, string>} [theme={}] Custom theme properties.
 * @property {Record<string, string>} [darkTheme={}] Custom dark theme properties.
 * @property {Record<string, string>} [highContrastTheme={}] Custom high contrast theme properties.
 * @property {Record<string, string>} [darkHighContrastTheme={}] Custom dark & high contrast theme properties.
 */

/**
 * The ThemeProvider for the Style system. This ThemeProvider uses Emotion's
 * ThemeProvider as a foundation, but enhances it with features provided by
 * the Style system, such as dark mode, high contrast mode, etc...
 *
 * An important feature this ThemeProvider accounts for is the ability to render
 * styles either globally (at the document/html level) or scoped.
 *
 * @example
 * ```jsx
 * <ThemeProvider isGlobal theme={{...}}>
 *   <Button>...</Button>
 * </ThemeProvider>
 * ```
 *
 * @param {ThemeProviderProps} props Props for the ThemeProvider.
 * @returns {JSX.Element} Children content wrapped with the <ThemeProvider />.
 */
function ThemeProvider(_ref, forwardedRef) {
  var children = _ref.children,
      compiler = _ref.compiler,
      className = _ref.className,
      _ref$isGlobal = _ref.isGlobal,
      isGlobal = _ref$isGlobal === void 0 ? false : _ref$isGlobal,
      globalStyles = _ref.globalStyles,
      _ref$isDark = _ref.isDark,
      isDark = _ref$isDark === void 0 ? false : _ref$isDark,
      _ref$isColorBlind = _ref.isColorBlind,
      isColorBlind = _ref$isColorBlind === void 0 ? false : _ref$isColorBlind,
      _ref$isReducedMotion = _ref.isReducedMotion,
      isReducedMotion = _ref$isReducedMotion === void 0 ? false : _ref$isReducedMotion,
      _ref$isHighContrast = _ref.isHighContrast,
      isHighContrast = _ref$isHighContrast === void 0 ? false : _ref$isHighContrast,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      _ref$darkTheme = _ref.darkTheme,
      darkTheme = _ref$darkTheme === void 0 ? {} : _ref$darkTheme,
      _ref$highContrastThem = _ref.highContrastTheme,
      highContrastTheme = _ref$highContrastThem === void 0 ? {} : _ref$highContrastThem,
      _ref$darkHighContrast = _ref.darkHighContrastTheme,
      darkHighContrastTheme = _ref$darkHighContrast === void 0 ? {} : _ref$darkHighContrast,
      props = (0, _objectWithoutProperties2.default)(_ref, ["children", "compiler", "className", "isGlobal", "globalStyles", "isDark", "isColorBlind", "isReducedMotion", "isHighContrast", "theme", "darkTheme", "highContrastTheme", "darkHighContrastTheme"]);
  var css = compiler.css,
      cx = compiler.cx,
      injectGlobal = compiler.injectGlobal;
  /**
   * Hydrates global styles (via injectGlobal). This is necessary as there may
   * be a chance that <ThemeProvider /> renders before any other (styled)
   * component. Injecting global styles early in this manner allows for
   * the initial render of theme styles (which also uses injectGlobal)
   * to be sequenced correctly.
   */

  (0, _hooks.useHydrateGlobalStyles)({
    injectGlobal: injectGlobal,
    globalStyles: globalStyles
  });
  var nodeRef = (0, _react.useRef)();
  var defaultStyles = (0, _utils2.useThemeStyles)({
    injectGlobal: injectGlobal,
    isGlobal: isGlobal,
    theme: theme,
    selector: ':root'
  });
  var darkStyles = (0, _utils2.useThemeStyles)({
    injectGlobal: injectGlobal,
    isGlobal: isGlobal,
    theme: darkTheme,
    selector: (0, _lodash.repeat)(_constants.DARK_MODE_ATTR, _constants.MODE_SPECIFICITY_COMPOUND_LEVEL)
  });
  var highContrastStyles = (0, _utils2.useThemeStyles)({
    injectGlobal: injectGlobal,
    isGlobal: isGlobal,
    theme: highContrastTheme,
    selector: (0, _lodash.repeat)(_constants.HIGH_CONTRAST_MODE_MODE_ATTR, _constants.MODE_SPECIFICITY_COMPOUND_LEVEL)
  });
  var darkHighContrastStyles = (0, _utils2.useThemeStyles)({
    injectGlobal: injectGlobal,
    isGlobal: isGlobal,
    theme: darkHighContrastTheme,
    selector: (0, _lodash.repeat)(_constants.DARK_HIGH_CONTRAST_MODE_MODE_ATTR, _constants.MODE_SPECIFICITY_COMPOUND_LEVEL)
  });
  (0, _utils2.useColorBlindMode)({
    isColorBlind: isColorBlind,
    isGlobal: isGlobal,
    ref: nodeRef
  });
  (0, _utils2.useDarkMode)({
    isDark: isDark,
    isGlobal: isGlobal,
    ref: nodeRef
  });
  (0, _utils2.useHighContrastMode)({
    isGlobal: isGlobal,
    isHighContrast: isHighContrast,
    ref: nodeRef
  });
  (0, _utils2.useReducedMotionMode)({
    isGlobal: isGlobal,
    isReducedMotion: isReducedMotion,
    ref: nodeRef
  });
  var contextState = (0, _themeProviderContext.useThemeProviderContextBridge)({
    isDark: isDark,
    isReducedMotion: isReducedMotion,
    isColorBlind: isColorBlind,
    isHighContrast: isHighContrast
  });
  var modeHtmlAttrs = (0, _themeProviderContext.useThemeProviderModeHtmlAttributes)(contextState);
  var classes = cx(className, css(_templateObject(), defaultStyles, darkStyles, highContrastStyles, darkHighContrastStyles));
  return /*#__PURE__*/_react.default.createElement("div", Object.assign({}, props, modeHtmlAttrs, {
    className: classes,
    "data-system-theme-provider": true,
    ref: (0, _utils.mergeRefs)([forwardedRef, nodeRef])
  }), /*#__PURE__*/_react.default.createElement(_themeProviderContext.ThemeProviderContext.Provider, {
    value: contextState
  }, children));
}

var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(ThemeProvider));

exports.default = _default;