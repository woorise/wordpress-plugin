"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRootStore = createRootStore;
exports.RootStore = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _getPropValue3 = require("./get-prop-value");

var _utils = require("./utils");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Stores CSS config variables that are expected to be added to :root.
 * This is used for CSS variable fallback handling for IE 11.
 */
var RootStore =
/**
 * @type {Record<string, string>}
 */

/**
 *
 * @param {Record<string, string>} initialState
 */
function (initialState) {
  var _this = this;

  if (initialState === void 0) {
    initialState = {};
  }

  this.state = {};

  this.get = function (key) {
    return _this.state[key];
  };

  this.getState = function () {
    return _this.state;
  };

  this.setState = function (next) {
    if (next === void 0) {
      next = {};
    }

    _this._updateState(next);

    _this._resolveVariablesInStateValue();

    return _this.state;
  };

  this._updateState = function (next) {
    if (next === void 0) {
      next = {};
    }

    _this.state = Object.freeze(_objectSpread(_objectSpread({}, _this.state), next));
  };

  this._resolveVariablesInStateValue = function () {
    /** @type {Record<string, string>} */
    var next = {};
    /**
     * Filter out entries so that we only target values with CSS variables.
     */

    var entries = Object.entries(_this.state).filter(function (_ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          _ = _ref2[0],
          v = _ref2[1];

      return (0, _utils.hasVariable)(v);
    });

    for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
      var _ref5 = _step.value;

      var _ref4 = (0, _slicedToArray2.default)(_ref5, 2);

      var k = _ref4[0];
      var v = _ref4[1];

      var _getPropValue = (0, _getPropValue3.getPropValue)("resolve: " + v, _this),
          _getPropValue2 = (0, _slicedToArray2.default)(_getPropValue, 2),
          value = _getPropValue2[1];
      /**
       * Set the value for the next state, if available.
       */


      if (value) {
        next[k] = value;
      }
    }

    _this._updateState(next);
    /**
     * Run this function again if there are any unresolved values.
     */


    if (entries.length) {
      _this._resolveVariablesInStateValue();
    }
  };

  this.setState(initialState);
}
/**
 * Retrieve a value from the state.
 * @param {string} key The key to retrieve.
 * @returns {string} The value.
 */
;
/**
 * Creates a RootStore instance.
 * This store contains a collection of CSS variables that is expected to
 * be added to the :root {} node.
 *
 * @param {Record<string, string>} initialState The initial config.
 * @returns {RootStore} The RootStore instance.
 */


exports.RootStore = RootStore;

function createRootStore(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var store = new RootStore(initialState);
  return store;
}