"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPropValue = getPropValue;

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _utils = require("./utils");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Interprets and retrieves the CSS property and value of a declaration rule.
 *
 * @param {string} declaration A CSS declaration rule to parse.
 * @param {object} rootStore A store for CSS root variables.
 * @returns {[string, string | undefined]} [prop, value] parsed from the declaration.
 */
function getPropValue(declaration, rootStore) {
  var hasFallbackValue = false; // Start be separating (and preparing) the prop and value from the declaration.

  /** @type {string} */

  var prop;
  /** @type {string | undefined} */

  var value;

  var _declaration$split = declaration.split(/:/);

  var _declaration$split2 = (0, _slicedToArray2.default)(_declaration$split, 2);

  prop = _declaration$split2[0];
  value = _declaration$split2[1];
  prop = prop.trim(); // Searching for uses of var().

  var matches = value.match(_utils.VAR_REG_EXP) ||
  /* istanbul ignore next */
  [];

  for (var _iterator = _createForOfIteratorHelperLoose(matches), _step; !(_step = _iterator()).done;) {
    var match = _step.value;
    match = match.trim(); // Splitting again allows us to traverse through nested vars().

    var entries = match.replace(/ /g, '').split('var(').filter(Boolean);

    for (var _iterator2 = _createForOfIteratorHelperLoose(entries), _step2; !(_step2 = _iterator2()).done;) {
      var entry = _step2.value;
      // Removes extra parentheses
      var parsedValue = (0, _utils.sanitizeParens)(entry);
      /**
       * Splits a CSS variable into it's custom property name and fallback.
       *
       * Before:
       * '--bg, black'
       *
       * After:
       * ['--bg', 'black']
       */

      var _parsedValue$split = parsedValue.split(','),
          _parsedValue$split2 = (0, _toArray2.default)(_parsedValue$split),
          customProp = _parsedValue$split2[0],
          fallbacks = _parsedValue$split2.slice(1);

      var customFallback = fallbacks.join(','); // Attempt to get the CSS variable from rootStore. Otherwise, use the provided fallback.

      var fallback = rootStore && rootStore.get(customProp) || customFallback;

      if (fallback) {
        hasFallbackValue = true;
        /*
         * If a valid fallback value is discovered, we'll replace it in
         * our value.
         */

        value = value.replace(match, fallback);
      }
    }
  } // We only want to return a value if we're able to locate a fallback value.


  value = hasFallbackValue ? (0, _utils.sanitizeParens)(value) : undefined;
  return [prop, value];
}