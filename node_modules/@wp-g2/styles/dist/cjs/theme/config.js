"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = exports.SUPPORTED_COLORS = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _createStyles = require("@wp-g2/create-styles");

var _flow = require("../presets/flow");

var _tokens = require("./tokens");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SUPPORTED_COLORS = ['blue', 'red', 'purple', 'green', 'yellow', 'orange', 'darkGray', 'lightGray'];
exports.SUPPORTED_COLORS = SUPPORTED_COLORS;
var ANIMATION_PROPS = {
  transitionDuration: '200ms',
  transitionDurationFast: '160ms',
  transitionDurationFaster: '120ms',
  transitionDurationFastest: '100ms',
  transitionTimingFunction: 'cubic-bezier(0.08, 0.52, 0.52, 1)',
  transitionTimingFunctionControl: 'cubic-bezier(0.12, 0.8, 0.32, 1)'
};

var COLOR_PROPS = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _tokens.WORDPRESS_COLORS), _tokens.BACKGROUND_COLOR_PROPS), {}, {
  colorAdmin: '#007cba',
  colorDestructive: '#D94F4F',
  colorBodyBackground: (0, _createStyles.get)('white'),
  colorDivider: 'rgba(0, 0, 0, 0.1)',
  colorPositive: (0, _createStyles.get)('greens'),
  colorScrollbarThumb: 'rgba(0, 0, 0, 0.2)',
  colorScrollbarThumbHover: 'rgba(0, 0, 0, 0.5)',
  colorScrollbarTrack: 'rgba(0, 0, 0, 0.04)',
  colorText: '#1e1e1e',
  colorTextInverted: (0, _createStyles.get)('white'),
  colorTextHeading: '#050505',
  colorTextMuted: '#717171'
}, (0, _utils.generateColorAdminColors)('#007cba')), (0, _utils.generateColorDestructiveColors)('#D94F4F'));

var FONT_PROPS = {
  fontFamily: 'Inter,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",sans-serif',
  fontFamilyMono: 'SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace',
  fontSize: '13px',
  fontSizeH1: "calc(2.44 * " + (0, _createStyles.get)('fontSize') + ")",
  fontSizeH2: "calc(1.95 * " + (0, _createStyles.get)('fontSize') + ")",
  fontSizeH3: "calc(1.56 * " + (0, _createStyles.get)('fontSize') + ")",
  fontSizeH4: "calc(1.25 * " + (0, _createStyles.get)('fontSize') + ")",
  fontSizeH5: "calc(1 * " + (0, _createStyles.get)('fontSize') + ")",
  fontSizeH6: "calc(0.8 * " + (0, _createStyles.get)('fontSize') + ")",
  fontSizeInputMobile: '16px',
  fontSizeMobile: '15px',
  fontSizeSmall: "calc(0.92 * " + (0, _createStyles.get)('fontSize') + ")",
  fontSizeXSmall: "calc(0.75 * " + (0, _createStyles.get)('fontSize') + ")",
  fontLineHeightBase: '1.2',
  fontWeight: 'normal',
  fontWeightHeading: '600'
};
var SURFACE_PROPS = {
  surfaceBackgroundColor: (0, _createStyles.get)('surfaceColor'),
  surfaceBackgroundSubtleColor: '#F3F3F3',
  surfaceBackgroundTintColor: '#F5F5F5',
  surfaceBorderColor: 'rgba(0, 0, 0, 0.1)',
  surfaceBorderBoldColor: 'rgba(0, 0, 0, 0.15)',
  surfaceBorderSubtleColor: 'rgba(0, 0, 0, 0.05)',
  surfaceBackgroundTertiaryColor: '#ffffff',
  surfaceColor: (0, _createStyles.get)('white')
};
var ELEVATION_PROPS = {
  elevationIntensity: 1
};
var GRID_PROPS = {
  gridBase: '4px'
};
var CONTROL_PROPS = {
  controlBackgroundColor: (0, _createStyles.get)('white'),
  controlBackgroundColorHover: 'rgba(0, 0, 0, 0.05)',
  controlBackgroundColorActive: 'rgba(0, 0, 0, 0.05)',
  controlBackgroundDimColor: 'rgba(0, 0, 0, 0.1)',
  controlBackgroundBrightColor: 'rgba(0, 0, 0, 0.03)',
  controlBorderColor: '#757575',
  controlBorderColorHover: (0, _createStyles.get)('controlBorderColor'),
  controlBorderColorSubtle: 'transparent',
  controlBorderRadius: '2px',
  controlBorderSubtleColor: 'rgba(0, 0, 0, 0.2)',
  controlBoxShadowFocusSize: '0.5px',
  controlBoxShadow: "transparent",
  controlBoxShadowFocus: (0, _flow.flow)('0 0 0', (0, _createStyles.get)('controlBoxShadowFocusSize'), (0, _createStyles.get)('colorAdmin')),
  controlPseudoBoxShadowFocusWidth: '2px',
  controlPseudoBoxShadowFocusRingSize: _flow.flow.calc((0, _createStyles.get)('controlPseudoBoxShadowFocusWidth'), '+ 1px +', (0, _createStyles.get)('controlBoxShadowFocusSize')),
  controlPseudoBoxShadowFocusRingSizeSmall: _flow.flow.calc((0, _createStyles.get)('controlPseudoBoxShadowFocusWidth'), '+ 1px'),
  controlPseudoBoxShadowFocus: (0, _flow.flow)(['0 0 0', (0, _createStyles.get)('controlPseudoBoxShadowFocusWidth'), (0, _createStyles.get)('surfaceBackgroundColor')], ['0 0 0', (0, _createStyles.get)('controlPseudoBoxShadowFocusRingSize'), (0, _createStyles.get)('colorAdmin')]),
  controlPseudoBoxShadowFocusSmall: (0, _flow.flow)(['0 0 0', (0, _createStyles.get)('controlPseudoBoxShadowFocusWidth'), (0, _createStyles.get)('surfaceBackgroundColor')], ['0 0 0', (0, _createStyles.get)('controlPseudoBoxShadowFocusRingSizeSmall'), (0, _createStyles.get)('colorAdmin')]),
  controlDestructivePseudoBoxShadowFocus: (0, _flow.flow)(['0 0 0', (0, _createStyles.get)('controlPseudoBoxShadowFocusWidth'), (0, _createStyles.get)('surfaceBackgroundColor')], ['0 0 0', (0, _createStyles.get)('controlPseudoBoxShadowFocusRingSize'), (0, _createStyles.get)('colorDestructive')]),
  controlDestructivePseudoBoxShadowFocusSmall: (0, _flow.flow)(['0 0 0', (0, _createStyles.get)('controlPseudoBoxShadowFocusWidth'), (0, _createStyles.get)('surfaceBackgroundColor')], ['0 0 0', (0, _createStyles.get)('controlPseudoBoxShadowFocusRingSizeSmall'), (0, _createStyles.get)('colorDestructive')]),
  controlDestructiveBorderColor: (0, _createStyles.get)('colorDestructive'),
  controlDestructiveBorderColorFocus: (0, _createStyles.get)('controlDestructiveBorderColor'),
  controlDestructiveBoxShadowFocus: (0, _flow.flow)('0 0 0', (0, _createStyles.get)('controlBoxShadowFocusSize'), (0, _createStyles.get)('colorDestructive')),
  controlHeight: '30px',
  controlHeightLarge: "calc(" + (0, _createStyles.get)('controlHeight') + " * 1.2)",
  controlHeightSmall: "calc(" + (0, _createStyles.get)('controlHeight') + " * 0.8)",
  controlHeightXLarge: "calc(" + (0, _createStyles.get)('controlHeight') + " * 1.4)",
  controlHeightXSmall: "calc(" + (0, _createStyles.get)('controlHeight') + " * 0.67)",
  controlHeightXXSmall: "calc(" + (0, _createStyles.get)('controlHeight') + " * 0.4)",
  controlPaddingX: '12px',
  controlPaddingXLarge: "calc(" + (0, _createStyles.get)('controlPaddingX') + " * 1.3334)",
  controlPaddingXSmall: "calc(" + (0, _createStyles.get)('controlPaddingX') + " / 1.3334)",
  controlPrimaryTextColorActive: (0, _createStyles.get)('white'),
  controlPrimaryTextColor: (0, _createStyles.get)('white'),
  controlSurfaceBoxShadow: (0, _flow.flow)(['0 1px 1px rgba(0, 0, 0, 0.2)'], ['0 1px 2px rgba(0, 0, 0, 0.2)']),
  controlSurfaceColor: (0, _createStyles.get)('white'),
  controlTextActiveColor: (0, _createStyles.get)('colorAdmin'),
  controlInnerControltextColor: (0, _createStyles.get)('colorAdmin')
};
var BUTTON_PROPS = {
  buttonPaddingXRatio: 'calc(4/3)',
  buttonPaddingX: _flow.flow.calc((0, _createStyles.get)('controlPaddingX'), '*', (0, _createStyles.get)('buttonPaddingXRatio')),
  buttonTextColor: (0, _createStyles.get)('colorAdmin'),
  buttonTextColorActive: (0, _createStyles.get)('buttonTextColor'),
  buttonPrimaryColor: (0, _createStyles.get)('colorAdmin'),
  buttonPrimaryColorHover: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonPrimaryColorActive: (0, _createStyles.get)('colorText'),
  buttonPrimaryColorFocus: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonPrimaryBorderColor: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonPrimaryBorderColorHover: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonPrimaryBorderColorFocus: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonPrimaryBorderColorActive: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonPrimaryTextColor: (0, _createStyles.get)('controlPrimaryTextColor'),
  buttonPrimaryTextColorHover: (0, _createStyles.get)('controlPrimaryTextColor'),
  buttonPrimaryTextColorActive: (0, _createStyles.get)('controlPrimaryTextColor'),
  buttonPrimaryTextColorFocus: (0, _createStyles.get)('controlPrimaryTextColor'),
  buttonSecondaryColor: 'transparent',
  buttonSecondaryColorHover: (0, _createStyles.get)('buttonSecondaryColor'),
  buttonSecondaryColorActive: 'rgba(0, 0, 0, 0.05)',
  buttonSecondaryColorFocus: (0, _createStyles.get)('buttonSecondaryColor'),
  buttonSecondaryBorderColor: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonSecondaryTextColor: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonSecondaryTextColorFocus: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonSecondaryTextColorActive: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonSecondaryBorderColorHover: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonSecondaryBorderColorActive: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonSecondaryBorderColorFocus: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonTertiaryColor: 'transparent',
  buttonTertiaryColorHover: (0, _createStyles.get)('buttonTertiaryColor'),
  buttonTertiaryColorActive: 'rgba(0, 0, 0, 0.05)',
  buttonTertiaryColorFocus: (0, _createStyles.get)('buttonTertiaryColor'),
  buttonTertiaryBorderColor: 'transparent',
  buttonTertiaryTextColor: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonTertiaryTextColorFocus: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonTertiaryTextColorActive: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonTertiaryBorderColorHover: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonTertiaryBorderColorActive: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonTertiaryBorderColorFocus: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonControlActiveStateColor: (0, _createStyles.get)('colorText'),
  buttonControlActiveStateColorHover: (0, _createStyles.get)('buttonControlActiveStateColor'),
  buttonControlActiveStateColorActive: (0, _createStyles.get)('buttonControlActiveStateColor'),
  buttonControlActiveStateColorFocus: (0, _createStyles.get)('buttonControlActiveStateColor'),
  buttonControlActiveStateTextColor: (0, _createStyles.get)('buttonPrimaryTextColor'),
  buttonControlActiveStateBorderColorFocus: (0, _createStyles.get)('buttonPrimaryColor'),
  buttonControlActiveStateBoxShadowFocus: (0, _flow.flow)(['0 0 0', (0, _createStyles.get)('controlBoxShadowFocusSize'), (0, _createStyles.get)('colorAdmin')], ['0 0 0', (0, _createStyles.get)('controlPseudoBoxShadowFocusWidth'), (0, _createStyles.get)('buttonControlActiveStateTextColor'), 'inset'])
};
var CARD_PROPS = {
  cardBorderRadius: '2px',
  cardPaddingX: (0, _utils.space)(3),
  cardPaddingY: (0, _utils.space)(3),
  cardPadding: (0, _flow.flow)((0, _createStyles.get)('cardPaddingX'), (0, _createStyles.get)('cardPaddingY')),
  cardHeaderFooterPaddingY: (0, _utils.space)(1),
  cardHeaderHeight: '44px'
};
var CHECKBOX_PROPS = {
  checkboxBoxShadow: 'none',
  checkboxSize: '16px'
};
var FLEX_PROPS = {
  flexGap: (0, _utils.space)(2),
  flexItemMarginRight: (0, _createStyles.get)('flexGap')
};
var LINK_PROPS = {
  linkColor: (0, _createStyles.get)('colorAdmin'),
  linkColorHover: (0, _createStyles.get)('colorAdmin'),
  linkColorActive: (0, _createStyles.get)('colorAdmin'),
  linkColorFocus: (0, _createStyles.get)('colorAdmin')
};
var MENU_PROPS = {
  menuItemBorderWidth: '1px',
  menuItemFocusBackgroundColor: 'transparent',
  menuItemFocusBorderColor: (0, _createStyles.get)('colorAdmin'),
  menuItemFocusTextColor: (0, _createStyles.get)('menuItemFocusBorderColor'),
  menuItemFocusBoxShadow: (0, _createStyles.get)('controlBorderSubtleColor'),
  menuItemActiveBackgroundColor: (0, _createStyles.get)('controlBackgroundColor'),
  menuItemActiveBorderColor: (0, _createStyles.get)('menuItemFocusBorderColor'),
  menuItemActiveTextColor: (0, _createStyles.get)('colorText'),
  menuItemActiveBoxShadow: (0, _createStyles.get)('controlBorderSubtleColor'),
  menuItemHeight: '30px',
  menuItemHeightLarge: "calc(" + (0, _createStyles.get)('menuItemHeight') + " * 1.2)",
  menuItemHeightSmall: "calc(" + (0, _createStyles.get)('menuItemHeight') + " * 0.8)",
  menuItemHeightXLarge: "calc(" + (0, _createStyles.get)('menuItemHeight') + " * 1.4)",
  menuItemHeightXSmall: "calc(" + (0, _createStyles.get)('menuItemHeight') + " * 0.67)",
  menuItemHeightXXSmall: "calc(" + (0, _createStyles.get)('menuItemHeight') + " * 0.4)"
};
var PANEL_PROPS = {
  panelHeaderPadding: (0, _utils.space)(3) + " " + (0, _utils.space)(4),
  panelBodyPadding: (0, _utils.space)(2) + " " + (0, _utils.space)(4) + " " + (0, _utils.space)(3)
};
var RADIO_PROPS = {
  radioBoxShadow: (0, _createStyles.get)('checkboxBoxShadow'),
  radioSize: (0, _createStyles.get)('checkboxSize'),
  radioDotSize: '10px'
};
var SEGMENTED_CONTROL_PROPS = {
  segmentedControlFontSize: '12px',
  segmentedControlBackgroundColor: (0, _createStyles.get)('controlBackgroundColor'),
  segmentedControlBorderColor: (0, _createStyles.get)('controlBorderColor'),
  segmentedControlBackdropBackgroundColor: (0, _createStyles.get)('controlSurfaceColor'),
  segmentedControlBackdropBorderColor: (0, _createStyles.get)('controlBorderColor'),
  segmentedControlBackdropBoxShadow: 'transparent',
  segmentedControlButtonColorActive: (0, _createStyles.get)('controlBackgroundColor')
};
var SLIDER_PROPS = {
  sliderThumbBorderColor: 'transparent',
  sliderThumbBoxShadow: 'none',
  sliderThumbBoxShadowSizeFocus: '3px',
  sliderThumbBoxShadowColorFocus: (0, _createStyles.get)('colorAdminRgba20'),
  sliderThumbBackgroundColor: (0, _createStyles.get)('colorAdmin')
};
var SWITCH_PROPS = {
  switchBackdropBackgroundColor: (0, _createStyles.get)('lightGray900'),
  switchBackdropBackgroundColorActive: (0, _createStyles.get)('colorAdmin'),
  switchBackdropBorderColor: (0, _createStyles.get)('lightGray900'),
  switchBackdropBorderColorActive: (0, _createStyles.get)('colorAdmin'),
  switchBackdropBorderColorFocus: (0, _createStyles.get)('white'),
  switchToggleBackgroundColor: (0, _createStyles.get)('colorTextInverted'),
  switchToggleBackgroundColorActive: (0, _createStyles.get)('colorTextInverted'),
  switchToggleBoxShadow: 'none',
  switchPaddingOffset: '6px'
};

var BASE_THEME = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _tokens.G2_COLORS), COLOR_PROPS), CARD_PROPS), CONTROL_PROPS), ELEVATION_PROPS), FLEX_PROPS), FONT_PROPS), SURFACE_PROPS), ANIMATION_PROPS), BUTTON_PROPS), CHECKBOX_PROPS), GRID_PROPS), LINK_PROPS), MENU_PROPS), PANEL_PROPS), RADIO_PROPS), SEGMENTED_CONTROL_PROPS), SLIDER_PROPS), SWITCH_PROPS);

var config = BASE_THEME;
exports.config = config;