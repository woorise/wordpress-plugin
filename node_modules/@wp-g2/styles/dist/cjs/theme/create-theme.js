"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTheme = createTheme;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _createStyles = require("@wp-g2/create-styles");

var _utils = require("@wp-g2/utils");

var _space = require("../mixins/space");

var _config = require("./config");

var _utils2 = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var baseTheme = Object.freeze(Object.assign({}, _config.config));
/**
 * @param {(props: { get: typeof get, theme: typeof baseTheme, color: typeof colorize, space: typeof space }) => Record<string, string>} callback
 * @return {Record<string, string>}
 */

function createTheme(callback) {
  if (typeof callback !== 'function') return {};
  var customConfig = callback({
    get: _createStyles.get,
    theme: baseTheme,
    color: _utils.colorize,
    space: _space.space
  });
  if (!_utils.is.plainObject(customConfig)) return {};
  var colorAdminColors = {};

  if (customConfig.colorAdmin) {
    var colorAdminValue = (0, _utils.getComputedColor)(customConfig.colorAdmin);
    colorAdminColors = (0, _utils2.generateColorAdminColors)(colorAdminValue);
  }

  return _objectSpread(_objectSpread({}, customConfig), colorAdminColors);
}