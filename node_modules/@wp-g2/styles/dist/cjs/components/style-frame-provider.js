"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyleFrameProvider = StyleFrameProvider;

var _react = _interopRequireWildcard(require("react"));

var _system = require("../system");

var cache = _system.compiler.cache;
var isProdEnv = process.env.NODE_ENV === 'production';
/**
 * @typedef StyleFrameProviderProps
 * @property {import('react').ReactNode} children Children elements to render.
 */

/**
 * A special Provider designed specifically for iFrame usage.
 * Components using `@wp-g2/styled` that render within will have their
 * styles injected and rendered correctly within the iFrame out-of-the-box.
 *
 * No external stylesheet loading is necessary when using <StyleFrameProvider />.
 *
 * @example
 * ```jsx
 * <Frame>
 *   <StyleFrameProvider>
 *     <Button>Let It Go</Button>
 *   </StyleFrameProvider>
 * </Frame>
 * ```
 *
 * @param {StyleFrameProviderProps} props Props for the Provider.
 */

function StyleFrameProvider(_ref) {
  var children = _ref.children;
  var ref = (0, _react.useRef)(null);
  useEmotionSheetInsert({
    ref: ref
  });
  useEmotionInitialTagSync({
    ref: ref
  });
  /**
   * Rendering the contents within a <div /> in order for React
   * to retrieve the correct Frame.document (via ownerDocument.)
   */

  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref
  }, children);
}
/**
 * Initially syncs existing Emotion tags (from cache) into the Frame head by
 * cloning and injecting the tags into the DOM.
 * @param {object} options
 * @param {import('react').RefObject<Node>} options.ref
 */


function useEmotionInitialTagSync(_ref2) {
  var ref = _ref2.ref;
  (0, _react.useEffect)(function () {
    var _ref$current;

    var ownerDocument = (_ref$current = ref.current) == null ? void 0 : _ref$current.ownerDocument;
    if (!ownerDocument) return;
    var head = ownerDocument.querySelector('head');

    try {
      /**
       * Account for compiler (Emotion) isSpeedy rendering, which occurs
       * for production builds.
       */
      // @ts-ignore isSpeedy is an unexposed property
      if (cache.sheet.isSpeedy) {
        var speedyTag = cache.sheet.tags[0];
        /**
         * Locate the styleSheet instance within document.styleSheet
         * based on the speed (style) tag match.
         */

        var speedySheet = Object.values(document.styleSheets).find(function (sheet) {
          return sheet.ownerNode === speedyTag;
        });

        if (speedySheet) {
          /**
           * The compiler's speedy mode inserts the cssRule directly
           * into the styleSheet instance, rather than as a textNode in
           * a style tag. We can retrieve this via the styleSheet instance
           * cssRule.
           */
          var initialStyles = Object.values(speedySheet.cssRules).map(function (cssRule) {
            return cssRule.cssText;
          }).join('\n');
          /**
           * Clone the speed style tag, and append it into the target (frame)
           * document head.
           */
          // @ts-ignore cloneNode type is weak

          speedyTag = speedyTag.cloneNode(true);
          speedyTag.innerHTML = initialStyles;

          if (head) {
            head.appendChild(speedyTag);
          }
        }
      } else {
        /**
         * Otherwise, loop through all of the cache sheet tags, and clone
         * them into the targeted (frame) document head.
         */
        if (cache.sheet.tags) {
          cache.sheet.tags.forEach(function (tag) {
            if (head) {
              head.appendChild(tag.cloneNode(true));
            }
          });
        }
      }
    } catch (e) {
      if (!isProdEnv) {
        console.warn("There was a problem syncing Style rules from window.document.", e);
      }
    }
  }, [ref]);
}
/**
 * Inserts individual rules compiled by Emotion into the Frame's
 * document.styleSheet object by using the same technique as Emotion's
 * sheet class.
 */


function useEmotionSheetInsert(_ref3) {
  var ref = _ref3.ref;

  /**
   * The following insert code is found in Emotion's sheet class, specifically,
   * the insert method. We're replicating that functionality to insert
   * the style rules into the Frame's container (document.head).
   *
   * https://github.com/emotion-js/emotion/blob/master/packages/sheet/src/index.js
   */
  (0, _react.useEffect)(function () {
    var _ref$current2;

    var ownerDocument = (_ref$current2 = ref.current) == null ? void 0 : _ref$current2.ownerDocument;
    if (!ownerDocument) return;
    var head = ownerDocument.querySelector('head');

    var sheetForTag = function () {
      var tag = head.querySelector('style[data-style-system-frame]');

      if (!tag) {
        tag = ownerDocument.createElement('style');
        tag.setAttribute('data-style-system-frame', true);
        head.appendChild(tag);
      }

      if (tag.sheet) {
        return tag.sheet;
      } // this weirdness brought to you by firefox


      for (var i = 0; i < ownerDocument.styleSheets.length; i++) {
        if (ownerDocument.styleSheets[i].ownerNode === tag) {
          return ownerDocument.styleSheets[i];
        }
      }
    };

    var renderStyleRule = function (rule) {
      var sheet = sheetForTag();

      try {
        // this is a really hot path
        // we check the second character first because having "i"
        // as the second character will happen less often than
        // having "@" as the first character
        var isImportRule = rule.charCodeAt(1) === 105 && rule.charCodeAt(0) === 64; // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools

        sheet.insertRule(rule, // we need to insert @import rules before anything else
        // otherwise there will be an error
        // technically this means that the @import rules will
        // _usually_(not always since there could be multiple style tags)
        // be the first ones in prod and generally later in dev
        // this shouldn't really matter in the real world though
        // @import is generally only used for font faces from google fonts and etc.
        // so while this could be technically correct then it would be slower and larger
        // for a tiny bit of correctness that won't matter in the real world
        isImportRule ? 0 : sheet.cssRules.length);
      } catch (e) {
        if (!isProdEnv) {
          console.warn("There was a problem inserting the following rule: \"" + rule + "\"", e);
        }
      }
    };
    /**
     * The compiler (Emotion) has a special event emitter (pub/sub) that emits
     * an event whenever the compiler sheet inserts a rule.
     *
     * We're subscribing to these events in order to sync the insertion from
     * the primary Emotion document (window) to the Frame document.
     */


    _system.compiler.__events.on('sheet.insert', renderStyleRule);

    return function () {
      /**
       * Unsubscribe to the events.
       */
      _system.compiler.__events.off('sheet.insert', renderStyleRule);
    };
  }, [ref]);
}