"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.$ = void 0;

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteralLoose"));

var _namespaces = require("../namespaces");

var _styleSystem = require("../style-system");

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["\n\t\t", " {\n\t\t\t", ";\n\t\t}\n\t"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

/**
 * An experimental preset that allows for custom styling of components.
 * This is achieved by leveraging the namespacing system. The provided
 * css() method (which is the same as the one used in the style system)
 * targets the namespace, adding the CSS rules to that selector.
 *
 * @example
 * ```jsx
 * <View css={[ui.$('Button').css('transform: scale(2)')]}>
 *   <Button />
 * </View>
 * ```
 *
 * The StyleQuery class enables a more seamless workflow for namespace declaration
 * within a component as well as declaring CSS rules using a "chaining"
 * API, similar to jQuery.
 */
var StyleQuery = function (ComponentName) {
  this[_namespaces.COMPONENT_NAMESPACE] = ComponentName;
  return this;
};
/**
 * @return {string}
 */


StyleQuery.prototype.getSelector = function () {
  return "[" + _namespaces.COMPONENT_NAMESPACE + "=\"" + this[_namespaces.COMPONENT_NAMESPACE] + "\"]";
};
/**
 * @param {Parameters<css>} args
 * @return {string}
 */


StyleQuery.prototype.css = function () {
  var compiledStyles = _styleSystem.css.apply(void 0, arguments);
  /**
   * Currently does not support hoisting (e.g. dark-mode).
   */


  return (0, _styleSystem.css)(_templateObject(), this.getSelector(), compiledStyles);
};
/**
 * Creates a style query for a Component. This namespace can be added to any
 * React component, allowing it to be targeted for custom style via
 * ui.$().css().
 *
 * @example
 * ```jsx
 * // Declaring a namespace for a component
 * <View {...ui.$('Olaf')} />
 * ```
 *
 * @example
 * ```jsx
 * // Targeting a namespaced component for styling
 * <View css={[ui.$('Olaf').css('background: white')]} />
 *   <View {...ui.$('Olaf')} />
 * </View/>
 * ```
 *
 * @param {string} ComponentName The namespace of the component
 * @returns {StyleQuery} The StyleQuery instance.
 */


var createStyleQuery = function (ComponentName) {
  return new StyleQuery(ComponentName);
}; // Alias


var $ = createStyleQuery;
exports.$ = $;