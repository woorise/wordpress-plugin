"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.font = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("../core");

var _mixins = require("../mixins");

var _styleSystem = require("../style-system");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 *
 * @param {import('create-emotion').ObjectInterpolation<any>['color']} color
 */
function getFontColor(color) {
  return (0, _styleSystem.css)({
    color: color
  });
}

getFontColor.black = getFontColor((0, _core.get)('black'));
getFontColor.white = getFontColor((0, _core.get)('white'));
getFontColor.admin = getFontColor((0, _core.get)('colorAdmin'));
getFontColor.purple = getFontColor((0, _core.get)('purple500'));
getFontColor.green = getFontColor((0, _core.get)('green500'));
getFontColor.yellow = getFontColor((0, _core.get)('yellow500'));
getFontColor.orange = getFontColor((0, _core.get)('orange500'));
getFontColor.darkGray = getFontColor((0, _core.get)('darkGray500'));
getFontColor.lightGray = getFontColor((0, _core.get)('lightGray500'));
getFontColor.text = getFontColor((0, _core.get)('colorText'));
getFontColor.textInverted = getFontColor((0, _core.get)('colorTextInverted'));
var fontFamily = {
  default: (0, _styleSystem.css)({
    color: (0, _core.get)('colorText'),
    fontFamily: (0, _core.get)('fontFamily'),
    fontWeight: 400
  }),
  monospace: (0, _styleSystem.css)({
    fontFamily: (0, _core.get)('fontFamilyMono')
  })
};
var fontStyles = {
  bold: (0, _styleSystem.css)({
    fontWeight: 600
  }),
  italic: (0, _styleSystem.css)({
    fontStyle: 'italic'
  }),
  smallCaps: (0, _styleSystem.css)({
    fontSize: (0, _mixins.getFontSize)(10),
    fontWeight: 600,
    textTransform: 'uppercase'
  }),
  caption: (0, _styleSystem.css)({
    fontSize: (0, _mixins.getFontSize)(10),
    fontWeight: 600,
    textTransform: 'uppercase',
    opacity: 0.5
  })
};
var fontSizes = {
  body: (0, _styleSystem.css)({
    fontSize: (0, _mixins.getFontSize)(13)
  }),
  caption: (0, _styleSystem.css)({
    fontSize: (0, _mixins.getFontSize)(10)
  }),
  footnote: (0, _styleSystem.css)({
    fontSize: (0, _mixins.getFontSize)(11)
  }),
  headline: (0, _styleSystem.cx)(fontStyles.bold, (0, _styleSystem.css)({
    fontSize: (0, _mixins.getFontSize)(13)
  })),
  largeTitle: (0, _styleSystem.css)({
    fontSize: (0, _mixins.getFontSize)(28)
  }),
  subheadline: (0, _styleSystem.css)({
    fontSize: (0, _mixins.getFontSize)(12)
  }),
  title: (0, _styleSystem.css)({
    fontSize: (0, _mixins.getFontSize)(20)
  })
};
var fontMixins = {
  color: getFontColor,
  size: function size(
  /** @type {Parameters<getFontSize>[0]} */
  _size) {
    return (0, _styleSystem.css)({
      fontSize: (0, _mixins.getFontSize)(_size)
    });
  }
};
var fontAlignments = {
  alignment: {
    left: (0, _styleSystem.css)({
      textAlign: 'left'
    }),
    center: (0, _styleSystem.css)({
      textAlign: 'center'
    }),
    right: (0, _styleSystem.css)({
      textAlign: 'right'
    })
  }
};

var font = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, fontFamily), fontSizes), fontStyles), fontMixins), fontAlignments);

exports.font = font;