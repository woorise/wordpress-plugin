"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.animation = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("../core");

var _styleSystem = require("../style-system");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var animationProps = {
  transitionDuration: (0, _core.get)('transitionDuration'),
  transitionProperty: 'all',
  transitionTimingFunction: 'ease-in-out'
};
/**
 * @param {import('create-emotion').ObjectInterpolation<any>['transition']} transition
 * @return {string}
 */

var animation = function (transition) {
  return (0, _styleSystem.css)({
    transition: transition
  });
};

exports.animation = animation;
animation.default = (0, _styleSystem.css)(_objectSpread(_objectSpread({}, animationProps), {}, {
  transitionTimingFunction: 'ease'
}));
animation.bounce = (0, _styleSystem.css)(_objectSpread(_objectSpread({}, animationProps), {}, {
  transitionTimingFunction: 'cubic-bezier(.8, .5, .2, 1.4)'
}));

animation.delay = function (value) {
  return (0, _styleSystem.css)({
    transitionDelay: value + "s"
  });
};

animation.duration = function (value) {
  return (0, _styleSystem.css)({
    transitionDuration: value + "s"
  });
};

animation.ease = (0, _styleSystem.css)(_objectSpread(_objectSpread({}, animationProps), {}, {
  transitionTimingFunction: 'ease'
}));
animation.easeIn = (0, _styleSystem.css)(_objectSpread(_objectSpread({}, animationProps), {}, {
  transitionTimingFunction: 'ease-in'
}));
animation.easeInOut = (0, _styleSystem.css)(_objectSpread(_objectSpread({}, animationProps), {}, {
  transitionTimingFunction: 'ease-in-out'
}));
animation.easeOut = (0, _styleSystem.css)(_objectSpread(_objectSpread({}, animationProps), {}, {
  transitionTimingFunction: 'ease-out'
}));

animation.easing = function (value) {
  return (0, _styleSystem.css)(_objectSpread(_objectSpread({}, animationProps), {}, {
    transitionTimingFunction: value
  }));
};

animation.linear = (0, _styleSystem.css)(_objectSpread(_objectSpread({}, animationProps), {}, {
  transitionTimingFunction: 'linear'
}));