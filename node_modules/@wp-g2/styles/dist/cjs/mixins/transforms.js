"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.offset = offset;
exports.scale = scale;
exports.scaleY = scaleY;
exports.scaleX = scaleX;
exports.rotate = rotate;

var _utils = require("@wp-g2/utils");

var _styleSystem = require("../style-system");

var _units = require("./units");

/**
 * @param {string | number | any} value
 * @return {value is string | number}
 */
function isValidOffset(value) {
  return typeof value === 'number' || typeof value === 'string';
}
/**
 *
 * @param {{x: number, y: number} | string | number} value
 * @param {number} valueY
 */


function offset(value, valueY) {
  if (valueY === void 0) {
    valueY = 0;
  }

  if (isValidOffset(value)) {
    var finalY = isValidOffset(valueY) ? valueY : 0;
    return (0, _styleSystem.css)({
      transform: "translate(" + (0, _units.toPx)(value) + ", " + (0, _units.toPx)(finalY) + ")"
    });
  }

  if (_utils.is.plainObject(value)) {
    var _value$x = value.x,
        x = _value$x === void 0 ? 0 : _value$x,
        _value$y = value.y,
        y = _value$y === void 0 ? 0 : _value$y;
    return (0, _styleSystem.css)({
      transform: "translate(" + (0, _units.toPx)(x) + ", " + (0, _units.toPx)(y) + ")"
    });
  }

  return '';
}

offset.x = function (
/** @type {string | number} */
value) {
  return (0, _styleSystem.css)({
    transform: "translateX(" + (0, _units.toPx)(value) + ")"
  });
};

offset.y = function (
/** @type {string | number} */
value) {
  return (0, _styleSystem.css)({
    transform: "translateY(" + (0, _units.toPx)(value) + ")"
  });
};
/**
 * @param {string | number} value
 */


function scale(value) {
  return (0, _styleSystem.css)({
    transform: "scale(" + value + ")"
  });
}
/**
 * @param {string | number} value
 */


function scaleY(value) {
  return (0, _styleSystem.css)({
    transform: "scaleY(" + value + ")"
  });
}
/**
 * @param {string | number} value
 */


function scaleX(value) {
  return (0, _styleSystem.css)({
    transform: "scaleX(" + value + ")"
  });
}
/**
 * @param {number} value Degrees.
 */


function rotate(value) {
  return (0, _styleSystem.css)({
    transform: "rotate(" + value + "deg)"
  });
}