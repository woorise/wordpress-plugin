"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBackgroundColor = getBackgroundColor;
exports.getBackgroundColorText = getBackgroundColorText;

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteralLoose"));

var _lodash = require("lodash");

var _core = require("../core");

var _styleSystem = require("../style-system");

var _theme = require("../theme");

var _colorBlindMode = require("./color-blind-mode");

function _templateObject3() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["\n\t\tcolor: ", ";\n\t"]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["", ""]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["\n\t\t", ";\n\t\t", ";\n\t"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

/**
 *
 * @param {import('../theme').SupportedColors} color
 * @param {{ isBold?: boolean, isSubtle?: boolean }} options
 */
function getBackgroundColor(color, options) {
  if (options === void 0) {
    options = {};
  }

  if (!_theme.SUPPORTED_COLORS.includes(color)) return '';
  var _options = options,
      isBold = _options.isBold,
      isSubtle = _options.isSubtle;
  var baseBackground = isBold ? color + "Rgba70" : isSubtle ? color + "Rgba10" : color + "Rgba20";
  var colorBlindShade = isBold ? "Rgba20" : "Rgba10";
  var colorBlindColor;
  var baseColor = (0, _styleSystem.css)({
    // @ts-ignore Generated string passed to `get`
    background: (0, _core.get)(baseBackground)
  });

  if (color === 'green') {
    colorBlindColor = (0, _styleSystem.css)({
      backgroundImage: "repeating-linear-gradient(45deg, transparent, transparent 10px, " + (0, _core.get)("colorBackgroundGreen") + " 10px, " + (0, _core.get)("colorBackgroundGreen") + " 20px)"
    });
  }

  if (color === 'red') {
    colorBlindColor = (0, _styleSystem.css)({
      backgroundImage: "linear-gradient(45deg, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("red" + colorBlindShade) + " 25%, transparent 25%, transparent 75%, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("red" + colorBlindShade) + " 75%, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("red" + colorBlindShade) + "),\n            linear-gradient(-45deg, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("red" + colorBlindShade) + " 25%, transparent 25%, transparent 75%, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("red" + colorBlindShade) + " 75%, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("red" + colorBlindShade) + ")",
      backgroundSize: '10px 10px'
    });
  }

  if (color === 'yellow') {
    colorBlindColor = (0, _styleSystem.css)({
      backgroundImage: "linear-gradient(45deg, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("yellow" + colorBlindShade) + " 25%, transparent 25%, transparent 75%, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("yellow" + colorBlindShade) + " 75%, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("yellow" + colorBlindShade) + "),\n            linear-gradient(-45deg, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("yellow" + colorBlindShade) + " 25%, transparent 25%, transparent 75%, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("yellow" + colorBlindShade) + " 75%, " + // @ts-ignore Generated string passed to `get`
      (0, _core.get)("yellow" + colorBlindShade) + ")",
      backgroundSize: '10px 10px'
    });
  }

  return (0, _styleSystem.css)(_templateObject(), baseColor, (0, _colorBlindMode.colorBlindMode)(_templateObject2(), colorBlindColor));
}

function getBackgroundColorText(color, options) {
  if (options === void 0) {
    options = {};
  }

  if (!_theme.SUPPORTED_COLORS.includes(color)) return '';
  var _options2 = options,
      isBold = _options2.isBold;
  var value = isBold ? (0, _core.get)('white') : // @ts-ignore Generated string passed to `get`
  (0, _core.get)("colorBackground" + (0, _lodash.upperFirst)(color) + "Text");
  return (0, _styleSystem.css)(_templateObject3(), value);
}