import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/esm/taggedTemplateLiteralLoose";

function _templateObject3() {
  var data = _taggedTemplateLiteralLoose(["\n\t\tcolor: ", ";\n\t"]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["", ""]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n\t\t", ";\n\t\t", ";\n\t"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

import { upperFirst } from 'lodash';
import { get } from '../core';
import { css } from '../style-system';
import { SUPPORTED_COLORS } from '../theme';
import { colorBlindMode } from './color-blind-mode';
/**
 *
 * @param {import('../theme').SupportedColors} color
 * @param {{ isBold?: boolean, isSubtle?: boolean }} options
 */

export function getBackgroundColor(color, options) {
  if (options === void 0) {
    options = {};
  }

  if (!SUPPORTED_COLORS.includes(color)) return '';
  var _options = options,
      isBold = _options.isBold,
      isSubtle = _options.isSubtle;
  var baseBackground = isBold ? color + "Rgba70" : isSubtle ? color + "Rgba10" : color + "Rgba20";
  var colorBlindShade = isBold ? "Rgba20" : "Rgba10";
  var colorBlindColor;
  var baseColor = css({
    // @ts-ignore Generated string passed to `get`
    background: get(baseBackground)
  });

  if (color === 'green') {
    colorBlindColor = css({
      backgroundImage: "repeating-linear-gradient(45deg, transparent, transparent 10px, " + get("colorBackgroundGreen") + " 10px, " + get("colorBackgroundGreen") + " 20px)"
    });
  }

  if (color === 'red') {
    colorBlindColor = css({
      backgroundImage: "linear-gradient(45deg, " + // @ts-ignore Generated string passed to `get`
      get("red" + colorBlindShade) + " 25%, transparent 25%, transparent 75%, " + // @ts-ignore Generated string passed to `get`
      get("red" + colorBlindShade) + " 75%, " + // @ts-ignore Generated string passed to `get`
      get("red" + colorBlindShade) + "),\n            linear-gradient(-45deg, " + // @ts-ignore Generated string passed to `get`
      get("red" + colorBlindShade) + " 25%, transparent 25%, transparent 75%, " + // @ts-ignore Generated string passed to `get`
      get("red" + colorBlindShade) + " 75%, " + // @ts-ignore Generated string passed to `get`
      get("red" + colorBlindShade) + ")",
      backgroundSize: '10px 10px'
    });
  }

  if (color === 'yellow') {
    colorBlindColor = css({
      backgroundImage: "linear-gradient(45deg, " + // @ts-ignore Generated string passed to `get`
      get("yellow" + colorBlindShade) + " 25%, transparent 25%, transparent 75%, " + // @ts-ignore Generated string passed to `get`
      get("yellow" + colorBlindShade) + " 75%, " + // @ts-ignore Generated string passed to `get`
      get("yellow" + colorBlindShade) + "),\n            linear-gradient(-45deg, " + // @ts-ignore Generated string passed to `get`
      get("yellow" + colorBlindShade) + " 25%, transparent 25%, transparent 75%, " + // @ts-ignore Generated string passed to `get`
      get("yellow" + colorBlindShade) + " 75%, " + // @ts-ignore Generated string passed to `get`
      get("yellow" + colorBlindShade) + ")",
      backgroundSize: '10px 10px'
    });
  }

  return css(_templateObject(), baseColor, colorBlindMode(_templateObject2(), colorBlindColor));
}
export function getBackgroundColorText(color, options) {
  if (options === void 0) {
    options = {};
  }

  if (!SUPPORTED_COLORS.includes(color)) return '';
  var _options2 = options,
      isBold = _options2.isBold;
  var value = isBold ? get('white') : // @ts-ignore Generated string passed to `get`
  get("colorBackground" + upperFirst(color) + "Text");
  return css(_templateObject3(), value);
}