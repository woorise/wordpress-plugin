import { is } from '@wp-g2/utils';
import { css } from '../style-system';
import { toPx } from './units';
/**
 * @param {string | number | any} value
 * @return {value is string | number}
 */

function isValidOffset(value) {
  return typeof value === 'number' || typeof value === 'string';
}
/**
 *
 * @param {{x: number, y: number} | string | number} value
 * @param {number} valueY
 */


export function offset(value, valueY) {
  if (valueY === void 0) {
    valueY = 0;
  }

  if (isValidOffset(value)) {
    var finalY = isValidOffset(valueY) ? valueY : 0;
    return css({
      transform: "translate(" + toPx(value) + ", " + toPx(finalY) + ")"
    });
  }

  if (is.plainObject(value)) {
    var _value$x = value.x,
        x = _value$x === void 0 ? 0 : _value$x,
        _value$y = value.y,
        y = _value$y === void 0 ? 0 : _value$y;
    return css({
      transform: "translate(" + toPx(x) + ", " + toPx(y) + ")"
    });
  }

  return '';
}

offset.x = function (
/** @type {string | number} */
value) {
  return css({
    transform: "translateX(" + toPx(value) + ")"
  });
};

offset.y = function (
/** @type {string | number} */
value) {
  return css({
    transform: "translateY(" + toPx(value) + ")"
  });
};
/**
 * @param {string | number} value
 */


export function scale(value) {
  return css({
    transform: "scale(" + value + ")"
  });
}
/**
 * @param {string | number} value
 */

export function scaleY(value) {
  return css({
    transform: "scaleY(" + value + ")"
  });
}
/**
 * @param {string | number} value
 */

export function scaleX(value) {
  return css({
    transform: "scaleX(" + value + ")"
  });
}
/**
 * @param {number} value Degrees.
 */

export function rotate(value) {
  return css({
    transform: "rotate(" + value + "deg)"
  });
}