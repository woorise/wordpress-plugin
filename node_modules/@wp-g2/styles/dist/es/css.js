import { INTERPOLATION_CLASS_NAME, responsive } from '@wp-g2/create-styles';
import { is } from '@wp-g2/utils';
import { space } from './mixins/space';
import { compiler } from './system';
var compile = compiler.css; // Inspired by:
// https://github.com/system-ui/theme-ui/blob/master/packages/css/src/index.ts

export var scales = {
  gridGap: 'space',
  gridColumnGap: 'space',
  gridRowGap: 'space',
  gap: 'space',
  columnGap: 'space',
  rowGap: 'space'
};
var transformFns = {
  space: space
};
/**
 * Retrieves a scaled values from the Style system based on a style key.
 *
 * @param {string} key The style key to scale.
 * @param {any} value The style value to scale.
 * @returns {any} The scaled value.
 */

export function getScaleValue(key, value) {
  var scale = scales[key];
  var next = value;

  if (scale) {
    var transformFn = transformFns[scale];

    if (transformFns) {
      next = transformFn(value);
    }
  }

  return next;
}
/**
 * Transform a style object with scaled values from the Style system.
 *
 * @param {object} styles The style object to transform.
 * @returns {object} The style object with scaled values.
 */

export function getScaleStyles(styles) {
  if (styles === void 0) {
    styles = {};
  }

  var next = {};

  for (var k in styles) {
    next[k] = getScaleValue(k, styles[k]);
  }

  return next;
}
/**
 *
 * @param {any} value
 * @return {value is import('@wp-g2/create-styles').PolymorphicComponent<any, any>}
 */

function isPolymorphicComponent(value) {
  return value && typeof value[INTERPOLATION_CLASS_NAME] !== 'undefined';
}
/**
 * Enhances the (create-system enhanced) CSS function to account for
 * scale functions within the Style system.
 *
 * @param {TemplateStringsArray | import('create-emotion').Interpolation<undefined>} template
 * @param {(import('create-emotion').Interpolation<undefined> | import('@wp-g2/create-styles').PolymorphicComponent<any, any>)[]} args The styles to compile.
 * @returns {ReturnType<compile>} The compiled styles.
 */


export function css(template) {
  if (is.objectInterpolation(template)) {
    return compile(getScaleStyles(responsive(template, getScaleValue)));
  }

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (Array.isArray(template)) {
    for (var i = 0, len = template.length; i < len; i++) {
      var n = template[i];

      if (is.objectInterpolation(n)) {
        template[i] = getScaleStyles(responsive(n, getScaleValue));
      }
    }

    var nextArgs = args.map(function (arg) {
      if (!arg) {
        return arg;
      }

      if (isPolymorphicComponent(arg)) {
        return "." + arg[INTERPOLATION_CLASS_NAME];
      }

      return arg;
    });
    return compile.apply(void 0, [template].concat(nextArgs));
  } // @ts-ignore Emotion says `css` doesn't take `TemplateStringsArray` but it does!


  return compile.apply(void 0, [template].concat(args));
}