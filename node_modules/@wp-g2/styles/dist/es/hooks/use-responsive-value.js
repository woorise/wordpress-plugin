import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useEffect, useState } from 'react';
import { breakpoints } from '../style-system'; // For SSR

var __window = {};

if (typeof window !== 'undefined') {
  __window = window;
}

var _window = __window,
    addEventListener = _window.addEventListener,
    matchMedia = _window.matchMedia,
    removeEventListener = _window.removeEventListener;
/**
 * @param {object} [options]
 * @param {number} [options.defaultIndex=0]
 */

export var useBreakpointIndex = function (options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$defaultIndex = _options.defaultIndex,
      defaultIndex = _options$defaultIndex === void 0 ? 0 : _options$defaultIndex;

  if (typeof defaultIndex !== 'number') {
    throw new TypeError("Default breakpoint index should be a number. Got: " + defaultIndex + ", " + typeof defaultIndex);
  } else if (defaultIndex < 0 || defaultIndex > breakpoints.length - 1) {
    throw new RangeError("Default breakpoint index out of range. Theme has " + breakpoints.length + " breakpoints, got index " + defaultIndex);
  }

  var _useState = useState(defaultIndex),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  useEffect(function () {
    var getIndex = function () {
      return breakpoints.filter(function (bp) {
        return matchMedia ? matchMedia("screen and (min-width: " + bp + ")").matches : false;
      }).length;
    };

    var onResize = function () {
      var newValue = getIndex();

      if (value !== newValue) {
        setValue(newValue);
      }
    };

    onResize();
    addEventListener('resize', onResize);
    return function () {
      return removeEventListener('resize', onResize);
    };
  }, [value]);
  return value;
};
/**
 *
 * @template T
 * @param {(() => (T | undefined)[]) | (T | undefined)[]} values
 * @param {Parameters<useBreakpointIndex>[0]} options
 * @return {T | undefined}
 */

export function useResponsiveValue(values, options) {
  if (options === void 0) {
    options = {};
  }

  var index = useBreakpointIndex(options);
  if (!Array.isArray(values) && typeof values !== 'function') return values;
  var array = values || [];

  if (typeof values === 'function') {
    array = values();
  }

  return array[index >= array.length ? array.length - 1 : index];
}