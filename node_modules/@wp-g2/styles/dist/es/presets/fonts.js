import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { get } from '../core';
import { getFontSize } from '../mixins';
import { css, cx } from '../style-system';
/**
 *
 * @param {import('create-emotion').ObjectInterpolation<any>['color']} color
 */

function getFontColor(color) {
  return css({
    color: color
  });
}

getFontColor.black = getFontColor(get('black'));
getFontColor.white = getFontColor(get('white'));
getFontColor.admin = getFontColor(get('colorAdmin'));
getFontColor.purple = getFontColor(get('purple500'));
getFontColor.green = getFontColor(get('green500'));
getFontColor.yellow = getFontColor(get('yellow500'));
getFontColor.orange = getFontColor(get('orange500'));
getFontColor.darkGray = getFontColor(get('darkGray500'));
getFontColor.lightGray = getFontColor(get('lightGray500'));
getFontColor.text = getFontColor(get('colorText'));
getFontColor.textInverted = getFontColor(get('colorTextInverted'));
var fontFamily = {
  default: css({
    color: get('colorText'),
    fontFamily: get('fontFamily'),
    fontWeight: 400
  }),
  monospace: css({
    fontFamily: get('fontFamilyMono')
  })
};
var fontStyles = {
  bold: css({
    fontWeight: 600
  }),
  italic: css({
    fontStyle: 'italic'
  }),
  smallCaps: css({
    fontSize: getFontSize(10),
    fontWeight: 600,
    textTransform: 'uppercase'
  }),
  caption: css({
    fontSize: getFontSize(10),
    fontWeight: 600,
    textTransform: 'uppercase',
    opacity: 0.5
  })
};
var fontSizes = {
  body: css({
    fontSize: getFontSize(13)
  }),
  caption: css({
    fontSize: getFontSize(10)
  }),
  footnote: css({
    fontSize: getFontSize(11)
  }),
  headline: cx(fontStyles.bold, css({
    fontSize: getFontSize(13)
  })),
  largeTitle: css({
    fontSize: getFontSize(28)
  }),
  subheadline: css({
    fontSize: getFontSize(12)
  }),
  title: css({
    fontSize: getFontSize(20)
  })
};
var fontMixins = {
  color: getFontColor,
  size: function size(
  /** @type {Parameters<getFontSize>[0]} */
  _size) {
    return css({
      fontSize: getFontSize(_size)
    });
  }
};
var fontAlignments = {
  alignment: {
    left: css({
      textAlign: 'left'
    }),
    center: css({
      textAlign: 'center'
    }),
    right: css({
      textAlign: 'right'
    })
  }
};
export var font = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, fontFamily), fontSizes), fontStyles), fontMixins), fontAlignments);