/**
 * @template TProps
 * @typedef {TProps & { [CONNECTED_NAMESPACE]: boolean; className: string; children?: import('react').ReactNode }} ConnectedProps
 */
/**
 * Custom hook that derives registered props from the Context system.
 * These derived props are then consolidated with incoming component props.
 *
 * @template {{ className?: string }} P
 * @param {P} props Incoming props from the component.
 * @param {string} namespace The namespace to register and to derive context props from.
 * @return {ConnectedProps<P>}
 */
export function useContextSystem<P extends {
    className?: string | undefined;
}>(props: P, namespace: string): P & {
    className: string;
    children?: import('react').ReactNode;
    "data-g2-c16t": boolean;
};
export type ConnectedProps<TProps> = TProps & {
    className: string;
    children?: import('react').ReactNode;
    "data-g2-c16t": boolean;
};
import { CONNECTED_NAMESPACE } from "./constants";
//# sourceMappingURL=use-context-system.d.ts.map