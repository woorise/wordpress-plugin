import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { render } from '@testing-library/react';
import { View } from '@wp-g2/styles';
import React from 'react';
import { contextConnect } from '../context-connect';
import { ContextSystemProvider } from '../context-system-provider';
import { useContextSystem } from '../use-context-system';
describe('props', function () {
  test('should render correctly', function () {
    var ConnectedOlaf = contextConnect(function Olaf(props, ref) {
      return /*#__PURE__*/React.createElement(View, Object.assign({}, useContextSystem(props, 'Olaf'), {
        ref: ref
      }));
    }, 'Olaf');

    var _render = render( /*#__PURE__*/React.createElement(ContextSystemProvider, null, /*#__PURE__*/React.createElement(ConnectedOlaf, null))),
        container = _render.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render context props', function () {
    var ConnectedOlaf = contextConnect(function Olaf(props, ref) {
      var _useContextSystem = useContextSystem(props, 'Olaf'),
          quote = _useContextSystem.quote,
          otherProps = _objectWithoutProperties(_useContextSystem, ["quote"]);

      return /*#__PURE__*/React.createElement(View, Object.assign({}, otherProps, {
        ref: ref
      }), quote);
    }, 'Olaf');

    var _render2 = render( /*#__PURE__*/React.createElement(ContextSystemProvider, {
      value: {
        Olaf: {
          quote: 'Warm Hugs'
        }
      }
    }, /*#__PURE__*/React.createElement(ConnectedOlaf, null))),
        container = _render2.container;

    expect(container.firstChild).toMatchSnapshot();
    expect(container.firstChild.innerHTML).toContain('Warm Hugs');
  });
  test('should render css props', function () {
    var ConnectedOlaf = contextConnect(function Olaf(props, ref) {
      var _useContextSystem2 = useContextSystem(props, 'Olaf'),
          quote = _useContextSystem2.quote,
          otherProps = _objectWithoutProperties(_useContextSystem2, ["quote"]);

      return /*#__PURE__*/React.createElement(View, Object.assign({}, otherProps, {
        ref: ref
      }), quote);
    }, 'Olaf');

    var _render3 = render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ContextSystemProvider, {
      value: {
        Olaf: {
          css: [{
            background: 'white'
          }, "padding: 20px;"]
        }
      }
    }, /*#__PURE__*/React.createElement(ConnectedOlaf, {
      className: "olaf"
    })), /*#__PURE__*/React.createElement(ConnectedOlaf, {
      className: "olaf"
    }))),
        container = _render3.container;

    var _ref = [].concat(container.querySelectorAll('.olaf')),
        first = _ref[0],
        second = _ref[1];

    expect(container).toMatchSnapshot();
    var firstCSS = first.classList.toString();
    var secondCSS = second.classList.toString();
    expect(first).toHaveStyle("background: white");
    expect(first).toHaveStyle("padding: 20px");
    expect(second).not.toHaveStyle("background: white");
    expect(second).not.toHaveStyle("padding: 20px");
    expect(firstCSS).not.toEqual(secondCSS);
  });
  test('should render css props + provided css', function () {
    var ConnectedOlaf = contextConnect(function Olaf(props, ref) {
      var _useContextSystem3 = useContextSystem(props, 'Olaf'),
          quote = _useContextSystem3.quote,
          otherProps = _objectWithoutProperties(_useContextSystem3, ["quote"]);

      return /*#__PURE__*/React.createElement(View, Object.assign({}, otherProps, {
        ref: ref
      }), quote);
    }, 'Olaf');

    var _render4 = render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ContextSystemProvider, {
      value: {
        Olaf: {
          css: [{
            background: 'white'
          }, {
            border: '2px solid blue'
          }]
        }
      }
    }, /*#__PURE__*/React.createElement(ConnectedOlaf, {
      className: "olaf",
      css: "\n\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t"
    })))),
        container = _render4.container;

    expect(container).toMatchSnapshot();
    var el = container.querySelector('.olaf');
    expect(el).toHaveStyle("border: 2px solid blue");
    expect(el).toHaveStyle("background: white");
    expect(el).toHaveStyle("font-weight: bold");
  });
  test('should render _override props', function () {
    var ConnectedOlaf = contextConnect(function Olaf(props, ref) {
      var _useContextSystem4 = useContextSystem(props, 'Olaf'),
          quote = _useContextSystem4.quote,
          otherProps = _objectWithoutProperties(_useContextSystem4, ["quote"]);

      return /*#__PURE__*/React.createElement(View, Object.assign({}, otherProps, {
        ref: ref
      }), quote);
    }, 'Olaf');

    var _render5 = render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ContextSystemProvider, {
      value: {
        Olaf: {
          _overrides: {
            quote: 'Warm Hugs!'
          }
        }
      }
    }, /*#__PURE__*/React.createElement(ConnectedOlaf, {
      className: "olaf",
      quote: "Hello"
    })))),
        container = _render5.container;

    expect(container.firstChild).toMatchSnapshot();
    var el = container.querySelector('.olaf');
    expect(el.innerHTML).toContain('Warm Hugs!');
    expect(el.innerHTML).not.toContain('Hello');
  });
});