"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("@testing-library/react");

var _styles = require("@wp-g2/styles");

var _react2 = _interopRequireDefault(require("react"));

var _contextConnect = require("../context-connect");

var _contextSystemProvider = require("../context-system-provider");

var _useContextSystem5 = require("../use-context-system");

describe('props', function () {
  test('should render correctly', function () {
    var ConnectedOlaf = (0, _contextConnect.contextConnect)(function Olaf(props, ref) {
      return /*#__PURE__*/_react2.default.createElement(_styles.View, Object.assign({}, (0, _useContextSystem5.useContextSystem)(props, 'Olaf'), {
        ref: ref
      }));
    }, 'Olaf');

    var _render = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_contextSystemProvider.ContextSystemProvider, null, /*#__PURE__*/_react2.default.createElement(ConnectedOlaf, null))),
        container = _render.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  test('should render context props', function () {
    var ConnectedOlaf = (0, _contextConnect.contextConnect)(function Olaf(props, ref) {
      var _useContextSystem = (0, _useContextSystem5.useContextSystem)(props, 'Olaf'),
          quote = _useContextSystem.quote,
          otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["quote"]);

      return /*#__PURE__*/_react2.default.createElement(_styles.View, Object.assign({}, otherProps, {
        ref: ref
      }), quote);
    }, 'Olaf');

    var _render2 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_contextSystemProvider.ContextSystemProvider, {
      value: {
        Olaf: {
          quote: 'Warm Hugs'
        }
      }
    }, /*#__PURE__*/_react2.default.createElement(ConnectedOlaf, null))),
        container = _render2.container;

    expect(container.firstChild).toMatchSnapshot();
    expect(container.firstChild.innerHTML).toContain('Warm Hugs');
  });
  test('should render css props', function () {
    var ConnectedOlaf = (0, _contextConnect.contextConnect)(function Olaf(props, ref) {
      var _useContextSystem2 = (0, _useContextSystem5.useContextSystem)(props, 'Olaf'),
          quote = _useContextSystem2.quote,
          otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem2, ["quote"]);

      return /*#__PURE__*/_react2.default.createElement(_styles.View, Object.assign({}, otherProps, {
        ref: ref
      }), quote);
    }, 'Olaf');

    var _render3 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_react2.default.Fragment, null, /*#__PURE__*/_react2.default.createElement(_contextSystemProvider.ContextSystemProvider, {
      value: {
        Olaf: {
          css: [{
            background: 'white'
          }, "padding: 20px;"]
        }
      }
    }, /*#__PURE__*/_react2.default.createElement(ConnectedOlaf, {
      className: "olaf"
    })), /*#__PURE__*/_react2.default.createElement(ConnectedOlaf, {
      className: "olaf"
    }))),
        container = _render3.container;

    var _ref = [].concat(container.querySelectorAll('.olaf')),
        first = _ref[0],
        second = _ref[1];

    expect(container).toMatchSnapshot();
    var firstCSS = first.classList.toString();
    var secondCSS = second.classList.toString();
    expect(first).toHaveStyle("background: white");
    expect(first).toHaveStyle("padding: 20px");
    expect(second).not.toHaveStyle("background: white");
    expect(second).not.toHaveStyle("padding: 20px");
    expect(firstCSS).not.toEqual(secondCSS);
  });
  test('should render css props + provided css', function () {
    var ConnectedOlaf = (0, _contextConnect.contextConnect)(function Olaf(props, ref) {
      var _useContextSystem3 = (0, _useContextSystem5.useContextSystem)(props, 'Olaf'),
          quote = _useContextSystem3.quote,
          otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem3, ["quote"]);

      return /*#__PURE__*/_react2.default.createElement(_styles.View, Object.assign({}, otherProps, {
        ref: ref
      }), quote);
    }, 'Olaf');

    var _render4 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_react2.default.Fragment, null, /*#__PURE__*/_react2.default.createElement(_contextSystemProvider.ContextSystemProvider, {
      value: {
        Olaf: {
          css: [{
            background: 'white'
          }, {
            border: '2px solid blue'
          }]
        }
      }
    }, /*#__PURE__*/_react2.default.createElement(ConnectedOlaf, {
      className: "olaf",
      css: "\n\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t"
    })))),
        container = _render4.container;

    expect(container).toMatchSnapshot();
    var el = container.querySelector('.olaf');
    expect(el).toHaveStyle("border: 2px solid blue");
    expect(el).toHaveStyle("background: white");
    expect(el).toHaveStyle("font-weight: bold");
  });
  test('should render _override props', function () {
    var ConnectedOlaf = (0, _contextConnect.contextConnect)(function Olaf(props, ref) {
      var _useContextSystem4 = (0, _useContextSystem5.useContextSystem)(props, 'Olaf'),
          quote = _useContextSystem4.quote,
          otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem4, ["quote"]);

      return /*#__PURE__*/_react2.default.createElement(_styles.View, Object.assign({}, otherProps, {
        ref: ref
      }), quote);
    }, 'Olaf');

    var _render5 = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_react2.default.Fragment, null, /*#__PURE__*/_react2.default.createElement(_contextSystemProvider.ContextSystemProvider, {
      value: {
        Olaf: {
          _overrides: {
            quote: 'Warm Hugs!'
          }
        }
      }
    }, /*#__PURE__*/_react2.default.createElement(ConnectedOlaf, {
      className: "olaf",
      quote: "Hello"
    })))),
        container = _render5.container;

    expect(container.firstChild).toMatchSnapshot();
    var el = container.querySelector('.olaf');
    expect(el.innerHTML).toContain('Warm Hugs!');
    expect(el.innerHTML).not.toContain('Hello');
  });
});