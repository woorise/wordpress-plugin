"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useContextSystem = useContextSystem;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _createStyles = require("@wp-g2/create-styles");

var _styles = require("@wp-g2/styles");

var _utils = require("@wp-g2/utils");

var _lodash = require("lodash");

var _constants = require("./constants");

var _contextSystemProvider = require("./context-system-provider");

var _utils2 = require("./utils");

/**
 * @template TProps
 * @typedef {TProps & { [CONNECTED_NAMESPACE]: boolean; className: string; children?: import('react').ReactNode }} ConnectedProps
 */

/**
 * Custom hook that derives registered props from the Context system.
 * These derived props are then consolidated with incoming component props.
 *
 * @template {{ className?: string }} P
 * @param {P} props Incoming props from the component.
 * @param {string} namespace The namespace to register and to derive context props from.
 * @return {ConnectedProps<P>}
 */
function useContextSystem(props, namespace) {
  var _finalComponentProps;

  var contextSystemProps = (0, _contextSystemProvider.useComponentsContext)();
  var displayName = Array.isArray(namespace) ? namespace[0] : namespace;

  if (process.env.NODE_ENV === 'development') {
    if (typeof namespace === 'undefined') {
      console.warn('useContextSystem', 'Please provide a namespace.');
    }
  }

  var contextProps = (contextSystemProps == null ? void 0 : contextSystemProps[displayName]) || {};
  /** @type {ConnectedProps<P>} */
  // @ts-ignore We fill in the missing properties below

  var finalComponentProps = (_finalComponentProps = {}, _finalComponentProps[_constants.CONNECTED_NAMESPACE] = true, _finalComponentProps);
  var nextNs = (0, _utils2.ns)(displayName);

  for (var k in nextNs) {
    if (typeof nextNs[k] === 'string') {
      finalComponentProps[k] = nextNs[k];
    }
  }

  var overrideProps = contextProps._overrides,
      contextCSS = contextProps.css,
      otherContextProps = (0, _objectWithoutProperties2.default)(contextProps, ["_overrides", "css"]);
  var initialMergedProps = Object.entries(otherContextProps).length ? Object.assign({}, otherContextProps, props) : props;
  var interpolationClassName = (0, _createStyles.getInterpolatedClassName)(displayName);
  var classes = (0, _styles.cx)( // Resolve custom CSS from ContextSystemProvider
  contextCSS && (0, _styles.css)(contextCSS), initialMergedProps.css && (0, _styles.css)(initialMergedProps.css), memoizedGetStyledClassNameFromKey(displayName), props.className, interpolationClassName); // Provides the ability to customize the render of the component.

  var rendered = typeof initialMergedProps.renderChildren === 'function' ? initialMergedProps.renderChildren(initialMergedProps) : initialMergedProps.children;

  for (var _k in initialMergedProps) {
    /**
     * Omitting CSS prop.
     */
    if (_k !== 'css') {
      finalComponentProps[_k] = initialMergedProps[_k];
    }
  }

  for (var _k2 in overrideProps) {
    finalComponentProps[_k2] = overrideProps[_k2];
  }

  finalComponentProps.children = rendered;
  finalComponentProps.className = classes;
  return finalComponentProps;
}
/**
 * Generates the connected component CSS className based on the namespace.
 *
 * @param {string} displayName The name of the connected component.
 * @returns {string} The generated CSS className.
 */


function getStyledClassName(displayName) {
  if (!displayName || typeof displayName !== 'string') return '';
  var kebab = (0, _lodash.kebabCase)(displayName);
  return "components-" + kebab + " wp-components-" + kebab;
}
/**
 * Generates the connected component CSS className based on the namespace.
 *
 * @param {string} key The name of the connected component.
 * @returns {string} The generated CSS className.
 */


function getStyledClassNameFromKey(key) {
  if (!key) return '';

  if (Array.isArray(key)) {
    return (0, _styles.cx)((0, _lodash.uniq)(key).map(getStyledClassName));
  }

  if (typeof key === 'string') {
    return getStyledClassName(key);
  }

  return '';
}

var memoizedGetStyledClassNameFromKey = (0, _utils.memoize)(getStyledClassNameFromKey);