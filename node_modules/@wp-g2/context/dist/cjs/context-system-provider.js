"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextSystemProvider = exports.useComponentsContext = exports.ComponentsContext = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _utils = require("@wp-g2/utils");

var _lodash = require("lodash");

var _react = _interopRequireWildcard(require("react"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ComponentsContext = /*#__PURE__*/(0, _react.createContext)({});
exports.ComponentsContext = ComponentsContext;

var useComponentsContext = function () {
  return (0, _react.useContext)(ComponentsContext);
};
/**
 * Consolidates incoming ContextSystem values with a (potential) parent ContextSystem value.
 *
 * @param {object} props
 * @param {object} props.value
 * @return {object}
 */


exports.useComponentsContext = useComponentsContext;

function useContextSystemBridge(_ref) {
  var value = _ref.value;

  if ((0, _lodash.isNil)(value)) {
    // @ts-ignore
    value = {};
  }

  var parentContext = useComponentsContext();
  var parentContextRef = (0, _react.useRef)(parentContext);
  var valueRef = (0, _react.useRef)((0, _utils.deepMerge)(parentContext, value));

  var _useState = (0, _react.useState)(valueRef.current),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      config = _useState2[0],
      setConfig = _useState2[1];

  (0, _utils.useIsomorphicLayoutEffect)(function () {
    var hasChange = false;

    if (!(0, _utils.deepEqual)(value, valueRef.current)) {
      valueRef.current = value;
      hasChange = true;
    }

    if (!(0, _utils.deepEqual)(parentContext, parentContextRef.current)) {
      valueRef.current = (0, _utils.deepMerge)(parentContext, valueRef.current);
      parentContextRef.current = parentContext;
      hasChange = true;
    }

    if (hasChange) {
      setConfig(function (prev) {
        return _objectSpread(_objectSpread({}, prev), valueRef.current);
      });
    }
  }, [value, parentContext]);
  return config;
}
/**
 * A Provider component that can modify props for connected components within
 * the Context system.
 *
 * @example
 * ```jsx
 * <ContextSystemProvider value={{ Button: { size: 'small' }}}>
 *   <Button>...</Button>
 * </ContextSystemProvider>
 * ```
 *
 * @template {Record<string, any>} T
 * @param {object} options
 * @param {import('react').ReactNode} options.children Children to render.
 * @param {T} options.value Props to render into connected components.
 * @returns {JSX.Element} A Provider wrapped component.
 */


var BaseContextSystemProvider = function (_ref2) {
  var children = _ref2.children,
      value = _ref2.value;
  var contextValue = useContextSystemBridge({
    value: value
  });
  return /*#__PURE__*/_react.default.createElement(ComponentsContext.Provider, {
    value: contextValue
  }, children);
};

var ContextSystemProvider = /*#__PURE__*/_react.default.memo(BaseContextSystemProvider);

exports.ContextSystemProvider = ContextSystemProvider;