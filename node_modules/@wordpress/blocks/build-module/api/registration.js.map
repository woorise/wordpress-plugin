{"version":3,"sources":["@wordpress/blocks/src/api/registration.js"],"names":["camelCase","isFunction","isNil","isPlainObject","mapKeys","omit","pick","pickBy","some","applyFilters","select","dispatch","blockDefault","isValidIcon","normalizeIconObject","DEPRECATED_ENTRY_KEYS","store","blocksStore","LEGACY_CATEGORY_MAPPING","common","formatting","layout","serverSideBlockDefinitions","unstable__bootstrapServerSideBlockDefinitions","definitions","Object","keys","blockName","apiVersion","undefined","value","key","registerBlockType","name","settings","icon","keywords","attributes","providesContext","usesContext","supports","styles","save","console","error","test","getBlockType","preFilterSettings","deprecated","map","deprecation","edit","hasOwnProperty","category","getCategories","slug","warn","title","src","addBlockTypes","registerBlockCollection","namespace","addBlockCollection","unregisterBlockCollection","removeBlockCollection","unregisterBlockType","oldBlock","removeBlockTypes","setFreeformContentHandlerName","setFreeformFallbackBlockName","getFreeformContentHandlerName","getFreeformFallbackBlockName","getGroupingBlockName","setUnregisteredTypeHandlerName","setUnregisteredFallbackBlockName","getUnregisteredTypeHandlerName","getUnregisteredFallbackBlockName","setDefaultBlockName","setGroupingBlockName","getDefaultBlockName","getBlockTypes","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","isReusableBlock","blockOrType","isTemplatePart","getChildBlockNames","hasChildBlocks","hasChildBlocksWithInserterSupport","registerBlockStyle","styleVariation","addBlockStyles","unregisterBlockStyle","styleVariationName","removeBlockStyles","getBlockVariations","scope","registerBlockVariation","variation","addBlockVariations","unregisterBlockVariation","variationName","removeBlockVariations"],"mappings":"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","sourcesContent":["/* eslint no-console: [ 'error', { allow: [ 'error', 'warn' ] } ] */\n\n/**\n * External dependencies\n */\nimport {\n\tcamelCase,\n\tisFunction,\n\tisNil,\n\tisPlainObject,\n\tmapKeys,\n\tomit,\n\tpick,\n\tpickBy,\n\tsome,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters } from '@wordpress/hooks';\nimport { select, dispatch } from '@wordpress/data';\nimport { blockDefault } from '@wordpress/icons';\n\n/**\n * Internal dependencies\n */\nimport { isValidIcon, normalizeIconObject } from './utils';\nimport { DEPRECATED_ENTRY_KEYS } from './constants';\nimport { store as blocksStore } from '../store';\n\n/**\n * An icon type definition. One of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {(string|WPElement|WPComponent)} WPIcon\n *\n * @see https://developer.wordpress.org/resource/dashicons/\n */\n\n/**\n * Render behavior of a block type icon; one of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {WPIcon} WPBlockTypeIconRender\n */\n\n/**\n * An object describing a normalized block type icon.\n *\n * @typedef {Object} WPBlockTypeIconDescriptor\n *\n * @property {WPBlockTypeIconRender} src         Render behavior of the icon,\n *                                               one of a Dashicon slug, an\n *                                               element, or a component.\n * @property {string}                background  Optimal background hex string\n *                                               color when displaying icon.\n * @property {string}                foreground  Optimal foreground hex string\n *                                               color when displaying icon.\n * @property {string}                shadowColor Optimal shadow hex string\n *                                               color when displaying icon.\n */\n\n/**\n * Value to use to render the icon for a block type in an editor interface,\n * either a Dashicon slug, an element, a component, or an object describing\n * the icon.\n *\n * @typedef {(WPBlockTypeIconDescriptor|WPBlockTypeIconRender)} WPBlockTypeIcon\n */\n\n/**\n * Named block variation scopes.\n *\n * @typedef {'block'|'inserter'|'transform'} WPBlockVariationScope\n */\n\n/**\n * An object describing a variation defined for the block type.\n *\n * @typedef {Object} WPBlockVariation\n *\n * @property {string}   name                   The unique and machine-readable name.\n * @property {string}   title                  A human-readable variation title.\n * @property {string}   [description]          A detailed variation description.\n * @property {string}   [category]             Block type category classification,\n *                                             used in search interfaces to arrange\n *                                             block types by category.\n * @property {WPIcon}   [icon]                 An icon helping to visualize the variation.\n * @property {boolean}  [isDefault]            Indicates whether the current variation is\n *                                             the default one. Defaults to `false`.\n * @property {Object}   [attributes]           Values which override block attributes.\n * @property {Array[]}  [innerBlocks]          Initial configuration of nested blocks.\n * @property {Object}   [example]              Example provides structured data for\n *                                             the block preview. You can set to\n *                                             `undefined` to disable the preview shown\n *                                             for the block type.\n * @property {WPBlockVariationScope[]} [scope] The list of scopes where the variation\n *                                             is applicable. When not provided, it\n *                                             assumes all available scopes.\n * @property {string[]} [keywords]             An array of terms (which can be translated)\n *                                             that help users discover the variation\n *                                             while searching.\n * @property {Function} [isActive]             A function that accepts a block's attributes\n *                                             and the variation's attributes and determines\n *                                             if a variation is active. This function doesn't\n *                                             try to find a match dynamically based on all\n *                                             block's attributes, as in many cases some\n *                                             attributes are irrelevant. An example would\n *                                             be for `embed` block where we only care about\n *                                             `providerNameSlug` attribute's value.\n */\n\n/**\n * Defined behavior of a block type.\n *\n * @typedef {Object} WPBlock\n *\n * @property {string}             name          Block type's namespaced name.\n * @property {string}             title         Human-readable block type label.\n * @property {string}             [description] A detailed block type description.\n * @property {string}             [category]    Block type category classification,\n *                                              used in search interfaces to arrange\n *                                              block types by category.\n * @property {WPBlockTypeIcon}    [icon]        Block type icon.\n * @property {string[]}           [keywords]    Additional keywords to produce block\n *                                              type as result in search interfaces.\n * @property {Object}             [attributes]  Block type attributes.\n * @property {WPComponent}        [save]        Optional component describing\n *                                              serialized markup structure of a\n *                                              block type.\n * @property {WPComponent}        edit          Component rendering an element to\n *                                              manipulate the attributes of a block\n *                                              in the context of an editor.\n * @property {WPBlockVariation[]} [variations]  The list of block variations.\n * @property {Object}             [example]     Example provides structured data for\n *                                              the block preview. When not defined\n *                                              then no preview is shown.\n */\n\n/**\n * Mapping of legacy category slugs to their latest normal values, used to\n * accommodate updates of the default set of block categories.\n *\n * @type {Record<string,string>}\n */\nconst LEGACY_CATEGORY_MAPPING = {\n\tcommon: 'text',\n\tformatting: 'text',\n\tlayout: 'design',\n};\n\nexport const serverSideBlockDefinitions = {};\n\n/**\n * Sets the server side block definition of blocks.\n *\n * @param {Object} definitions Server-side block definitions\n */\n// eslint-disable-next-line camelcase\nexport function unstable__bootstrapServerSideBlockDefinitions( definitions ) {\n\tfor ( const blockName of Object.keys( definitions ) ) {\n\t\t// Don't overwrite if already set. It covers the case when metadata\n\t\t// was initialized from the server.\n\t\tif ( serverSideBlockDefinitions[ blockName ] ) {\n\t\t\t// We still need to polyfill `apiVersion` for WordPress version\n\t\t\t// lower than 5.7. If it isn't present in the definition shared\n\t\t\t// from the server, we try to fallback to the definition passed.\n\t\t\t// @see https://github.com/WordPress/gutenberg/pull/29279\n\t\t\tif (\n\t\t\t\tserverSideBlockDefinitions[ blockName ].apiVersion ===\n\t\t\t\t\tundefined &&\n\t\t\t\tdefinitions[ blockName ].apiVersion\n\t\t\t) {\n\t\t\t\tserverSideBlockDefinitions[ blockName ].apiVersion =\n\t\t\t\t\tdefinitions[ blockName ].apiVersion;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tserverSideBlockDefinitions[ blockName ] = mapKeys(\n\t\t\tpickBy( definitions[ blockName ], ( value ) => ! isNil( value ) ),\n\t\t\t( value, key ) => camelCase( key )\n\t\t);\n\t}\n}\n\n/**\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made available as an option to any\n * editor interface where blocks are implemented.\n *\n * @param {string} name     Block name.\n * @param {Object} settings Block settings.\n *\n * @return {?WPBlock} The block, if it has been successfully registered;\n *                    otherwise `undefined`.\n */\nexport function registerBlockType( name, settings ) {\n\tsettings = {\n\t\tname,\n\t\ticon: blockDefault,\n\t\tkeywords: [],\n\t\tattributes: {},\n\t\tprovidesContext: {},\n\t\tusesContext: [],\n\t\tsupports: {},\n\t\tstyles: [],\n\t\tsave: () => null,\n\t\t...serverSideBlockDefinitions?.[ name ],\n\t\t...settings,\n\t};\n\n\tif ( typeof name !== 'string' ) {\n\t\tconsole.error( 'Block names must be strings.' );\n\t\treturn;\n\t}\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( name ) ) {\n\t\tconsole.error(\n\t\t\t'Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block'\n\t\t);\n\t\treturn;\n\t}\n\tif ( select( blocksStore ).getBlockType( name ) ) {\n\t\tconsole.error( 'Block \"' + name + '\" is already registered.' );\n\t\treturn;\n\t}\n\n\tconst preFilterSettings = { ...settings };\n\tsettings = applyFilters( 'blocks.registerBlockType', settings, name );\n\n\tif ( settings.deprecated ) {\n\t\tsettings.deprecated = settings.deprecated.map( ( deprecation ) =>\n\t\t\tpick(\n\t\t\t\t// Only keep valid deprecation keys.\n\t\t\t\tapplyFilters(\n\t\t\t\t\t'blocks.registerBlockType',\n\t\t\t\t\t// Merge deprecation keys with pre-filter settings\n\t\t\t\t\t// so that filters that depend on specific keys being\n\t\t\t\t\t// present don't fail.\n\t\t\t\t\t{\n\t\t\t\t\t\t// Omit deprecation keys here so that deprecations\n\t\t\t\t\t\t// can opt out of specific keys like \"supports\".\n\t\t\t\t\t\t...omit( preFilterSettings, DEPRECATED_ENTRY_KEYS ),\n\t\t\t\t\t\t...deprecation,\n\t\t\t\t\t},\n\t\t\t\t\tname\n\t\t\t\t),\n\t\t\t\tDEPRECATED_ENTRY_KEYS\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( ! isPlainObject( settings ) ) {\n\t\tconsole.error( 'Block settings must be a valid object.' );\n\t\treturn;\n\t}\n\n\tif ( ! isFunction( settings.save ) ) {\n\t\tconsole.error( 'The \"save\" property must be a valid function.' );\n\t\treturn;\n\t}\n\tif ( 'edit' in settings && ! isFunction( settings.edit ) ) {\n\t\tconsole.error( 'The \"edit\" property must be a valid function.' );\n\t\treturn;\n\t}\n\n\t// Canonicalize legacy categories to equivalent fallback.\n\tif ( LEGACY_CATEGORY_MAPPING.hasOwnProperty( settings.category ) ) {\n\t\tsettings.category = LEGACY_CATEGORY_MAPPING[ settings.category ];\n\t}\n\n\tif (\n\t\t'category' in settings &&\n\t\t! some( select( blocksStore ).getCategories(), {\n\t\t\tslug: settings.category,\n\t\t} )\n\t) {\n\t\tconsole.warn(\n\t\t\t'The block \"' +\n\t\t\t\tname +\n\t\t\t\t'\" is registered with an invalid category \"' +\n\t\t\t\tsettings.category +\n\t\t\t\t'\".'\n\t\t);\n\t\tdelete settings.category;\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\tconsole.error( 'The block \"' + name + '\" must have a title.' );\n\t\treturn;\n\t}\n\tif ( typeof settings.title !== 'string' ) {\n\t\tconsole.error( 'Block titles must be strings.' );\n\t\treturn;\n\t}\n\n\tsettings.icon = normalizeIconObject( settings.icon );\n\tif ( ! isValidIcon( settings.icon.src ) ) {\n\t\tconsole.error(\n\t\t\t'The icon passed is invalid. ' +\n\t\t\t\t'The icon should be a string, an element, a function, or an object following the specifications documented in https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#icon-optional'\n\t\t);\n\t\treturn;\n\t}\n\n\tdispatch( blocksStore ).addBlockTypes( settings );\n\n\treturn settings;\n}\n\n/**\n * Registers a new block collection to group blocks in the same namespace in the inserter.\n *\n * @param {string} namespace       The namespace to group blocks by in the inserter; corresponds to the block namespace.\n * @param {Object} settings        The block collection settings.\n * @param {string} settings.title  The title to display in the block inserter.\n * @param {Object} [settings.icon] The icon to display in the block inserter.\n */\nexport function registerBlockCollection( namespace, { title, icon } ) {\n\tdispatch( blocksStore ).addBlockCollection( namespace, title, icon );\n}\n\n/**\n * Unregisters a block collection\n *\n * @param {string} namespace The namespace to group blocks by in the inserter; corresponds to the block namespace\n *\n */\nexport function unregisterBlockCollection( namespace ) {\n\tdispatch( blocksStore ).removeBlockCollection( namespace );\n}\n\n/**\n * Unregisters a block.\n *\n * @param {string} name Block name.\n *\n * @return {?WPBlock} The previous block value, if it has been successfully\n *                    unregistered; otherwise `undefined`.\n */\nexport function unregisterBlockType( name ) {\n\tconst oldBlock = select( blocksStore ).getBlockType( name );\n\tif ( ! oldBlock ) {\n\t\tconsole.error( 'Block \"' + name + '\" is not registered.' );\n\t\treturn;\n\t}\n\tdispatch( blocksStore ).removeBlockTypes( name );\n\treturn oldBlock;\n}\n\n/**\n * Assigns name of block for handling non-block content.\n *\n * @param {string} blockName Block name.\n */\nexport function setFreeformContentHandlerName( blockName ) {\n\tdispatch( blocksStore ).setFreeformFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling non-block content, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getFreeformContentHandlerName() {\n\treturn select( blocksStore ).getFreeformFallbackBlockName();\n}\n\n/**\n * Retrieves name of block used for handling grouping interactions.\n *\n * @return {?string} Block name.\n */\nexport function getGroupingBlockName() {\n\treturn select( blocksStore ).getGroupingBlockName();\n}\n\n/**\n * Assigns name of block handling unregistered block types.\n *\n * @param {string} blockName Block name.\n */\nexport function setUnregisteredTypeHandlerName( blockName ) {\n\tdispatch( blocksStore ).setUnregisteredFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling unregistered block types, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getUnregisteredTypeHandlerName() {\n\treturn select( blocksStore ).getUnregisteredFallbackBlockName();\n}\n\n/**\n * Assigns the default block name.\n *\n * @param {string} name Block name.\n */\nexport function setDefaultBlockName( name ) {\n\tdispatch( blocksStore ).setDefaultBlockName( name );\n}\n\n/**\n * Assigns name of block for handling block grouping interactions.\n *\n * @param {string} name Block name.\n */\nexport function setGroupingBlockName( name ) {\n\tdispatch( blocksStore ).setGroupingBlockName( name );\n}\n\n/**\n * Retrieves the default block name.\n *\n * @return {?string} Block name.\n */\nexport function getDefaultBlockName() {\n\treturn select( blocksStore ).getDefaultBlockName();\n}\n\n/**\n * Returns a registered block type.\n *\n * @param {string} name Block name.\n *\n * @return {?Object} Block type.\n */\nexport function getBlockType( name ) {\n\treturn select( blocksStore ).getBlockType( name );\n}\n\n/**\n * Returns all registered blocks.\n *\n * @return {Array} Block settings.\n */\nexport function getBlockTypes() {\n\treturn select( blocksStore ).getBlockTypes();\n}\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param  {(string|Object)} nameOrType      Block name or type object\n * @param  {string}          feature         Feature to retrieve\n * @param  {*}               defaultSupports Default value to return if not\n *                                           explicitly defined\n *\n * @return {?*} Block support value\n */\nexport function getBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( blocksStore ).getBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( blocksStore ).hasBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Determines whether or not the given block is a reusable block. This is a\n * special block type that is used to point to a global block stored via the\n * API.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a reusable block.\n */\nexport function isReusableBlock( blockOrType ) {\n\treturn blockOrType.name === 'core/block';\n}\n\n/**\n * Determines whether or not the given block is a template part. This is a\n * special block type that allows composing a page template out of reusable\n * design elements.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a template part.\n */\nexport function isTemplatePart( blockOrType ) {\n\treturn blockOrType.name === 'core/template-part';\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = ( blockName ) => {\n\treturn select( blocksStore ).getChildBlockNames( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( blockName ) => {\n\treturn select( blocksStore ).hasChildBlocks( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( blockName ) => {\n\treturn select( blocksStore ).hasChildBlocksWithInserterSupport( blockName );\n};\n\n/**\n * Registers a new block style variation for the given block.\n *\n * @param {string} blockName      Name of block (example: “core/latest-posts”).\n * @param {Object} styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\n */\nexport const registerBlockStyle = ( blockName, styleVariation ) => {\n\tdispatch( blocksStore ).addBlockStyles( blockName, styleVariation );\n};\n\n/**\n * Unregisters a block style variation for the given block.\n *\n * @param {string} blockName          Name of block (example: “core/latest-posts”).\n * @param {string} styleVariationName Name of class applied to the block.\n */\nexport const unregisterBlockStyle = ( blockName, styleVariationName ) => {\n\tdispatch( blocksStore ).removeBlockStyles( blockName, styleVariationName );\n};\n\n/**\n * Returns an array with the variations of a given block type.\n *\n * @param {string}                blockName Name of block (example: “core/columns”).\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @return {(WPBlockVariation[]|void)} Block variations.\n */\nexport const getBlockVariations = ( blockName, scope ) => {\n\treturn select( blocksStore ).getBlockVariations( blockName, scope );\n};\n\n/**\n * Registers a new block variation for the given block type.\n *\n * @param {string}           blockName Name of the block (example: “core/columns”).\n * @param {WPBlockVariation} variation Object describing a block variation.\n */\nexport const registerBlockVariation = ( blockName, variation ) => {\n\tdispatch( blocksStore ).addBlockVariations( blockName, variation );\n};\n\n/**\n * Unregisters a block variation defined for the given block type.\n *\n * @param {string} blockName     Name of the block (example: “core/columns”).\n * @param {string} variationName Name of the variation defined for the block.\n */\nexport const unregisterBlockVariation = ( blockName, variationName ) => {\n\tdispatch( blocksStore ).removeBlockVariations( blockName, variationName );\n};\n"]}