{"version":3,"sources":["@wordpress/blocks/src/api/factory.js"],"names":["v4","uuid","every","castArray","findIndex","isObjectLike","filter","first","flatMap","has","uniq","isFunction","isEmpty","map","createHooks","applyFilters","getBlockType","getBlockTypes","getGroupingBlockName","normalizeBlockType","__experimentalSanitizeBlockAttributes","createBlock","name","attributes","innerBlocks","sanitizedAttributes","clientId","isValid","createBlocksFromInnerBlocksTemplate","innerBlocksOrTemplate","innerBlock","innerBlockTemplate","Array","isArray","__experimentalCloneSanitizedBlock","block","mergeAttributes","newInnerBlocks","cloneBlock","isPossibleTransformForSource","transform","direction","blocks","isMultiBlock","length","firstBlockName","isValidForMultiBlocks","isWildcardBlockTransform","isBlockType","type","sourceBlock","hasMatchingName","indexOf","isContainerGroupBlock","blockName","isMatch","getBlockTypesForPossibleFromTransforms","allBlockTypes","blockTypesWithPossibleFromTransforms","blockType","fromTransforms","getBlockTransforms","findTransform","getBlockTypesForPossibleToTransforms","transformsTo","possibleTransforms","blockNames","transformation","t","includes","getPossibleBlockTransformations","blockTypesForFromTransforms","blockTypesForToTransforms","transforms","predicate","hooks","i","candidate","addFilter","toString","result","priority","blockTypeOrName","undefined","switchToBlockType","blocksArray","firstBlock","sourceName","transformationsFrom","transformationsTo","transformationResults","__experimentalConvert","currentBlock","some","firstSwitchedBlock","index","transformedBlock","getBlockFromExample","example"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { v4 as uuid } from 'uuid';\nimport {\n\tevery,\n\tcastArray,\n\tfindIndex,\n\tisObjectLike,\n\tfilter,\n\tfirst,\n\tflatMap,\n\thas,\n\tuniq,\n\tisFunction,\n\tisEmpty,\n\tmap,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createHooks, applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\tgetGroupingBlockName,\n} from './registration';\nimport {\n\tnormalizeBlockType,\n\t__experimentalSanitizeBlockAttributes,\n} from './utils';\n\n/**\n * Returns a block object given its type and attributes.\n *\n * @param {string} name        Block name.\n * @param {Object} attributes  Block attributes.\n * @param {?Array} innerBlocks Nested blocks.\n *\n * @return {Object} Block object.\n */\nexport function createBlock( name, attributes = {}, innerBlocks = [] ) {\n\tconst sanitizedAttributes = __experimentalSanitizeBlockAttributes(\n\t\tname,\n\t\tattributes\n\t);\n\n\tconst clientId = uuid();\n\n\t// Blocks are stored with a unique ID, the assigned type name, the block\n\t// attributes, and their inner blocks.\n\treturn {\n\t\tclientId,\n\t\tname,\n\t\tisValid: true,\n\t\tattributes: sanitizedAttributes,\n\t\tinnerBlocks,\n\t};\n}\n\n/**\n * Given an array of InnerBlocks templates or Block Objects,\n * returns an array of created Blocks from them.\n * It handles the case of having InnerBlocks as Blocks by\n * converting them to the proper format to continue recursively.\n *\n * @param {Array} innerBlocksOrTemplate Nested blocks or InnerBlocks templates.\n *\n * @return {Object[]} Array of Block objects.\n */\nexport function createBlocksFromInnerBlocksTemplate(\n\tinnerBlocksOrTemplate = []\n) {\n\treturn innerBlocksOrTemplate.map( ( innerBlock ) => {\n\t\tconst innerBlockTemplate = Array.isArray( innerBlock )\n\t\t\t? innerBlock\n\t\t\t: [\n\t\t\t\t\tinnerBlock.name,\n\t\t\t\t\tinnerBlock.attributes,\n\t\t\t\t\tinnerBlock.innerBlocks,\n\t\t\t  ];\n\t\tconst [ name, attributes, innerBlocks = [] ] = innerBlockTemplate;\n\t\treturn createBlock(\n\t\t\tname,\n\t\t\tattributes,\n\t\t\tcreateBlocksFromInnerBlocksTemplate( innerBlocks )\n\t\t);\n\t} );\n}\n\n/**\n * Given a block object, returns a copy of the block object while sanitizing its attributes,\n * optionally merging new attributes and/or replacing its inner blocks.\n *\n * @param {Object} block              Block instance.\n * @param {Object} mergeAttributes    Block attributes.\n * @param {?Array} newInnerBlocks     Nested blocks.\n *\n * @return {Object} A cloned block.\n */\nexport function __experimentalCloneSanitizedBlock(\n\tblock,\n\tmergeAttributes = {},\n\tnewInnerBlocks\n) {\n\tconst clientId = uuid();\n\n\tconst sanitizedAttributes = __experimentalSanitizeBlockAttributes(\n\t\tblock.name,\n\t\t{\n\t\t\t...block.attributes,\n\t\t\t...mergeAttributes,\n\t\t}\n\t);\n\n\treturn {\n\t\t...block,\n\t\tclientId,\n\t\tattributes: sanitizedAttributes,\n\t\tinnerBlocks:\n\t\t\tnewInnerBlocks ||\n\t\t\tblock.innerBlocks.map( ( innerBlock ) =>\n\t\t\t\t__experimentalCloneSanitizedBlock( innerBlock )\n\t\t\t),\n\t};\n}\n\n/**\n * Given a block object, returns a copy of the block object,\n * optionally merging new attributes and/or replacing its inner blocks.\n *\n * @param {Object} block              Block instance.\n * @param {Object} mergeAttributes    Block attributes.\n * @param {?Array} newInnerBlocks     Nested blocks.\n *\n * @return {Object} A cloned block.\n */\nexport function cloneBlock( block, mergeAttributes = {}, newInnerBlocks ) {\n\tconst clientId = uuid();\n\n\treturn {\n\t\t...block,\n\t\tclientId,\n\t\tattributes: {\n\t\t\t...block.attributes,\n\t\t\t...mergeAttributes,\n\t\t},\n\t\tinnerBlocks:\n\t\t\tnewInnerBlocks ||\n\t\t\tblock.innerBlocks.map( ( innerBlock ) => cloneBlock( innerBlock ) ),\n\t};\n}\n\n/**\n * Returns a boolean indicating whether a transform is possible based on\n * various bits of context.\n *\n * @param {Object} transform The transform object to validate.\n * @param {string} direction Is this a 'from' or 'to' transform.\n * @param {Array} blocks The blocks to transform from.\n *\n * @return {boolean} Is the transform possible?\n */\nconst isPossibleTransformForSource = ( transform, direction, blocks ) => {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn false;\n\t}\n\n\t// If multiple blocks are selected, only multi block transforms\n\t// or wildcard transforms are allowed.\n\tconst isMultiBlock = blocks.length > 1;\n\tconst firstBlockName = first( blocks ).name;\n\tconst isValidForMultiBlocks =\n\t\tisWildcardBlockTransform( transform ) ||\n\t\t! isMultiBlock ||\n\t\ttransform.isMultiBlock;\n\tif ( ! isValidForMultiBlocks ) {\n\t\treturn false;\n\t}\n\n\t// Check non-wildcard transforms to ensure that transform is valid\n\t// for a block selection of multiple blocks of different types\n\tif (\n\t\t! isWildcardBlockTransform( transform ) &&\n\t\t! every( blocks, { name: firstBlockName } )\n\t) {\n\t\treturn false;\n\t}\n\n\t// Only consider 'block' type transforms as valid.\n\tconst isBlockType = transform.type === 'block';\n\tif ( ! isBlockType ) {\n\t\treturn false;\n\t}\n\n\t// Check if the transform's block name matches the source block (or is a wildcard)\n\t// only if this is a transform 'from'.\n\tconst sourceBlock = first( blocks );\n\tconst hasMatchingName =\n\t\tdirection !== 'from' ||\n\t\ttransform.blocks.indexOf( sourceBlock.name ) !== -1 ||\n\t\tisWildcardBlockTransform( transform );\n\tif ( ! hasMatchingName ) {\n\t\treturn false;\n\t}\n\n\t// Don't allow single Grouping blocks to be transformed into\n\t// a Grouping block.\n\tif (\n\t\t! isMultiBlock &&\n\t\tisContainerGroupBlock( sourceBlock.name ) &&\n\t\tisContainerGroupBlock( transform.blockName )\n\t) {\n\t\treturn false;\n\t}\n\n\t// If the transform has a `isMatch` function specified, check that it returns true.\n\tif ( isFunction( transform.isMatch ) ) {\n\t\tconst attributes = transform.isMultiBlock\n\t\t\t? blocks.map( ( block ) => block.attributes )\n\t\t\t: sourceBlock.attributes;\n\t\tif ( ! transform.isMatch( attributes ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Returns block types that the 'blocks' can be transformed into, based on\n * 'from' transforms on other blocks.\n *\n * @param {Array}  blocks  The blocks to transform from.\n *\n * @return {Array} Block types that the blocks can be transformed into.\n */\nconst getBlockTypesForPossibleFromTransforms = ( blocks ) => {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn [];\n\t}\n\n\tconst allBlockTypes = getBlockTypes();\n\n\t// filter all blocks to find those with a 'from' transform.\n\tconst blockTypesWithPossibleFromTransforms = filter(\n\t\tallBlockTypes,\n\t\t( blockType ) => {\n\t\t\tconst fromTransforms = getBlockTransforms( 'from', blockType.name );\n\n\t\t\treturn !! findTransform( fromTransforms, ( transform ) => {\n\t\t\t\treturn isPossibleTransformForSource(\n\t\t\t\t\ttransform,\n\t\t\t\t\t'from',\n\t\t\t\t\tblocks\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\t);\n\n\treturn blockTypesWithPossibleFromTransforms;\n};\n\n/**\n * Returns block types that the 'blocks' can be transformed into, based on\n * the source block's own 'to' transforms.\n *\n * @param {Array} blocks The blocks to transform from.\n *\n * @return {Array} Block types that the source can be transformed into.\n */\nconst getBlockTypesForPossibleToTransforms = ( blocks ) => {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn [];\n\t}\n\n\tconst sourceBlock = first( blocks );\n\tconst blockType = getBlockType( sourceBlock.name );\n\tconst transformsTo = getBlockTransforms( 'to', blockType.name );\n\n\t// filter all 'to' transforms to find those that are possible.\n\tconst possibleTransforms = filter( transformsTo, ( transform ) => {\n\t\treturn (\n\t\t\ttransform && isPossibleTransformForSource( transform, 'to', blocks )\n\t\t);\n\t} );\n\n\t// Build a list of block names using the possible 'to' transforms.\n\tconst blockNames = flatMap(\n\t\tpossibleTransforms,\n\t\t( transformation ) => transformation.blocks\n\t);\n\n\t// Map block names to block types.\n\treturn blockNames.map( ( name ) => getBlockType( name ) );\n};\n\n/**\n * Determines whether transform is a \"block\" type\n * and if so whether it is a \"wildcard\" transform\n * ie: targets \"any\" block type\n *\n * @param {Object} t the Block transform object\n *\n * @return {boolean} whether transform is a wildcard transform\n */\nexport const isWildcardBlockTransform = ( t ) =>\n\tt &&\n\tt.type === 'block' &&\n\tArray.isArray( t.blocks ) &&\n\tt.blocks.includes( '*' );\n\n/**\n * Determines whether the given Block is the core Block which\n * acts as a container Block for other Blocks as part of the\n * Grouping mechanics\n *\n * @param  {string} name the name of the Block to test against\n *\n * @return {boolean} whether or not the Block is the container Block type\n */\nexport const isContainerGroupBlock = ( name ) =>\n\tname === getGroupingBlockName();\n\n/**\n * Returns an array of block types that the set of blocks received as argument\n * can be transformed into.\n *\n * @param {Array} blocks Blocks array.\n *\n * @return {Array} Block types that the blocks argument can be transformed to.\n */\nexport function getPossibleBlockTransformations( blocks ) {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn [];\n\t}\n\n\tconst blockTypesForFromTransforms = getBlockTypesForPossibleFromTransforms(\n\t\tblocks\n\t);\n\tconst blockTypesForToTransforms = getBlockTypesForPossibleToTransforms(\n\t\tblocks\n\t);\n\n\treturn uniq( [\n\t\t...blockTypesForFromTransforms,\n\t\t...blockTypesForToTransforms,\n\t] );\n}\n\n/**\n * Given an array of transforms, returns the highest-priority transform where\n * the predicate function returns a truthy value. A higher-priority transform\n * is one with a lower priority value (i.e. first in priority order). Returns\n * null if the transforms set is empty or the predicate function returns a\n * falsey value for all entries.\n *\n * @param {Object[]} transforms Transforms to search.\n * @param {Function} predicate  Function returning true on matching transform.\n *\n * @return {?Object} Highest-priority transform candidate.\n */\nexport function findTransform( transforms, predicate ) {\n\t// The hooks library already has built-in mechanisms for managing priority\n\t// queue, so leverage via locally-defined instance.\n\tconst hooks = createHooks();\n\n\tfor ( let i = 0; i < transforms.length; i++ ) {\n\t\tconst candidate = transforms[ i ];\n\t\tif ( predicate( candidate ) ) {\n\t\t\thooks.addFilter(\n\t\t\t\t'transform',\n\t\t\t\t'transform/' + i.toString(),\n\t\t\t\t( result ) => ( result ? result : candidate ),\n\t\t\t\tcandidate.priority\n\t\t\t);\n\t\t}\n\t}\n\n\t// Filter name is arbitrarily chosen but consistent with above aggregation.\n\treturn hooks.applyFilters( 'transform', null );\n}\n\n/**\n * Returns normal block transforms for a given transform direction, optionally\n * for a specific block by name, or an empty array if there are no transforms.\n * If no block name is provided, returns transforms for all blocks. A normal\n * transform object includes `blockName` as a property.\n *\n * @param {string}  direction Transform direction (\"to\", \"from\").\n * @param {string|Object} blockTypeOrName  Block type or name.\n *\n * @return {Array} Block transforms for direction.\n */\nexport function getBlockTransforms( direction, blockTypeOrName ) {\n\t// When retrieving transforms for all block types, recurse into self.\n\tif ( blockTypeOrName === undefined ) {\n\t\treturn flatMap( getBlockTypes(), ( { name } ) =>\n\t\t\tgetBlockTransforms( direction, name )\n\t\t);\n\t}\n\n\t// Validate that block type exists and has array of direction.\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tconst { name: blockName, transforms } = blockType || {};\n\tif ( ! transforms || ! Array.isArray( transforms[ direction ] ) ) {\n\t\treturn [];\n\t}\n\n\t// Map transforms to normal form.\n\treturn transforms[ direction ].map( ( transform ) => ( {\n\t\t...transform,\n\t\tblockName,\n\t} ) );\n}\n\n/**\n * Switch one or more blocks into one or more blocks of the new block type.\n *\n * @param {Array|Object} blocks Blocks array or block object.\n * @param {string}       name   Block name.\n *\n * @return {?Array} Array of blocks or null.\n */\nexport function switchToBlockType( blocks, name ) {\n\tconst blocksArray = castArray( blocks );\n\tconst isMultiBlock = blocksArray.length > 1;\n\tconst firstBlock = blocksArray[ 0 ];\n\tconst sourceName = firstBlock.name;\n\n\t// Find the right transformation by giving priority to the \"to\"\n\t// transformation.\n\tconst transformationsFrom = getBlockTransforms( 'from', name );\n\tconst transformationsTo = getBlockTransforms( 'to', sourceName );\n\n\tconst transformation =\n\t\tfindTransform(\n\t\t\ttransformationsTo,\n\t\t\t( t ) =>\n\t\t\t\tt.type === 'block' &&\n\t\t\t\t( isWildcardBlockTransform( t ) ||\n\t\t\t\t\tt.blocks.indexOf( name ) !== -1 ) &&\n\t\t\t\t( ! isMultiBlock || t.isMultiBlock )\n\t\t) ||\n\t\tfindTransform(\n\t\t\ttransformationsFrom,\n\t\t\t( t ) =>\n\t\t\t\tt.type === 'block' &&\n\t\t\t\t( isWildcardBlockTransform( t ) ||\n\t\t\t\t\tt.blocks.indexOf( sourceName ) !== -1 ) &&\n\t\t\t\t( ! isMultiBlock || t.isMultiBlock )\n\t\t);\n\n\t// Stop if there is no valid transformation.\n\tif ( ! transformation ) {\n\t\treturn null;\n\t}\n\n\tlet transformationResults;\n\n\tif ( transformation.isMultiBlock ) {\n\t\tif ( has( transformation, '__experimentalConvert' ) ) {\n\t\t\ttransformationResults = transformation.__experimentalConvert(\n\t\t\t\tblocksArray\n\t\t\t);\n\t\t} else {\n\t\t\ttransformationResults = transformation.transform(\n\t\t\t\tblocksArray.map( ( currentBlock ) => currentBlock.attributes ),\n\t\t\t\tblocksArray.map( ( currentBlock ) => currentBlock.innerBlocks )\n\t\t\t);\n\t\t}\n\t} else if ( has( transformation, '__experimentalConvert' ) ) {\n\t\ttransformationResults = transformation.__experimentalConvert(\n\t\t\tfirstBlock\n\t\t);\n\t} else {\n\t\ttransformationResults = transformation.transform(\n\t\t\tfirstBlock.attributes,\n\t\t\tfirstBlock.innerBlocks\n\t\t);\n\t}\n\n\t// Ensure that the transformation function returned an object or an array\n\t// of objects.\n\tif ( ! isObjectLike( transformationResults ) ) {\n\t\treturn null;\n\t}\n\n\t// If the transformation function returned a single object, we want to work\n\t// with an array instead.\n\ttransformationResults = castArray( transformationResults );\n\n\t// Ensure that every block object returned by the transformation has a\n\t// valid block type.\n\tif (\n\t\ttransformationResults.some(\n\t\t\t( result ) => ! getBlockType( result.name )\n\t\t)\n\t) {\n\t\treturn null;\n\t}\n\n\tconst firstSwitchedBlock = findIndex(\n\t\ttransformationResults,\n\t\t( result ) => result.name === name\n\t);\n\n\t// Ensure that at least one block object returned by the transformation has\n\t// the expected \"destination\" block type.\n\tif ( firstSwitchedBlock < 0 ) {\n\t\treturn null;\n\t}\n\n\treturn transformationResults.map( ( result, index ) => {\n\t\tconst transformedBlock = {\n\t\t\t...result,\n\t\t\t// The first transformed block whose type matches the \"destination\"\n\t\t\t// type gets to keep the existing client ID of the first block.\n\t\t\tclientId:\n\t\t\t\tindex === firstSwitchedBlock\n\t\t\t\t\t? firstBlock.clientId\n\t\t\t\t\t: result.clientId,\n\t\t};\n\n\t\t/**\n\t\t * Filters an individual transform result from block transformation.\n\t\t * All of the original blocks are passed, since transformations are\n\t\t * many-to-many, not one-to-one.\n\t\t *\n\t\t * @param {Object}   transformedBlock The transformed block.\n\t\t * @param {Object[]} blocks           Original blocks transformed.\n\t\t */\n\t\treturn applyFilters(\n\t\t\t'blocks.switchToBlockType.transformedBlock',\n\t\t\ttransformedBlock,\n\t\t\tblocks\n\t\t);\n\t} );\n}\n\n/**\n * Create a block object from the example API.\n *\n * @param {string} name\n * @param {Object} example\n *\n * @return {Object} block.\n */\nexport const getBlockFromExample = ( name, example ) => {\n\treturn createBlock(\n\t\tname,\n\t\texample.attributes,\n\t\tmap( example.innerBlocks, ( innerBlock ) =>\n\t\t\tgetBlockFromExample( innerBlock.name, innerBlock )\n\t\t)\n\t);\n};\n"]}