"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextDecorationEdit = TextDecorationEdit;
exports.useIsTextDecorationDisabled = useIsTextDecorationDisabled;
exports.TEXT_DECORATION_SUPPORT_KEY = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _blocks = require("@wordpress/blocks");

var _textDecorationControl = _interopRequireDefault(require("../components/text-decoration-control"));

var _useEditorFeature = _interopRequireDefault(require("../components/use-editor-feature"));

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Key within block settings' supports array indicating support for text
 * decorations e.g. settings found in `block.json`.
 */
var TEXT_DECORATION_SUPPORT_KEY = '__experimentalTextDecoration';
/**
 * Inspector control panel containing the text decoration options.
 *
 * @param  {Object} props Block properties.
 * @return {WPElement}    Text decoration edit element.
 */

exports.TEXT_DECORATION_SUPPORT_KEY = TEXT_DECORATION_SUPPORT_KEY;

function TextDecorationEdit(props) {
  var _style$typography;

  var style = props.attributes.style,
      setAttributes = props.setAttributes;
  var isDisabled = useIsTextDecorationDisabled(props);

  if (isDisabled) {
    return null;
  }

  function onChange(newDecoration) {
    setAttributes({
      style: (0, _utils.cleanEmptyObject)(_objectSpread(_objectSpread({}, style), {}, {
        typography: _objectSpread(_objectSpread({}, style === null || style === void 0 ? void 0 : style.typography), {}, {
          textDecoration: newDecoration
        })
      }))
    });
  }

  return (0, _element.createElement)(_textDecorationControl.default, {
    value: style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.textDecoration,
    onChange: onChange
  });
}
/**
 * Checks if text-decoration settings have been disabled.
 *
 * @param  {string} name Name of the block.
 * @return {boolean}     Whether or not the setting is disabled.
 */


function useIsTextDecorationDisabled() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      blockName = _ref.name;

  var notSupported = !(0, _blocks.hasBlockSupport)(blockName, TEXT_DECORATION_SUPPORT_KEY);
  var hasTextDecoration = (0, _useEditorFeature.default)('typography.customTextDecorations');
  return notSupported || !hasTextDecoration;
}
//# sourceMappingURL=text-decoration.js.map