"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FontAppearanceEdit = FontAppearanceEdit;
exports.useIsFontStyleDisabled = useIsFontStyleDisabled;
exports.useIsFontWeightDisabled = useIsFontWeightDisabled;
exports.useIsFontAppearanceDisabled = useIsFontAppearanceDisabled;
exports.FONT_WEIGHT_SUPPORT_KEY = exports.FONT_STYLE_SUPPORT_KEY = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _blocks = require("@wordpress/blocks");

var _fontAppearanceControl = _interopRequireDefault(require("../components/font-appearance-control"));

var _useEditorFeature = _interopRequireDefault(require("../components/use-editor-feature"));

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Key within block settings' support array indicating support for font style.
 */
var FONT_STYLE_SUPPORT_KEY = '__experimentalFontStyle';
/**
 * Key within block settings' support array indicating support for font weight.
 */

exports.FONT_STYLE_SUPPORT_KEY = FONT_STYLE_SUPPORT_KEY;
var FONT_WEIGHT_SUPPORT_KEY = '__experimentalFontWeight';
/**
 * Inspector control panel containing the font appearance options.
 *
 * @param  {Object} props Block properties.
 * @return {WPElement}    Font appearance edit element.
 */

exports.FONT_WEIGHT_SUPPORT_KEY = FONT_WEIGHT_SUPPORT_KEY;

function FontAppearanceEdit(props) {
  var _style$typography, _style$typography2;

  var style = props.attributes.style,
      setAttributes = props.setAttributes;
  var hasFontStyles = !useIsFontStyleDisabled(props);
  var hasFontWeights = !useIsFontWeightDisabled(props);

  if (!hasFontStyles && !hasFontWeights) {
    return null;
  }

  var onChange = function onChange(newStyles) {
    setAttributes({
      style: (0, _utils.cleanEmptyObject)(_objectSpread(_objectSpread({}, style), {}, {
        typography: _objectSpread(_objectSpread({}, style === null || style === void 0 ? void 0 : style.typography), {}, {
          fontStyle: newStyles.fontStyle,
          fontWeight: newStyles.fontWeight
        })
      }))
    });
  };

  var fontStyle = style === null || style === void 0 ? void 0 : (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontStyle;
  var fontWeight = style === null || style === void 0 ? void 0 : (_style$typography2 = style.typography) === null || _style$typography2 === void 0 ? void 0 : _style$typography2.fontWeight;
  return (0, _element.createElement)(_fontAppearanceControl.default, {
    onChange: onChange,
    hasFontStyles: hasFontStyles,
    hasFontWeights: hasFontWeights,
    value: {
      fontStyle: fontStyle,
      fontWeight: fontWeight
    }
  });
}
/**
 * Checks if font style support has been disabled either by not opting in for
 * support or by failing to provide preset styles.
 *
 * @param  {Object} props      Block properties.
 * @param  {string} props.name Name for the block type.
 * @return {boolean}           Whether font style support has been disabled.
 */


function useIsFontStyleDisabled() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      blockName = _ref.name;

  var styleSupport = (0, _blocks.hasBlockSupport)(blockName, FONT_STYLE_SUPPORT_KEY);
  var hasFontStyles = (0, _useEditorFeature.default)('typography.customFontStyle');
  return !styleSupport || !hasFontStyles;
}
/**
 * Checks if font weight support has been disabled either by not opting in for
 * support or by failing to provide preset weights.
 *
 * @param  {Object} props      Block properties.
 * @param  {string} props.name Name for the block type.
 * @return {boolean}           Whether font weight support has been disabled.
 */


function useIsFontWeightDisabled() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      blockName = _ref2.name;

  var weightSupport = (0, _blocks.hasBlockSupport)(blockName, FONT_WEIGHT_SUPPORT_KEY);
  var hasFontWeights = (0, _useEditorFeature.default)('typography.customFontWeight');
  return !weightSupport || !hasFontWeights;
}
/**
 * Checks if font appearance support has been disabled.
 *
 * @param  {Object} props      Block properties.
 * @return {boolean}           Whether font appearance support has been disabled.
 */


function useIsFontAppearanceDisabled(props) {
  var stylesDisabled = useIsFontStyleDisabled(props);
  var weightsDisabled = useIsFontWeightDisabled(props);
  return stylesDisabled && weightsDisabled;
}
//# sourceMappingURL=font-appearance.js.map