"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BorderPanel = BorderPanel;
exports.hasBorderSupport = hasBorderSupport;
exports.BORDER_SUPPORT_KEY = void 0;

var _element = require("@wordpress/element");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _inspectorControls = _interopRequireDefault(require("../components/inspector-controls"));

var _borderRadius = require("./border-radius");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var BORDER_SUPPORT_KEY = '__experimentalBorder';
exports.BORDER_SUPPORT_KEY = BORDER_SUPPORT_KEY;

function BorderPanel(props) {
  var isDisabled = useIsBorderDisabled(props);
  var isSupported = hasBorderSupport(props.name);

  if (isDisabled || !isSupported) {
    return null;
  }

  return (0, _element.createElement)(_inspectorControls.default, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Border settings')
  }, (0, _element.createElement)(_borderRadius.BorderRadiusEdit, props)));
}
/**
 * Determine whether there is block support for borders.
 *
 * @param {string} blockName Block name.
 * @return {boolean}         Whether there is support.
 */


function hasBorderSupport(blockName) {
  if (_element.Platform.OS !== 'web') {
    return false;
  }

  var support = (0, _blocks.getBlockSupport)(blockName, BORDER_SUPPORT_KEY); // Further border properties to be added in future iterations.
  // e.g. support && ( support.radius || support.width || support.style )

  return !!(true === support || support !== null && support !== void 0 && support.radius);
}
/**
 * Determines whether there is any block support for borders e.g. border radius,
 * style, width etc.
 *
 * @param  {Object} props Block properties.
 * @return {boolean}      If border support is completely disabled.
 */


var useIsBorderDisabled = function useIsBorderDisabled() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  // Further border properties to be added in future iterations.
  // e.g. const configs = [
  // 		useIsBorderRadiusDisabled( props ),
  //		useIsBorderWidthDisabled( props ),
  // ];
  var configs = [(0, _borderRadius.useIsBorderRadiusDisabled)(props)];
  return configs.every(Boolean);
};
//# sourceMappingURL=border.js.map