{"version":3,"sources":["@wordpress/block-editor/src/hooks/line-height.js"],"names":["LINE_HEIGHT_SUPPORT_KEY","LineHeightEdit","props","style","attributes","isDisabled","useIsLineHeightDisabled","onChange","newLineHeightValue","newStyle","typography","lineHeight","setAttributes","blockName","name"],"mappings":";;;;;;;;;;;;;;;AAGA;;AAKA;;AACA;;AACA;;;;;;AAEO,IAAMA,uBAAuB,GAAG,YAAhC;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAASC,cAAT,CAAyBC,KAAzB,EAAiC;AAAA;;AAAA,MAExBC,KAFwB,GAGnCD,KAHmC,CAEtCE,UAFsC,CAExBD,KAFwB;AAIvC,MAAME,UAAU,GAAGC,uBAAuB,CAAEJ,KAAF,CAA1C;;AAEA,MAAKG,UAAL,EAAkB;AACjB,WAAO,IAAP;AACA;;AAED,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAAEC,kBAAF,EAA0B;AAC1C,QAAMC,QAAQ,mCACVN,KADU;AAEbO,MAAAA,UAAU,kCACNP,KADM,aACNA,KADM,uBACNA,KAAK,CAAEO,UADD;AAETC,QAAAA,UAAU,EAAEH;AAFH;AAFG,MAAd;;AAOAN,IAAAA,KAAK,CAACU,aAAN,CAAqB;AACpBT,MAAAA,KAAK,EAAE,6BAAkBM,QAAlB;AADa,KAArB;AAGA,GAXD;;AAYA,SACC,4BAAC,0BAAD;AACC,IAAA,KAAK,EAAGN,KAAH,aAAGA,KAAH,4CAAGA,KAAK,CAAEO,UAAV,sDAAG,kBAAmBC,UAD5B;AAEC,IAAA,QAAQ,EAAGJ;AAFZ,IADD;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASD,uBAAT,GAA6D;AAAA,iFAAL,EAAK;AAAA,MAAnBO,SAAmB,QAAzBC,IAAyB;;AACnE,MAAMT,UAAU,GAAG,CAAE,+BAAkB,6BAAlB,CAArB;AAEA,SACC,CAAE,6BAAiBQ,SAAjB,EAA4Bb,uBAA5B,CAAF,IAA2DK,UAD5D;AAGA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { hasBlockSupport } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport LineHeightControl from '../components/line-height-control';\nimport { cleanEmptyObject } from './utils';\nimport useEditorFeature from '../components/use-editor-feature';\n\nexport const LINE_HEIGHT_SUPPORT_KEY = 'lineHeight';\n\n/**\n * Inspector control panel containing the line height related configuration\n *\n * @param {Object} props\n *\n * @return {WPElement} Line height edit element.\n */\nexport function LineHeightEdit( props ) {\n\tconst {\n\t\tattributes: { style },\n\t} = props;\n\tconst isDisabled = useIsLineHeightDisabled( props );\n\n\tif ( isDisabled ) {\n\t\treturn null;\n\t}\n\n\tconst onChange = ( newLineHeightValue ) => {\n\t\tconst newStyle = {\n\t\t\t...style,\n\t\t\ttypography: {\n\t\t\t\t...style?.typography,\n\t\t\t\tlineHeight: newLineHeightValue,\n\t\t\t},\n\t\t};\n\t\tprops.setAttributes( {\n\t\t\tstyle: cleanEmptyObject( newStyle ),\n\t\t} );\n\t};\n\treturn (\n\t\t<LineHeightControl\n\t\t\tvalue={ style?.typography?.lineHeight }\n\t\t\tonChange={ onChange }\n\t\t/>\n\t);\n}\n\n/**\n * Custom hook that checks if line-height settings have been disabled.\n *\n * @param {string} name The name of the block.\n * @return {boolean} Whether setting is disabled.\n */\nexport function useIsLineHeightDisabled( { name: blockName } = {} ) {\n\tconst isDisabled = ! useEditorFeature( 'typography.customLineHeight' );\n\n\treturn (\n\t\t! hasBlockSupport( blockName, LINE_HEIGHT_SUPPORT_KEY ) || isDisabled\n\t);\n}\n"]}