{"version":3,"sources":["@wordpress/block-editor/src/components/block-alignment-control/use-available-alignments.js"],"names":["DEFAULT_CONTROLS","WIDE_CONTROLS","useAvailableAlignments","controls","select","blockEditorStore","getSettings","settings","wideControlsEnabled","alignWide","layout","supportsAlignments","type","alignments","availableAlignments","enabledControls","filter","control","includes"],"mappings":";;;;;;;AAGA;;AAKA;;AACA;;AATA;AACA;AACA;;AAGA;AACA;AACA;AAIA,IAAMA,gBAAgB,GAAG,CAAE,MAAF,EAAU,QAAV,EAAoB,OAApB,EAA6B,MAA7B,EAAqC,MAArC,CAAzB;AACA,IAAMC,aAAa,GAAG,CAAE,MAAF,EAAU,MAAV,CAAtB;;AAEe,SAASC,sBAAT,GAA+D;AAAA,MAA9BC,QAA8B,uEAAnBH,gBAAmB;;AAAA,mBACrC,qBAAW,UAAEI,MAAF,EAAc;AAAA,kBACxCA,MAAM,CAAEC,YAAF,CADkC;AAAA,QACxDC,WADwD,WACxDA,WADwD;;AAEhE,QAAMC,QAAQ,GAAGD,WAAW,EAA5B;AACA,WAAO;AACNE,MAAAA,mBAAmB,EAAED,QAAQ,CAACE;AADxB,KAAP;AAGA,GANuC,EAMrC,EANqC,CADqC;AAAA,yCACrED,mBADqE;AAAA,MACrEA,mBADqE,sCAC/C,KAD+C;;AAQ7E,MAAME,MAAM,GAAG,wBAAf;AACA,MAAMC,kBAAkB,GAAGD,MAAM,CAACE,IAAP,KAAgB,SAA3C;;AAEA,MAAK,CAAED,kBAAP,EAA4B;AAC3B,WAAO,EAAP;AACA;;AAb4E,2BAcdD,MAdc,CAcrEG,UAdqE;AAAA,MAczDC,mBAdyD,mCAcnCd,gBAdmC;AAe7E,MAAMe,eAAe,GAAGZ,QAAQ,CAACa,MAAT,CACvB,UAAEC,OAAF;AAAA,WACC,CAAEP,MAAM,CAACG,UAAP,IAAqB;AACtBL,IAAAA,mBADC,IAED,CAAEP,aAAa,CAACiB,QAAd,CAAwBD,OAAxB,CAFH,KAGAH,mBAAmB,CAACI,QAApB,CAA8BD,OAA9B,CAJD;AAAA,GADuB,CAAxB;AAQA,SAAOF,eAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { useLayout } from '../block-list/layout';\nimport { store as blockEditorStore } from '../../store';\n\nconst DEFAULT_CONTROLS = [ 'left', 'center', 'right', 'wide', 'full' ];\nconst WIDE_CONTROLS = [ 'wide', 'full' ];\n\nexport default function useAvailableAlignments( controls = DEFAULT_CONTROLS ) {\n\tconst { wideControlsEnabled = false } = useSelect( ( select ) => {\n\t\tconst { getSettings } = select( blockEditorStore );\n\t\tconst settings = getSettings();\n\t\treturn {\n\t\t\twideControlsEnabled: settings.alignWide,\n\t\t};\n\t}, [] );\n\tconst layout = useLayout();\n\tconst supportsAlignments = layout.type === 'default';\n\n\tif ( ! supportsAlignments ) {\n\t\treturn [];\n\t}\n\tconst { alignments: availableAlignments = DEFAULT_CONTROLS } = layout;\n\tconst enabledControls = controls.filter(\n\t\t( control ) =>\n\t\t\t( layout.alignments || // Ignore the global wideAlignment check if the layout explicitely defines alignments.\n\t\t\t\twideControlsEnabled ||\n\t\t\t\t! WIDE_CONTROLS.includes( control ) ) &&\n\t\t\tavailableAlignments.includes( control )\n\t);\n\n\treturn enabledControls;\n}\n"]}