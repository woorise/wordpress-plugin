"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

var _blockIcon = _interopRequireDefault(require("../block-icon"));

var _previewBlockPopover = _interopRequireDefault(require("./preview-block-popover"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var BlockTransformationsMenu = function BlockTransformationsMenu(_ref) {
  var className = _ref.className,
      possibleBlockTransformations = _ref.possibleBlockTransformations,
      onSelect = _ref.onSelect,
      blocks = _ref.blocks;

  var _useState = (0, _element.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      hoveredTransformItemName = _useState2[0],
      setHoveredTransformItemName = _useState2[1];

  return (0, _element.createElement)(_components.MenuGroup, {
    label: (0, _i18n.__)('Transform to'),
    className: className
  }, hoveredTransformItemName && (0, _element.createElement)(_previewBlockPopover.default, {
    blocks: (0, _blocks.switchToBlockType)(blocks, hoveredTransformItemName)
  }), possibleBlockTransformations.map(function (item) {
    var name = item.name,
        icon = item.icon,
        title = item.title,
        isDisabled = item.isDisabled;
    return (0, _element.createElement)(_components.MenuItem, {
      key: name,
      className: (0, _blocks.getBlockMenuDefaultClassName)(name),
      onClick: function onClick(event) {
        event.preventDefault();
        onSelect(name);
      },
      disabled: isDisabled,
      onMouseLeave: function onMouseLeave() {
        return setHoveredTransformItemName(null);
      },
      onMouseEnter: function onMouseEnter() {
        return setHoveredTransformItemName(name);
      }
    }, (0, _element.createElement)(_blockIcon.default, {
      icon: icon,
      showColors: true
    }), title);
  }));
};

var _default = BlockTransformationsMenu;
exports.default = _default;
//# sourceMappingURL=block-transformations-menu.js.map