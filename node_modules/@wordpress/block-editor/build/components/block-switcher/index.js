"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BlockSwitcher = exports.BlockSwitcherDropdownMenu = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blocks2 = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _icons = require("@wordpress/icons");

var _store = require("../../store");

var _useBlockDisplayInformation = _interopRequireDefault(require("../use-block-display-information"));

var _blockIcon = _interopRequireDefault(require("../block-icon"));

var _blockTitle = _interopRequireDefault(require("../block-title"));

var _blockTransformationsMenu = _interopRequireDefault(require("./block-transformations-menu"));

var _blockStylesMenu = _interopRequireDefault(require("./block-styles-menu"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var BlockSwitcherDropdownMenu = function BlockSwitcherDropdownMenu(_ref) {
  var clientIds = _ref.clientIds,
      blocks = _ref.blocks;

  var _useDispatch = (0, _data.useDispatch)(_store.store),
      replaceBlocks = _useDispatch.replaceBlocks;

  var blockInformation = (0, _useBlockDisplayInformation.default)(blocks[0].clientId);

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select(_store.store),
        getBlockRootClientId = _select.getBlockRootClientId,
        getBlockTransformItems = _select.getBlockTransformItems;

    var _select2 = select(_blocks2.store),
        getBlockStyles = _select2.getBlockStyles,
        getBlockType = _select2.getBlockType;

    var rootClientId = getBlockRootClientId((0, _lodash.castArray)(clientIds)[0]);

    var _blocks = (0, _slicedToArray2.default)(blocks, 1),
        firstBlockName = _blocks[0].name;

    var _isSingleBlockSelected = blocks.length === 1;

    var styles = _isSingleBlockSelected && getBlockStyles(firstBlockName);

    var _icon;

    if (_isSingleBlockSelected) {
      _icon = blockInformation === null || blockInformation === void 0 ? void 0 : blockInformation.icon; // Take into account active block variations.
    } else {
      var _getBlockType;

      var isSelectionOfSameType = (0, _lodash.uniq)(blocks.map(function (_ref2) {
        var name = _ref2.name;
        return name;
      })).length === 1; // When selection consists of blocks of multiple types, display an
      // appropriate icon to communicate the non-uniformity.

      _icon = isSelectionOfSameType ? (_getBlockType = getBlockType(firstBlockName)) === null || _getBlockType === void 0 ? void 0 : _getBlockType.icon : _icons.stack;
    }

    return {
      possibleBlockTransformations: getBlockTransformItems(blocks, rootClientId),
      hasBlockStyles: !!(styles !== null && styles !== void 0 && styles.length),
      icon: _icon,
      blockTitle: getBlockType(firstBlockName).title
    };
  }, [clientIds, blocks, blockInformation === null || blockInformation === void 0 ? void 0 : blockInformation.icon]),
      possibleBlockTransformations = _useSelect.possibleBlockTransformations,
      hasBlockStyles = _useSelect.hasBlockStyles,
      icon = _useSelect.icon,
      blockTitle = _useSelect.blockTitle;

  var isReusable = blocks.length === 1 && (0, _blocks2.isReusableBlock)(blocks[0]);
  var isTemplate = blocks.length === 1 && (0, _blocks2.isTemplatePart)(blocks[0]);

  var onTransform = function onTransform(name) {
    return replaceBlocks(clientIds, (0, _blocks2.switchToBlockType)(blocks, name));
  };

  var hasPossibleBlockTransformations = !!possibleBlockTransformations.length;

  if (!hasBlockStyles && !hasPossibleBlockTransformations) {
    return (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarButton, {
      disabled: true,
      className: "block-editor-block-switcher__no-switcher-icon",
      title: blockTitle,
      icon: (0, _element.createElement)(_blockIcon.default, {
        icon: icon,
        showColors: true
      })
    }));
  }

  var blockSwitcherLabel = blockTitle;
  var blockSwitcherDescription = 1 === blocks.length ? (0, _i18n.__)('Change block type or style') : (0, _i18n.sprintf)(
  /* translators: %s: number of blocks. */
  (0, _i18n._n)('Change type of %d block', 'Change type of %d blocks', blocks.length), blocks.length);
  return (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarItem, null, function (toggleProps) {
    return (0, _element.createElement)(_components.DropdownMenu, {
      className: "block-editor-block-switcher",
      label: blockSwitcherLabel,
      popoverProps: {
        position: 'bottom right',
        isAlternate: true,
        className: 'block-editor-block-switcher__popover'
      },
      icon: (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockIcon.default, {
        icon: icon,
        className: "block-editor-block-switcher__toggle",
        showColors: true
      }), (isReusable || isTemplate) && (0, _element.createElement)("span", {
        className: "block-editor-block-switcher__toggle-text"
      }, (0, _element.createElement)(_blockTitle.default, {
        clientId: clientIds
      }))),
      toggleProps: _objectSpread({
        describedBy: blockSwitcherDescription
      }, toggleProps),
      menuProps: {
        orientation: 'both'
      }
    }, function (_ref3) {
      var onClose = _ref3.onClose;
      return (hasBlockStyles || hasPossibleBlockTransformations) && (0, _element.createElement)("div", {
        className: "block-editor-block-switcher__container"
      }, hasPossibleBlockTransformations && (0, _element.createElement)(_blockTransformationsMenu.default, {
        className: "block-editor-block-switcher__transforms__menugroup",
        possibleBlockTransformations: possibleBlockTransformations,
        blocks: blocks,
        onSelect: function onSelect(name) {
          onTransform(name);
          onClose();
        }
      }), hasBlockStyles && (0, _element.createElement)(_blockStylesMenu.default, {
        hoveredBlock: blocks[0],
        onSwitch: onClose
      }));
    });
  }));
};

exports.BlockSwitcherDropdownMenu = BlockSwitcherDropdownMenu;

var BlockSwitcher = function BlockSwitcher(_ref4) {
  var clientIds = _ref4.clientIds;
  var blocks = (0, _data.useSelect)(function (select) {
    return select(_store.store).getBlocksByClientId(clientIds);
  }, [clientIds]);

  if (!blocks.length || blocks.some(function (block) {
    return !block;
  })) {
    return null;
  }

  return (0, _element.createElement)(BlockSwitcherDropdownMenu, {
    clientIds: clientIds,
    blocks: blocks
  });
};

exports.BlockSwitcher = BlockSwitcher;
var _default = BlockSwitcher;
exports.default = _default;
//# sourceMappingURL=index.js.map