"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

/**
 * WordPress dependencies
 */
var icons = {
  left: _icons.justifyLeft,
  center: _icons.justifyCenter,
  right: _icons.justifyRight,
  'space-between': _icons.justifySpaceBetween
};

function JustifyContentUI(_ref) {
  var _ref$allowedControls = _ref.allowedControls,
      allowedControls = _ref$allowedControls === void 0 ? ['left', 'center', 'right', 'space-between'] : _ref$allowedControls,
      _ref$isCollapsed = _ref.isCollapsed,
      isCollapsed = _ref$isCollapsed === void 0 ? true : _ref$isCollapsed,
      onChange = _ref.onChange,
      value = _ref.value,
      popoverProps = _ref.popoverProps,
      isToolbar = _ref.isToolbar,
      _ref$isToolbarButton = _ref.isToolbarButton,
      isToolbarButton = _ref$isToolbarButton === void 0 ? true : _ref$isToolbarButton;

  // If the control is already selected we want a click
  // again on the control to deselect the item, so we
  // call onChange( undefined )
  var handleClick = function handleClick(next) {
    if (next === value) {
      onChange(undefined);
    } else {
      onChange(next);
    }
  };

  var icon = value ? icons[value] : icons.left;
  var allControls = [{
    name: 'left',
    icon: _icons.justifyLeft,
    title: (0, _i18n.__)('Justify items left'),
    isActive: 'left' === value,
    onClick: function onClick() {
      return handleClick('left');
    }
  }, {
    name: 'center',
    icon: _icons.justifyCenter,
    title: (0, _i18n.__)('Justify items center'),
    isActive: 'center' === value,
    onClick: function onClick() {
      return handleClick('center');
    }
  }, {
    name: 'right',
    icon: _icons.justifyRight,
    title: (0, _i18n.__)('Justify items right'),
    isActive: 'right' === value,
    onClick: function onClick() {
      return handleClick('right');
    }
  }, {
    name: 'space-between',
    icon: _icons.justifySpaceBetween,
    title: (0, _i18n.__)('Space between items'),
    isActive: 'space-between' === value,
    onClick: function onClick() {
      return handleClick('space-between');
    }
  }];
  var UIComponent = isToolbar ? _components.ToolbarGroup : _components.DropdownMenu;
  var extraProps = isToolbar ? {
    isCollapsed: isCollapsed
  } : {
    isToolbarButton: isToolbarButton
  };
  return (0, _element.createElement)(UIComponent, (0, _extends2.default)({
    icon: icon,
    popoverProps: popoverProps,
    label: (0, _i18n.__)('Change items justification'),
    controls: allControls.filter(function (elem) {
      return allowedControls.includes(elem.name);
    })
  }, extraProps));
}

var _default = JustifyContentUI;
exports.default = _default;
//# sourceMappingURL=ui.js.map