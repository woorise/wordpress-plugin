{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/index.js"],"names":["BLOCK_ANIMATION_THRESHOLD","useBlockProps","props","__unstableIsHtml","BlockListBlockContext","clientId","index","className","wrapperProps","select","blockEditorStore","getBlockMode","getBlockName","isTyping","getGlobalBlockCount","isBlockSelected","isBlockMultiSelected","isAncestorMultiSelected","isFirstMultiSelectedBlock","isSelected","isPartOfMultiSelection","blockName","mode","name","blockTitle","title","isPartOfSelection","adjustScrolling","enableAnimation","blockLabel","htmlSuffix","mergedRefs","ref","triggerAnimationOnChange","id","tabIndex","role","style","save","getBlockProps"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { useContext } from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport {\n\t__unstableGetBlockProps as getBlockProps,\n\tgetBlockType,\n} from '@wordpress/blocks';\nimport { useMergeRefs } from '@wordpress/compose';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport useMovingAnimation from '../../use-moving-animation';\nimport { BlockListBlockContext } from '../block';\nimport { useFocusFirstElement } from './use-focus-first-element';\nimport { useIsHovered } from './use-is-hovered';\nimport { useBlockClassNames } from './use-block-class-names';\nimport { useBlockDefaultClassName } from './use-block-default-class-name';\nimport { useBlockCustomClassName } from './use-block-custom-class-name';\nimport { useBlockMovingModeClassNames } from './use-block-moving-mode-class-names';\nimport { useEventHandlers } from './use-event-handlers';\nimport { useNavModeExit } from './use-nav-mode-exit';\nimport { useBlockNodes } from './use-block-nodes';\nimport { store as blockEditorStore } from '../../../store';\n\n/**\n * If the block count exceeds the threshold, we disable the reordering animation\n * to avoid laginess.\n */\nconst BLOCK_ANIMATION_THRESHOLD = 200;\n\n/**\n * This hook is used to lightly mark an element as a block element. The element\n * should be the outermost element of a block. Call this hook and pass the\n * returned props to the element to mark as a block. If you define a ref for the\n * element, it is important to pass the ref to this hook, which the hook in turn\n * will pass to the component through the props it returns. Optionally, you can\n * also pass any other props through this hook, and they will be merged and\n * returned.\n *\n * @param {Object}  props   Optional. Props to pass to the element. Must contain\n *                          the ref if one is defined.\n * @param {Object}  options Options for internal use only.\n * @param {boolean} options.__unstableIsHtml\n *\n * @return {Object} Props to pass to the element to mark as a block.\n */\nexport function useBlockProps( props = {}, { __unstableIsHtml } = {} ) {\n\tconst { clientId, index, className, wrapperProps = {} } = useContext(\n\t\tBlockListBlockContext\n\t);\n\tconst {\n\t\tmode,\n\t\tname,\n\t\tblockTitle,\n\t\tisPartOfSelection,\n\t\tadjustScrolling,\n\t\tenableAnimation,\n\t} = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockMode,\n\t\t\t\tgetBlockName,\n\t\t\t\tisTyping,\n\t\t\t\tgetGlobalBlockCount,\n\t\t\t\tisBlockSelected,\n\t\t\t\tisBlockMultiSelected,\n\t\t\t\tisAncestorMultiSelected,\n\t\t\t\tisFirstMultiSelectedBlock,\n\t\t\t} = select( blockEditorStore );\n\t\t\tconst isSelected = isBlockSelected( clientId );\n\t\t\tconst isPartOfMultiSelection =\n\t\t\t\tisBlockMultiSelected( clientId ) ||\n\t\t\t\tisAncestorMultiSelected( clientId );\n\t\t\tconst blockName = getBlockName( clientId );\n\t\t\treturn {\n\t\t\t\tmode: getBlockMode( clientId ),\n\t\t\t\tname: blockName,\n\t\t\t\tblockTitle: getBlockType( blockName ).title,\n\t\t\t\tisPartOfSelection: isSelected || isPartOfMultiSelection,\n\t\t\t\tadjustScrolling:\n\t\t\t\t\tisSelected || isFirstMultiSelectedBlock( clientId ),\n\t\t\t\tenableAnimation:\n\t\t\t\t\t! isTyping() &&\n\t\t\t\t\tgetGlobalBlockCount() <= BLOCK_ANIMATION_THRESHOLD,\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\t// translators: %s: Type of block (i.e. Text, Image etc)\n\tconst blockLabel = sprintf( __( 'Block: %s' ), blockTitle );\n\tconst htmlSuffix = mode === 'html' && ! __unstableIsHtml ? '-visual' : '';\n\tconst mergedRefs = useMergeRefs( [\n\t\tprops.ref,\n\t\tuseFocusFirstElement( clientId ),\n\t\tuseBlockNodes( clientId ),\n\t\tuseEventHandlers( clientId ),\n\t\tuseNavModeExit( clientId ),\n\t\tuseIsHovered(),\n\t\tuseMovingAnimation( {\n\t\t\tisSelected: isPartOfSelection,\n\t\t\tadjustScrolling,\n\t\t\tenableAnimation,\n\t\t\ttriggerAnimationOnChange: index,\n\t\t} ),\n\t] );\n\n\treturn {\n\t\t...wrapperProps,\n\t\t...props,\n\t\tref: mergedRefs,\n\t\tid: `block-${ clientId }${ htmlSuffix }`,\n\t\ttabIndex: 0,\n\t\trole: 'group',\n\t\t'aria-label': blockLabel,\n\t\t'data-block': clientId,\n\t\t'data-type': name,\n\t\t'data-title': blockTitle,\n\t\tclassName: classnames(\n\t\t\tclassName,\n\t\t\tprops.className,\n\t\t\twrapperProps.className,\n\t\t\tuseBlockClassNames( clientId ),\n\t\t\tuseBlockDefaultClassName( clientId ),\n\t\t\tuseBlockCustomClassName( clientId ),\n\t\t\tuseBlockMovingModeClassNames( clientId )\n\t\t),\n\t\tstyle: { ...wrapperProps.style, ...props.style },\n\t};\n}\n\n/**\n * Call within a save function to get the props for the block wrapper.\n *\n * @param {Object} props Optional. Props to pass to the element.\n */\nuseBlockProps.save = getBlockProps;\n"]}