"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBlockClassNames = useBlockClassNames;

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _blocks = require("@wordpress/blocks");

var _store = require("../../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Returns the class names used for the different states of the block.
 *
 * @param {string} clientId The block client ID.
 *
 * @return {string} The class names.
 */
function useBlockClassNames(clientId) {
  return (0, _data.useSelect)(function (select) {
    var _select = select(_store.store),
        isBlockBeingDragged = _select.isBlockBeingDragged,
        isBlockHighlighted = _select.isBlockHighlighted,
        isBlockSelected = _select.isBlockSelected,
        isBlockMultiSelected = _select.isBlockMultiSelected,
        getBlockName = _select.getBlockName,
        getSettings = _select.getSettings,
        hasSelectedInnerBlock = _select.hasSelectedInnerBlock,
        getActiveBlockIdByBlockNames = _select.__experimentalGetActiveBlockIdByBlockNames;

    var _getSettings = getSettings(),
        spotlightEntityBlocks = _getSettings.__experimentalSpotlightEntityBlocks;

    var isDragging = isBlockBeingDragged(clientId);
    var isSelected = isBlockSelected(clientId);
    var name = getBlockName(clientId);
    var checkDeep = true; // "ancestor" is the more appropriate label due to "deep" check

    var isAncestorOfSelectedBlock = hasSelectedInnerBlock(clientId, checkDeep);
    var activeEntityBlockId = getActiveBlockIdByBlockNames(spotlightEntityBlocks);
    return (0, _classnames.default)('block-editor-block-list__block', {
      'is-selected': isSelected && !isDragging,
      'is-highlighted': isBlockHighlighted(clientId),
      'is-multi-selected': isBlockMultiSelected(clientId),
      'is-reusable': (0, _blocks.isReusableBlock)((0, _blocks.getBlockType)(name)),
      'is-dragging': isDragging,
      'has-child-selected': isAncestorOfSelectedBlock && !isDragging,
      'has-active-entity': activeEntityBlockId,
      // Determine if there is an active entity area to spotlight.
      'is-active-entity': activeEntityBlockId === clientId
    });
  }, [clientId]);
}
//# sourceMappingURL=use-block-class-names.js.map