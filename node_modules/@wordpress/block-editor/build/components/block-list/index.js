"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockList;
exports.BlockListItems = BlockListItems;
exports.SetBlockNodes = exports.BlockNodes = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _block = _interopRequireDefault(require("./block"));

var _blockListAppender = _interopRequireDefault(require("../block-list-appender"));

var _useBlockDropZone = _interopRequireDefault(require("../use-block-drop-zone"));

var _insertionPoint = _interopRequireDefault(require("./insertion-point"));

var _blockPopover = _interopRequireDefault(require("./block-popover"));

var _store = require("../../store");

var _selectionScrollIntoView = require("../selection-scroll-into-view");

var _preParsePatterns = require("../../utils/pre-parse-patterns");

var _layout = require("./layout");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var BlockNodes = (0, _element.createContext)();
exports.BlockNodes = BlockNodes;
var SetBlockNodes = (0, _element.createContext)();
exports.SetBlockNodes = SetBlockNodes;

function BlockList(_ref) {
  var className = _ref.className,
      __experimentalLayout = _ref.__experimentalLayout;
  var ref = (0, _element.useRef)();

  var _useState = (0, _element.useState)({}),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      blockNodes = _useState2[0],
      setBlockNodes = _useState2[1];

  var insertionPoint = (0, _insertionPoint.default)(ref);
  (0, _selectionScrollIntoView.useScrollSelectionIntoView)(ref);
  (0, _preParsePatterns.usePreParsePatterns)();
  var isLargeViewport = (0, _compose.useViewportMatch)('medium');

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select(_store.store),
        _isTyping = _select.isTyping,
        getSettings = _select.getSettings,
        _isNavigationMode = _select.isNavigationMode;

    var _getSettings = getSettings(),
        outlineMode = _getSettings.outlineMode,
        focusMode = _getSettings.focusMode;

    return {
      isTyping: _isTyping(),
      isOutlineMode: outlineMode,
      isFocusMode: focusMode,
      isNavigationMode: _isNavigationMode()
    };
  }, []),
      isTyping = _useSelect.isTyping,
      isOutlineMode = _useSelect.isOutlineMode,
      isFocusMode = _useSelect.isFocusMode,
      isNavigationMode = _useSelect.isNavigationMode;

  return (0, _element.createElement)(BlockNodes.Provider, {
    value: blockNodes
  }, insertionPoint, (0, _element.createElement)(_blockPopover.default, null), (0, _element.createElement)("div", {
    ref: ref,
    className: (0, _classnames.default)('block-editor-block-list__layout is-root-container', className, {
      'is-typing': isTyping,
      'is-outline-mode': isOutlineMode,
      'is-focus-mode': isFocusMode && isLargeViewport,
      'is-navigate-mode': isNavigationMode
    })
  }, (0, _element.createElement)(SetBlockNodes.Provider, {
    value: setBlockNodes
  }, (0, _element.createElement)(BlockListItems, {
    wrapperRef: ref,
    __experimentalLayout: __experimentalLayout
  }))));
}

function Items(_ref2) {
  var placeholder = _ref2.placeholder,
      rootClientId = _ref2.rootClientId,
      renderAppender = _ref2.renderAppender,
      __experimentalAppenderTagName = _ref2.__experimentalAppenderTagName,
      _ref2$__experimentalL = _ref2.__experimentalLayout,
      layout = _ref2$__experimentalL === void 0 ? _layout.defaultLayout : _ref2$__experimentalL,
      wrapperRef = _ref2.wrapperRef;

  function selector(select) {
    var _getBlockListSettings;

    var _select2 = select(_store.store),
        getBlockOrder = _select2.getBlockOrder,
        getBlockListSettings = _select2.getBlockListSettings,
        getSelectedBlockClientId = _select2.getSelectedBlockClientId,
        getMultiSelectedBlockClientIds = _select2.getMultiSelectedBlockClientIds,
        hasMultiSelection = _select2.hasMultiSelection;

    return {
      blockClientIds: getBlockOrder(rootClientId),
      selectedBlockClientId: getSelectedBlockClientId(),
      multiSelectedBlockClientIds: getMultiSelectedBlockClientIds(),
      orientation: (_getBlockListSettings = getBlockListSettings(rootClientId)) === null || _getBlockListSettings === void 0 ? void 0 : _getBlockListSettings.orientation,
      hasMultiSelection: hasMultiSelection()
    };
  }

  var _useSelect2 = (0, _data.useSelect)(selector, [rootClientId]),
      blockClientIds = _useSelect2.blockClientIds,
      selectedBlockClientId = _useSelect2.selectedBlockClientId,
      multiSelectedBlockClientIds = _useSelect2.multiSelectedBlockClientIds,
      orientation = _useSelect2.orientation,
      hasMultiSelection = _useSelect2.hasMultiSelection;

  var dropTargetIndex = (0, _useBlockDropZone.default)({
    element: wrapperRef,
    rootClientId: rootClientId
  });
  var isAppenderDropTarget = dropTargetIndex === blockClientIds.length;
  return (0, _element.createElement)(_layout.LayoutProvider, {
    value: layout
  }, blockClientIds.map(function (clientId, index) {
    var isBlockInSelection = hasMultiSelection ? multiSelectedBlockClientIds.includes(clientId) : selectedBlockClientId === clientId;
    var isDropTarget = dropTargetIndex === index;
    return (0, _element.createElement)(_data.AsyncModeProvider, {
      key: clientId,
      value: !isBlockInSelection
    }, (0, _element.createElement)(_block.default, {
      rootClientId: rootClientId,
      clientId: clientId // This prop is explicitely computed and passed down
      // to avoid being impacted by the async mode
      // otherwise there might be a small delay to trigger the animation.
      ,
      index: index,
      className: (0, _classnames.default)({
        'is-drop-target': isDropTarget,
        'is-dropping-horizontally': isDropTarget && orientation === 'horizontal'
      })
    }));
  }), blockClientIds.length < 1 && placeholder, (0, _element.createElement)(_blockListAppender.default, {
    tagName: __experimentalAppenderTagName,
    rootClientId: rootClientId,
    renderAppender: renderAppender,
    className: (0, _classnames.default)({
      'is-drop-target': isAppenderDropTarget,
      'is-dropping-horizontally': isAppenderDropTarget && orientation === 'horizontal'
    })
  }));
}

function BlockListItems(props) {
  // This component needs to always be synchronous as it's the one changing
  // the async mode depending on the block selection.
  return (0, _element.createElement)(_data.AsyncModeProvider, {
    value: false
  }, (0, _element.createElement)(Items, props));
}
//# sourceMappingURL=index.js.map