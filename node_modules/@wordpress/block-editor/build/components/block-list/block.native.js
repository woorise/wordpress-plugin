"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _reactNative = require("react-native");

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _blocks = require("@wordpress/blocks");

var _blockEditor = require("@wordpress/block-editor");

var _block = _interopRequireDefault(require("./block.scss"));

var _blockEdit = _interopRequireDefault(require("../block-edit"));

var _blockInvalidWarning = _interopRequireDefault(require("./block-invalid-warning"));

var _blockMobileToolbar = _interopRequireDefault(require("../block-mobile-toolbar"));

var _store = require("../../store");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var emptyArray = [];

function BlockForType(_ref) {
  var attributes = _ref.attributes,
      clientId = _ref.clientId,
      contentStyle = _ref.contentStyle,
      getBlockWidth = _ref.getBlockWidth,
      insertBlocksAfter = _ref.insertBlocksAfter,
      isSelected = _ref.isSelected,
      mergeBlocks = _ref.mergeBlocks,
      name = _ref.name,
      onBlockFocus = _ref.onBlockFocus,
      onChange = _ref.onChange,
      onDeleteBlock = _ref.onDeleteBlock,
      onReplace = _ref.onReplace,
      parentWidth = _ref.parentWidth,
      wrapperProps = _ref.wrapperProps,
      blockWidth = _ref.blockWidth;
  var defaultColors = (0, _blockEditor.__experimentalUseEditorFeature)('color.palette') || emptyArray;
  var globalStyle = (0, _components.useGlobalStyles)();
  var mergedStyle = (0, _element.useMemo)(function () {
    return (0, _components.getMergedGlobalStyles)(globalStyle, wrapperProps.style, attributes, defaultColors);
  }, [defaultColors, globalStyle, // I couldn't simply use attributes and wrapperProps.styles as a dependency because they are almost always a new reference.
  // Thanks to the JSON.stringify we check if the value is the same instead of reference.
  JSON.stringify(wrapperProps.style), JSON.stringify((0, _lodash.pick)(attributes, _components.GlobalStylesContext.BLOCK_STYLE_ATTRIBUTES))]);
  return (0, _element.createElement)(_components.GlobalStylesContext.Provider, {
    value: mergedStyle
  }, (0, _element.createElement)(_blockEdit.default, {
    name: name,
    isSelected: isSelected,
    attributes: attributes,
    setAttributes: onChange,
    onFocus: onBlockFocus,
    onReplace: onReplace,
    insertBlocksAfter: insertBlocksAfter,
    mergeBlocks: mergeBlocks // Block level styles
    ,
    wrapperProps: wrapperProps // inherited styles merged with block level styles
    ,
    mergedStyle: mergedStyle,
    clientId: clientId,
    parentWidth: parentWidth,
    contentStyle: contentStyle,
    onDeleteBlock: onDeleteBlock,
    blockWidth: blockWidth
  }), (0, _element.createElement)(_reactNative.View, {
    onLayout: getBlockWidth
  }));
}

var BlockListBlock = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(BlockListBlock, _Component);

  var _super = _createSuper(BlockListBlock);

  function BlockListBlock() {
    var _this;

    (0, _classCallCheck2.default)(this, BlockListBlock);
    _this = _super.apply(this, arguments);
    _this.insertBlocksAfter = _this.insertBlocksAfter.bind((0, _assertThisInitialized2.default)(_this));
    _this.onFocus = _this.onFocus.bind((0, _assertThisInitialized2.default)(_this));
    _this.getBlockWidth = _this.getBlockWidth.bind((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      blockWidth: _this.props.blockWidth - 2 * _this.props.marginHorizontal
    };
    _this.anchorNodeRef = (0, _element.createRef)();
    return _this;
  }

  (0, _createClass2.default)(BlockListBlock, [{
    key: "onFocus",
    value: function onFocus() {
      var _this$props = this.props,
          firstToSelectId = _this$props.firstToSelectId,
          isSelected = _this$props.isSelected,
          onSelect = _this$props.onSelect;

      if (!isSelected) {
        onSelect(firstToSelectId);
      }
    }
  }, {
    key: "insertBlocksAfter",
    value: function insertBlocksAfter(blocks) {
      this.props.onInsertBlocks(blocks, this.props.order + 1);

      if (blocks[0]) {
        // focus on the first block inserted
        this.props.onSelect(blocks[0].clientId);
      }
    }
  }, {
    key: "getBlockWidth",
    value: function getBlockWidth(_ref2) {
      var nativeEvent = _ref2.nativeEvent;
      var layout = nativeEvent.layout;
      var blockWidth = this.state.blockWidth;
      var layoutWidth = Math.floor(layout.width);

      if (!blockWidth || !layoutWidth) {
        return;
      }

      if (blockWidth !== layoutWidth) {
        this.setState({
          blockWidth: layoutWidth
        });
      }
    }
  }, {
    key: "getBlockForType",
    value: function getBlockForType() {
      var blockWidth = this.state.blockWidth;
      return (0, _element.createElement)(BlockForType, (0, _extends2.default)({}, this.props, {
        onBlockFocus: this.onFocus,
        insertBlocksAfter: this.insertBlocksAfter,
        getBlockWidth: this.getBlockWidth,
        blockWidth: blockWidth
      }));
    }
  }, {
    key: "renderBlockTitle",
    value: function renderBlockTitle() {
      return (0, _element.createElement)(_reactNative.View, {
        style: _block.default.blockTitle
      }, (0, _element.createElement)(_reactNative.Text, null, "BlockType: ", this.props.name));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          attributes = _this$props2.attributes,
          blockType = _this$props2.blockType,
          clientId = _this$props2.clientId,
          icon = _this$props2.icon,
          isSelected = _this$props2.isSelected,
          isValid = _this$props2.isValid,
          order = _this$props2.order,
          title = _this$props2.title,
          isDimmed = _this$props2.isDimmed,
          isTouchable = _this$props2.isTouchable,
          onDeleteBlock = _this$props2.onDeleteBlock,
          isStackedHorizontally = _this$props2.isStackedHorizontally,
          isParentSelected = _this$props2.isParentSelected,
          getStylesFromColorScheme = _this$props2.getStylesFromColorScheme,
          marginVertical = _this$props2.marginVertical,
          marginHorizontal = _this$props2.marginHorizontal,
          isInnerBlockSelected = _this$props2.isInnerBlockSelected,
          name = _this$props2.name;

      if (!attributes || !blockType) {
        return null;
      }

      var blockWidth = this.state.blockWidth;
      var align = attributes.align;
      var accessibilityLabel = (0, _blocks.__experimentalGetAccessibleBlockLabel)(blockType, attributes, order + 1);
      var isFullWidth = _components.alignmentHelpers.isFullWidth,
          isWider = _components.alignmentHelpers.isWider,
          isContainerRelated = _components.alignmentHelpers.isContainerRelated;
      var accessible = !(isSelected || isInnerBlockSelected);
      var screenWidth = Math.floor(_reactNative.Dimensions.get('window').width);
      var isScreenWidthEqual = blockWidth === screenWidth;
      var isScreenWidthWider = blockWidth < screenWidth;
      var isFullWidthToolbar = isFullWidth(align) || isScreenWidthEqual;
      return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
        onPress: this.onFocus,
        accessible: accessible,
        accessibilityRole: 'button'
      }, (0, _element.createElement)(_reactNative.View, {
        style: {
          flex: 1
        },
        accessibilityLabel: accessibilityLabel
      }, (0, _element.createElement)(_reactNative.View, {
        pointerEvents: isTouchable ? 'auto' : 'box-only',
        accessibilityLabel: accessibilityLabel,
        style: [{
          marginVertical: marginVertical,
          marginHorizontal: marginHorizontal,
          flex: 1
        }, isDimmed && _block.default.dimmed]
      }, isSelected && (0, _element.createElement)(_reactNative.View, {
        pointerEvents: "box-none",
        style: [_block.default.solidBorder, isFullWidth(align) && isScreenWidthWider && _block.default.borderFullWidth, isFullWidth(align) && isContainerRelated(name) && isScreenWidthWider && _block.default.containerBorderFullWidth, getStylesFromColorScheme(_block.default.solidBorderColor, _block.default.solidBorderColorDark)]
      }), isParentSelected && (0, _element.createElement)(_reactNative.View, {
        style: [_block.default.dashedBorder, getStylesFromColorScheme(_block.default.dashedBorderColor, _block.default.dashedBorderColorDark)]
      }), isValid ? this.getBlockForType() : (0, _element.createElement)(_blockInvalidWarning.default, {
        blockTitle: title,
        icon: icon
      }), (0, _element.createElement)(_reactNative.View, {
        style: [_block.default.neutralToolbar, !isFullWidthToolbar && isContainerRelated(name) && isWider(screenWidth, 'mobile') && _block.default.containerToolbar],
        ref: this.anchorNodeRef
      }, isSelected && (0, _element.createElement)(_blockMobileToolbar.default, {
        clientId: clientId,
        onDelete: onDeleteBlock,
        isStackedHorizontally: isStackedHorizontally,
        blockWidth: blockWidth,
        anchorNodeRef: this.anchorNodeRef.current,
        isFullWidth: isFullWidthToolbar
      })))));
    }
  }]);
  return BlockListBlock;
}(_element.Component); // Helper function to memoize the wrapperProps since getEditWrapperProps always returns a new reference


var wrapperPropsCache = new WeakMap();
var emptyObj = {};

function getWrapperProps(value, getWrapperPropsFunction) {
  if (!getWrapperPropsFunction) {
    return emptyObj;
  }

  var cachedValue = wrapperPropsCache.get(value);

  if (!cachedValue) {
    var wrapperProps = getWrapperPropsFunction(value);
    wrapperPropsCache.set(value, wrapperProps);
    return wrapperProps;
  }

  return cachedValue;
}

var _default = (0, _compose.compose)([(0, _data.withSelect)(function (select, _ref3) {
  var clientId = _ref3.clientId,
      rootClientId = _ref3.rootClientId;

  var _select = select(_store.store),
      getBlockIndex = _select.getBlockIndex,
      isBlockSelected = _select.isBlockSelected,
      __unstableGetBlockWithoutInnerBlocks = _select.__unstableGetBlockWithoutInnerBlocks,
      getSelectedBlockClientId = _select.getSelectedBlockClientId,
      getLowestCommonAncestorWithSelectedBlock = _select.getLowestCommonAncestorWithSelectedBlock,
      getBlockParents = _select.getBlockParents,
      hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

  var order = getBlockIndex(clientId, rootClientId);
  var isSelected = isBlockSelected(clientId);
  var isInnerBlockSelected = hasSelectedInnerBlock(clientId);

  var block = __unstableGetBlockWithoutInnerBlocks(clientId);

  var _ref4 = block || {},
      name = _ref4.name,
      attributes = _ref4.attributes,
      isValid = _ref4.isValid;

  var blockType = (0, _blocks.getBlockType)(name || 'core/missing');
  var title = blockType.title;
  var icon = blockType.icon;
  var parents = getBlockParents(clientId, true);
  var parentId = parents[0] || '';
  var selectedBlockClientId = getSelectedBlockClientId();
  var commonAncestor = getLowestCommonAncestorWithSelectedBlock(clientId);
  var commonAncestorIndex = parents.indexOf(commonAncestor) - 1;
  var firstToSelectId = commonAncestor ? parents[commonAncestorIndex] : parents[parents.length - 1];
  var isParentSelected = // set false as a default value to prevent re-render when it's changed from null to false
  (selectedBlockClientId || false) && selectedBlockClientId === parentId;
  var selectedParents = selectedBlockClientId ? getBlockParents(selectedBlockClientId) : [];
  var isDescendantOfParentSelected = selectedParents.includes(parentId);
  var isTouchable = isSelected || isDescendantOfParentSelected || isParentSelected || parentId === '';
  return {
    icon: icon,
    name: name || 'core/missing',
    order: order,
    title: title,
    attributes: attributes,
    blockType: blockType,
    isSelected: isSelected,
    isInnerBlockSelected: isInnerBlockSelected,
    isValid: isValid,
    isParentSelected: isParentSelected,
    firstToSelectId: firstToSelectId,
    isTouchable: isTouchable,
    wrapperProps: getWrapperProps(attributes, blockType.getEditWrapperProps)
  };
}), (0, _data.withDispatch)(function (dispatch, ownProps, _ref5) {
  var select = _ref5.select;

  var _dispatch = dispatch(_store.store),
      insertBlocks = _dispatch.insertBlocks,
      _mergeBlocks = _dispatch.mergeBlocks,
      replaceBlocks = _dispatch.replaceBlocks,
      selectBlock = _dispatch.selectBlock,
      updateBlockAttributes = _dispatch.updateBlockAttributes;

  return {
    mergeBlocks: function mergeBlocks(forward) {
      var clientId = ownProps.clientId;

      var _select2 = select(_store.store),
          getPreviousBlockClientId = _select2.getPreviousBlockClientId,
          getNextBlockClientId = _select2.getNextBlockClientId;

      if (forward) {
        var nextBlockClientId = getNextBlockClientId(clientId);

        if (nextBlockClientId) {
          _mergeBlocks(clientId, nextBlockClientId);
        }
      } else {
        var previousBlockClientId = getPreviousBlockClientId(clientId);

        if (previousBlockClientId) {
          _mergeBlocks(previousBlockClientId, clientId);
        }
      }
    },
    onInsertBlocks: function onInsertBlocks(blocks, index) {
      insertBlocks(blocks, index, ownProps.rootClientId);
    },
    onSelect: function onSelect() {
      var clientId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ownProps.clientId;
      var initialPosition = arguments.length > 1 ? arguments[1] : undefined;
      selectBlock(clientId, initialPosition);
    },
    onChange: function onChange(attributes) {
      updateBlockAttributes(ownProps.clientId, attributes);
    },
    onReplace: function onReplace(blocks, indexToSelect) {
      replaceBlocks([ownProps.clientId], blocks, indexToSelect);
    }
  };
}), _compose.withPreferredColorScheme])(BlockListBlock);

exports.default = _default;
//# sourceMappingURL=block.native.js.map