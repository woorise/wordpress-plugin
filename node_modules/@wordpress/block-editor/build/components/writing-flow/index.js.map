{"version":3,"sources":["@wordpress/block-editor/src/components/writing-flow/index.js"],"names":["SelectionStart","getComputedStyle","node","ownerDocument","defaultView","isFormElement","element","tagName","isNavigationCandidate","keyCode","hasModifier","isVertical","UP","DOWN","getClosestTabbable","target","isReverse","containerElement","onlyVertical","focusableNodes","focus","focusable","find","slice","indexOf","targetRect","getBoundingClientRect","isTabCandidate","tabbable","isTabbableIndex","isContentEditable","contentEditable","nodeRect","left","right","selector","select","blockEditorStore","getSelectedBlockClientId","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getPreviousBlockClientId","getNextBlockClientId","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","hasMultiSelection","getBlockOrder","isSelectionEnabled","getBlockSelectionStart","isMultiSelecting","getSettings","selectedBlockClientId","selectionStartClientId","selectionEndClientId","blocks","selectionBeforeEndClientId","selectionAfterEndClientId","selectedFirstClientId","selectedLastClientId","firstBlock","lastBlock","blockSelectionStart","keepCaretInsideBlock","WritingFlow","children","container","focusCaptureBeforeRef","focusCaptureAfterRef","multiSelectionContainer","entirelySelected","noCapture","verticalRect","onSelectionStart","multiSelect","selectBlock","setNavigationMode","onMouseDown","event","current","button","clientId","shiftKey","preventDefault","expandSelection","nextSelectionEndClientId","moveSelection","focusedBlockClientId","isTabbableEdge","closestTabbable","onKeyDown","contains","isUp","isDown","isLeft","LEFT","isRight","RIGHT","isTab","TAB","isEscape","ESCAPE","isHorizontal","isNav","isShift","ctrlKey","altKey","metaKey","isNavEdge","isVerticalEdge","isHorizontalEdge","direction","next","isKeyboardEvent","primary","nativeEvent","defaultPrevented","isReverseDir","getSelection","isCollapsed","onMultiSelectKeyDown","action","lastFocus","onFocusOut","addEventListener","removeEventListener","undefined","position"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, reverse, first, last } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useRef, useEffect, createContext } from '@wordpress/element';\nimport {\n\tcomputeCaretRect,\n\tfocus,\n\tisHorizontalEdge,\n\tisVerticalEdge,\n\tplaceCaretAtHorizontalEdge,\n\tplaceCaretAtVerticalEdge,\n\tisEntirelySelected,\n} from '@wordpress/dom';\nimport {\n\tUP,\n\tDOWN,\n\tLEFT,\n\tRIGHT,\n\tTAB,\n\tisKeyboardEvent,\n\tESCAPE,\n} from '@wordpress/keycodes';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { isInSameBlock, getBlockClientId } from '../../utils/dom';\nimport FocusCapture from './focus-capture';\nimport useMultiSelection from './use-multi-selection';\nimport { store as blockEditorStore } from '../../store';\n\nexport const SelectionStart = createContext();\n\nfunction getComputedStyle( node ) {\n\treturn node.ownerDocument.defaultView.getComputedStyle( node );\n}\n\nfunction isFormElement( element ) {\n\tconst { tagName } = element;\n\treturn (\n\t\ttagName === 'INPUT' ||\n\t\ttagName === 'BUTTON' ||\n\t\ttagName === 'SELECT' ||\n\t\ttagName === 'TEXTAREA'\n\t);\n}\n\n/**\n * Returns true if the element should consider edge navigation upon a keyboard\n * event of the given directional key code, or false otherwise.\n *\n * @param {Element} element     HTML element to test.\n * @param {number}  keyCode     KeyboardEvent keyCode to test.\n * @param {boolean} hasModifier Whether a modifier is pressed.\n *\n * @return {boolean} Whether element should consider edge navigation.\n */\nexport function isNavigationCandidate( element, keyCode, hasModifier ) {\n\tconst isVertical = keyCode === UP || keyCode === DOWN;\n\n\t// Currently, all elements support unmodified vertical navigation.\n\tif ( isVertical && ! hasModifier ) {\n\t\treturn true;\n\t}\n\n\t// Native inputs should not navigate horizontally.\n\tconst { tagName } = element;\n\treturn tagName !== 'INPUT' && tagName !== 'TEXTAREA';\n}\n\n/**\n * Returns the optimal tab target from the given focused element in the\n * desired direction. A preference is made toward text fields, falling back\n * to the block focus stop if no other candidates exist for the block.\n *\n * @param {Element} target           Currently focused text field.\n * @param {boolean} isReverse        True if considering as the first field.\n * @param {Element} containerElement Element containing all blocks.\n * @param {boolean} onlyVertical     Whether to only consider tabbable elements\n *                                   that are visually above or under the\n *                                   target.\n *\n * @return {?Element} Optimal tab target, if one exists.\n */\nexport function getClosestTabbable(\n\ttarget,\n\tisReverse,\n\tcontainerElement,\n\tonlyVertical\n) {\n\t// Since the current focus target is not guaranteed to be a text field,\n\t// find all focusables. Tabbability is considered later.\n\tlet focusableNodes = focus.focusable.find( containerElement );\n\n\tif ( isReverse ) {\n\t\tfocusableNodes = reverse( focusableNodes );\n\t}\n\n\t// Consider as candidates those focusables after the current target.\n\t// It's assumed this can only be reached if the target is focusable\n\t// (on its keydown event), so no need to verify it exists in the set.\n\tfocusableNodes = focusableNodes.slice(\n\t\tfocusableNodes.indexOf( target ) + 1\n\t);\n\n\tlet targetRect;\n\n\tif ( onlyVertical ) {\n\t\ttargetRect = target.getBoundingClientRect();\n\t}\n\n\tfunction isTabCandidate( node ) {\n\t\t// Not a candidate if the node is not tabbable.\n\t\tif ( ! focus.tabbable.isTabbableIndex( node ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Skip focusable elements such as links within content editable nodes.\n\t\tif ( node.isContentEditable && node.contentEditable !== 'true' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( onlyVertical ) {\n\t\t\tconst nodeRect = node.getBoundingClientRect();\n\n\t\t\tif (\n\t\t\t\tnodeRect.left >= targetRect.right ||\n\t\t\t\tnodeRect.right <= targetRect.left\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn find( focusableNodes, isTabCandidate );\n}\n\nfunction selector( select ) {\n\tconst {\n\t\tgetSelectedBlockClientId,\n\t\tgetMultiSelectedBlocksStartClientId,\n\t\tgetMultiSelectedBlocksEndClientId,\n\t\tgetPreviousBlockClientId,\n\t\tgetNextBlockClientId,\n\t\tgetFirstMultiSelectedBlockClientId,\n\t\tgetLastMultiSelectedBlockClientId,\n\t\thasMultiSelection,\n\t\tgetBlockOrder,\n\t\tisSelectionEnabled,\n\t\tgetBlockSelectionStart,\n\t\tisMultiSelecting,\n\t\tgetSettings,\n\t} = select( blockEditorStore );\n\n\tconst selectedBlockClientId = getSelectedBlockClientId();\n\tconst selectionStartClientId = getMultiSelectedBlocksStartClientId();\n\tconst selectionEndClientId = getMultiSelectedBlocksEndClientId();\n\tconst blocks = getBlockOrder();\n\n\treturn {\n\t\tselectedBlockClientId,\n\t\tselectionStartClientId,\n\t\tselectionBeforeEndClientId: getPreviousBlockClientId(\n\t\t\tselectionEndClientId || selectedBlockClientId\n\t\t),\n\t\tselectionAfterEndClientId: getNextBlockClientId(\n\t\t\tselectionEndClientId || selectedBlockClientId\n\t\t),\n\t\tselectedFirstClientId: getFirstMultiSelectedBlockClientId(),\n\t\tselectedLastClientId: getLastMultiSelectedBlockClientId(),\n\t\thasMultiSelection: hasMultiSelection(),\n\t\tfirstBlock: first( blocks ),\n\t\tlastBlock: last( blocks ),\n\t\tisSelectionEnabled: isSelectionEnabled(),\n\t\tblockSelectionStart: getBlockSelectionStart(),\n\t\tisMultiSelecting: isMultiSelecting(),\n\t\tkeepCaretInsideBlock: getSettings().keepCaretInsideBlock,\n\t};\n}\n\n/**\n * Handles selection and navigation across blocks. This component should be\n * wrapped around BlockList.\n *\n * @param {Object}    props          Component properties.\n * @param {WPElement} props.children Children to be rendered.\n */\nexport default function WritingFlow( { children } ) {\n\tconst container = useRef();\n\tconst focusCaptureBeforeRef = useRef();\n\tconst focusCaptureAfterRef = useRef();\n\tconst multiSelectionContainer = useRef();\n\n\tconst entirelySelected = useRef();\n\n\t// Reference that holds the a flag for enabling or disabling\n\t// capturing on the focus capture elements.\n\tconst noCapture = useRef();\n\n\t// Here a DOMRect is stored while moving the caret vertically so vertical\n\t// position of the start position can be restored. This is to recreate\n\t// browser behaviour across blocks.\n\tconst verticalRect = useRef();\n\n\tconst onSelectionStart = useMultiSelection( container );\n\n\tconst {\n\t\tselectedBlockClientId,\n\t\tselectionStartClientId,\n\t\tselectionBeforeEndClientId,\n\t\tselectionAfterEndClientId,\n\t\tselectedFirstClientId,\n\t\tselectedLastClientId,\n\t\thasMultiSelection,\n\t\tfirstBlock,\n\t\tlastBlock,\n\t\tisSelectionEnabled,\n\t\tblockSelectionStart,\n\t\tisMultiSelecting,\n\t\tkeepCaretInsideBlock,\n\t} = useSelect( selector, [] );\n\tconst { multiSelect, selectBlock, setNavigationMode } = useDispatch(\n\t\tblockEditorStore\n\t);\n\n\tfunction onMouseDown( event ) {\n\t\tverticalRect.current = null;\n\n\t\t// Multi-select blocks when Shift+clicking.\n\t\tif (\n\t\t\tisSelectionEnabled &&\n\t\t\t// The main button.\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n\t\t\tevent.button === 0\n\t\t) {\n\t\t\tconst clientId = getBlockClientId( event.target );\n\n\t\t\tif ( clientId ) {\n\t\t\t\tif ( event.shiftKey ) {\n\t\t\t\t\tif ( blockSelectionStart !== clientId ) {\n\t\t\t\t\t\tmultiSelect( blockSelectionStart, clientId );\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\t// Allow user to escape out of a multi-selection to a singular\n\t\t\t\t\t// selection of a block via click. This is handled here since\n\t\t\t\t\t// focus handling excludes blocks when there is multiselection,\n\t\t\t\t\t// as focus can be incurred by starting a multiselection (focus\n\t\t\t\t\t// moved to first block's multi-controls).\n\t\t\t\t} else if ( hasMultiSelection ) {\n\t\t\t\t\tselectBlock( clientId );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction expandSelection( isReverse ) {\n\t\tconst nextSelectionEndClientId = isReverse\n\t\t\t? selectionBeforeEndClientId\n\t\t\t: selectionAfterEndClientId;\n\n\t\tif ( nextSelectionEndClientId ) {\n\t\t\tmultiSelect(\n\t\t\t\tselectionStartClientId || selectedBlockClientId,\n\t\t\t\tnextSelectionEndClientId\n\t\t\t);\n\t\t}\n\t}\n\n\tfunction moveSelection( isReverse ) {\n\t\tconst focusedBlockClientId = isReverse\n\t\t\t? selectedFirstClientId\n\t\t\t: selectedLastClientId;\n\n\t\tif ( focusedBlockClientId ) {\n\t\t\tselectBlock( focusedBlockClientId );\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if the given target field is the last in its block which\n\t * can be considered for tab transition. For example, in a block with two\n\t * text fields, this would return true when reversing from the first of the\n\t * two fields, but false when reversing from the second.\n\t *\n\t * @param {Element} target    Currently focused text field.\n\t * @param {boolean} isReverse True if considering as the first field.\n\t *\n\t * @return {boolean} Whether field is at edge for tab transition.\n\t */\n\tfunction isTabbableEdge( target, isReverse ) {\n\t\tconst closestTabbable = getClosestTabbable(\n\t\t\ttarget,\n\t\t\tisReverse,\n\t\t\tcontainer.current\n\t\t);\n\t\treturn ! closestTabbable || ! isInSameBlock( target, closestTabbable );\n\t}\n\n\tfunction onKeyDown( event ) {\n\t\tconst { keyCode, target } = event;\n\n\t\t// Handle only if the event occurred within the same DOM hierarchy as\n\t\t// the rendered container. This is used to distinguish between events\n\t\t// which bubble through React's virtual event system from those which\n\t\t// strictly occur in the DOM created by the component.\n\t\t//\n\t\t// The implication here is: If it's not desirable for a bubbled event to\n\t\t// be considered by WritingFlow, it can be avoided by rendering to a\n\t\t// distinct place in the DOM (e.g. using Slot/Fill).\n\t\tif ( ! container.current.contains( target ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUp = keyCode === UP;\n\t\tconst isDown = keyCode === DOWN;\n\t\tconst isLeft = keyCode === LEFT;\n\t\tconst isRight = keyCode === RIGHT;\n\t\tconst isTab = keyCode === TAB;\n\t\tconst isEscape = keyCode === ESCAPE;\n\t\tconst isReverse = isUp || isLeft;\n\t\tconst isHorizontal = isLeft || isRight;\n\t\tconst isVertical = isUp || isDown;\n\t\tconst isNav = isHorizontal || isVertical;\n\t\tconst isShift = event.shiftKey;\n\t\tconst hasModifier =\n\t\t\tisShift || event.ctrlKey || event.altKey || event.metaKey;\n\t\tconst isNavEdge = isVertical ? isVerticalEdge : isHorizontalEdge;\n\t\tconst { ownerDocument } = container.current;\n\t\tconst { defaultView } = ownerDocument;\n\n\t\t// In Edit mode, Tab should focus the first tabbable element after the\n\t\t// content, which is normally the sidebar (with block controls) and\n\t\t// Shift+Tab should focus the first tabbable element before the content,\n\t\t// which is normally the block toolbar.\n\t\t// Arrow keys can be used, and Tab and arrow keys can be used in\n\t\t// Navigation mode (press Esc), to navigate through blocks.\n\t\tif ( selectedBlockClientId ) {\n\t\t\tif ( isTab ) {\n\t\t\t\tconst direction = isShift ? 'findPrevious' : 'findNext';\n\t\t\t\t// Allow tabbing between form elements rendered in a block,\n\t\t\t\t// such as inside a placeholder. Form elements are generally\n\t\t\t\t// meant to be UI rather than part of the content. Ideally\n\t\t\t\t// these are not rendered in the content and perhaps in the\n\t\t\t\t// future they can be rendered in an iframe or shadow DOM.\n\t\t\t\tif (\n\t\t\t\t\tisFormElement( target ) &&\n\t\t\t\t\tisFormElement( focus.tabbable[ direction ]( target ) )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst next = isShift\n\t\t\t\t\t? focusCaptureBeforeRef\n\t\t\t\t\t: focusCaptureAfterRef;\n\n\t\t\t\t// Disable focus capturing on the focus capture element, so it\n\t\t\t\t// doesn't refocus this block and so it allows default behaviour\n\t\t\t\t// (moving focus to the next tabbable element).\n\t\t\t\tnoCapture.current = true;\n\t\t\t\tnext.current.focus();\n\t\t\t\treturn;\n\t\t\t} else if ( isEscape ) {\n\t\t\t\tsetNavigationMode( true );\n\t\t\t}\n\t\t}\n\n\t\t// When presing any key other than up or down, the initial vertical\n\t\t// position must ALWAYS be reset. The vertical position is saved so it\n\t\t// can be restored as well as possible on sebsequent vertical arrow key\n\t\t// presses. It may not always be possible to restore the exact same\n\t\t// position (such as at an empty line), so it wouldn't be good to\n\t\t// compute the position right before any vertical arrow key press.\n\t\tif ( ! isVertical ) {\n\t\t\tverticalRect.current = null;\n\t\t} else if ( ! verticalRect.current ) {\n\t\t\tverticalRect.current = computeCaretRect( defaultView );\n\t\t}\n\n\t\t// This logic inside this condition needs to be checked before\n\t\t// the check for event.nativeEvent.defaultPrevented.\n\t\t// The logic handles meta+a keypress and this event is default prevented\n\t\t// by RichText.\n\t\tif ( ! isNav ) {\n\t\t\t// Set immediately before the meta+a combination can be pressed.\n\t\t\tif ( isKeyboardEvent.primary( event ) ) {\n\t\t\t\tentirelySelected.current = isEntirelySelected( target );\n\t\t\t}\n\n\t\t\tif ( isKeyboardEvent.primary( event, 'a' ) ) {\n\t\t\t\t// When the target is contentEditable, selection will already\n\t\t\t\t// have been set by the browser earlier in this call stack. We\n\t\t\t\t// need check the previous result, otherwise all blocks will be\n\t\t\t\t// selected right away.\n\t\t\t\tif (\n\t\t\t\t\ttarget.isContentEditable\n\t\t\t\t\t\t? entirelySelected.current\n\t\t\t\t\t\t: isEntirelySelected( target )\n\t\t\t\t) {\n\t\t\t\t\tmultiSelect( firstBlock, lastBlock );\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\t// After pressing primary + A we can assume isEntirelySelected is true.\n\t\t\t\t// Calling right away isEntirelySelected after primary + A may still return false on some browsers.\n\t\t\t\tentirelySelected.current = true;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort if navigation has already been handled (e.g. RichText inline\n\t\t// boundaries).\n\t\tif ( event.nativeEvent.defaultPrevented ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort if our current target is not a candidate for navigation (e.g.\n\t\t// preserve native input behaviors).\n\t\tif ( ! isNavigationCandidate( target, keyCode, hasModifier ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In the case of RTL scripts, right means previous and left means next,\n\t\t// which is the exact reverse of LTR.\n\t\tconst { direction } = getComputedStyle( target );\n\t\tconst isReverseDir = direction === 'rtl' ? ! isReverse : isReverse;\n\n\t\tif ( isShift ) {\n\t\t\tif (\n\t\t\t\t// Ensure that there is a target block.\n\t\t\t\t( ( isReverse && selectionBeforeEndClientId ) ||\n\t\t\t\t\t( ! isReverse && selectionAfterEndClientId ) ) &&\n\t\t\t\tisTabbableEdge( target, isReverse ) &&\n\t\t\t\tisNavEdge( target, isReverse )\n\t\t\t) {\n\t\t\t\t// Shift key is down, and there is multi selection or we're at\n\t\t\t\t// the end of the current block.\n\t\t\t\texpandSelection( isReverse );\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t} else if (\n\t\t\tisVertical &&\n\t\t\tisVerticalEdge( target, isReverse ) &&\n\t\t\t! keepCaretInsideBlock\n\t\t) {\n\t\t\tconst closestTabbable = getClosestTabbable(\n\t\t\t\ttarget,\n\t\t\t\tisReverse,\n\t\t\t\tcontainer.current,\n\t\t\t\ttrue\n\t\t\t);\n\n\t\t\tif ( closestTabbable ) {\n\t\t\t\tplaceCaretAtVerticalEdge(\n\t\t\t\t\tclosestTabbable,\n\t\t\t\t\tisReverse,\n\t\t\t\t\tverticalRect.current\n\t\t\t\t);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t} else if (\n\t\t\tisHorizontal &&\n\t\t\tdefaultView.getSelection().isCollapsed &&\n\t\t\tisHorizontalEdge( target, isReverseDir ) &&\n\t\t\t! keepCaretInsideBlock\n\t\t) {\n\t\t\tconst closestTabbable = getClosestTabbable(\n\t\t\t\ttarget,\n\t\t\t\tisReverseDir,\n\t\t\t\tcontainer.current\n\t\t\t);\n\t\t\tplaceCaretAtHorizontalEdge( closestTabbable, isReverseDir );\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\tfunction onMultiSelectKeyDown( event ) {\n\t\tconst { keyCode, shiftKey } = event;\n\t\tconst isUp = keyCode === UP;\n\t\tconst isDown = keyCode === DOWN;\n\t\tconst isLeft = keyCode === LEFT;\n\t\tconst isRight = keyCode === RIGHT;\n\t\tconst isReverse = isUp || isLeft;\n\t\tconst isHorizontal = isLeft || isRight;\n\t\tconst isVertical = isUp || isDown;\n\t\tconst isNav = isHorizontal || isVertical;\n\n\t\tif ( keyCode === TAB ) {\n\t\t\t// Disable focus capturing on the focus capture element, so it\n\t\t\t// doesn't refocus this element and so it allows default behaviour\n\t\t\t// (moving focus to the next tabbable element).\n\t\t\tnoCapture.current = true;\n\n\t\t\tif ( shiftKey ) {\n\t\t\t\tfocusCaptureBeforeRef.current.focus();\n\t\t\t} else {\n\t\t\t\tfocusCaptureAfterRef.current.focus();\n\t\t\t}\n\t\t} else if ( isNav ) {\n\t\t\tconst action = shiftKey ? expandSelection : moveSelection;\n\t\t\taction( isReverse );\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\tuseEffect( () => {\n\t\tif ( hasMultiSelection && ! isMultiSelecting ) {\n\t\t\tmultiSelectionContainer.current.focus();\n\t\t}\n\t}, [ hasMultiSelection, isMultiSelecting ] );\n\n\tconst lastFocus = useRef();\n\n\tuseEffect( () => {\n\t\tfunction onFocusOut( event ) {\n\t\t\tlastFocus.current = event.target;\n\t\t}\n\n\t\tcontainer.current.addEventListener( 'focusout', onFocusOut );\n\t\treturn () => {\n\t\t\tcontainer.current.removeEventListener( 'focusout', onFocusOut );\n\t\t};\n\t}, [] );\n\n\t// Disable reason: Wrapper itself is non-interactive, but must capture\n\t// bubbling events from children to determine focus transition intents.\n\t/* eslint-disable jsx-a11y/no-static-element-interactions */\n\treturn (\n\t\t<SelectionStart.Provider value={ onSelectionStart }>\n\t\t\t<FocusCapture\n\t\t\t\tref={ focusCaptureBeforeRef }\n\t\t\t\tselectedClientId={ selectedBlockClientId }\n\t\t\t\tcontainerRef={ container }\n\t\t\t\tnoCapture={ noCapture }\n\t\t\t\tlastFocus={ lastFocus }\n\t\t\t\thasMultiSelection={ hasMultiSelection }\n\t\t\t\tmultiSelectionContainer={ multiSelectionContainer }\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tref={ multiSelectionContainer }\n\t\t\t\ttabIndex={ hasMultiSelection ? '0' : undefined }\n\t\t\t\taria-label={\n\t\t\t\t\thasMultiSelection\n\t\t\t\t\t\t? __( 'Multiple selected blocks' )\n\t\t\t\t\t\t: undefined\n\t\t\t\t}\n\t\t\t\t// Needs to be positioned within the viewport, so focus to this\n\t\t\t\t// element does not scroll the page.\n\t\t\t\tstyle={ { position: 'fixed' } }\n\t\t\t\tonKeyDown={ onMultiSelectKeyDown }\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tref={ container }\n\t\t\t\tclassName=\"block-editor-writing-flow\"\n\t\t\t\tonKeyDown={ onKeyDown }\n\t\t\t\tonMouseDown={ onMouseDown }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</div>\n\t\t\t<FocusCapture\n\t\t\t\tref={ focusCaptureAfterRef }\n\t\t\t\tselectedClientId={ selectedBlockClientId }\n\t\t\t\tcontainerRef={ container }\n\t\t\t\tnoCapture={ noCapture }\n\t\t\t\tlastFocus={ lastFocus }\n\t\t\t\thasMultiSelection={ hasMultiSelection }\n\t\t\t\tmultiSelectionContainer={ multiSelectionContainer }\n\t\t\t\tisReverse\n\t\t\t/>\n\t\t</SelectionStart.Provider>\n\t);\n\t/* eslint-enable jsx-a11y/no-static-element-interactions */\n}\n"]}