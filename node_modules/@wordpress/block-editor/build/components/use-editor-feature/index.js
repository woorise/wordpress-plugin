"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useEditorFeature;

var _lodash = require("lodash");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _blockEdit = require("../block-edit");

var _store = require("../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var deprecatedFlags = {
  'color.palette': function colorPalette(settings) {
    return settings.colors === undefined ? undefined : settings.colors;
  },
  'color.gradients': function colorGradients(settings) {
    return settings.gradients === undefined ? undefined : settings.gradients;
  },
  'color.custom': function colorCustom(settings) {
    return settings.disableCustomColors === undefined ? undefined : !settings.disableCustomColors;
  },
  'color.customGradient': function colorCustomGradient(settings) {
    return settings.disableCustomGradients === undefined ? undefined : !settings.disableCustomGradients;
  },
  'typography.fontSizes': function typographyFontSizes(settings) {
    return settings.fontSizes === undefined ? undefined : settings.fontSizes;
  },
  'typography.customFontSize': function typographyCustomFontSize(settings) {
    return settings.disableCustomFontSizes === undefined ? undefined : !settings.disableCustomFontSizes;
  },
  'typography.customLineHeight': function typographyCustomLineHeight(settings) {
    return settings.enableCustomLineHeight;
  },
  'spacing.units': function spacingUnits(settings) {
    if (settings.enableCustomUnits === undefined) {
      return;
    }

    if (settings.enableCustomUnits === true) {
      return ['px', 'em', 'rem', 'vh', 'vw'];
    }

    return settings.enableCustomUnits;
  },
  'spacing.customPadding': function spacingCustomPadding(settings) {
    return settings.enableCustomSpacing;
  }
};

function blockAttributesMatch(blockAttributes, attributes) {
  for (var attribute in attributes) {
    if (attributes[attribute] !== blockAttributes[attribute]) {
      return false;
    }
  }

  return true;
}
/**
 * Hook that retrieves the setting for the given editor feature.
 * It works with nested objects using by finding the value at path.
 *
 * @param {string} featurePath The path to the feature.
 *
 * @return {any} Returns the value defined for the setting.
 *
 * @example
 * ```js
 * const isEnabled = useEditorFeature( 'typography.dropCap' );
 * ```
 */


function useEditorFeature(featurePath) {
  var _useBlockEditContext = (0, _blockEdit.useBlockEditContext)(),
      blockName = _useBlockEditContext.name,
      clientId = _useBlockEditContext.clientId;

  var setting = (0, _data.useSelect)(function (select) {
    var _get;

    var _select = select(_store.store),
        getBlockAttributes = _select.getBlockAttributes,
        getSettings = _select.getSettings;

    var settings = getSettings();
    var blockType = select(_blocks.store).getBlockType(blockName);
    var context = blockName;
    var selectors = (0, _lodash.get)(blockType, ['supports', '__experimentalSelector']);

    if (clientId && (0, _lodash.isObject)(selectors)) {
      var blockAttributes = getBlockAttributes(clientId) || {};

      for (var contextSelector in selectors) {
        var attributes = selectors[contextSelector].attributes;

        if (blockAttributesMatch(blockAttributes, attributes)) {
          context = contextSelector;
          break;
        }
      }
    } // 1 - Use __experimental features, if available.
    // We cascade to the all value if the block one is not available.


    var defaultsPath = "__experimentalFeatures.defaults.".concat(featurePath);
    var blockPath = "__experimentalFeatures.".concat(context, ".").concat(featurePath);
    var experimentalFeaturesResult = (_get = (0, _lodash.get)(settings, blockPath)) !== null && _get !== void 0 ? _get : (0, _lodash.get)(settings, defaultsPath);

    if (experimentalFeaturesResult !== undefined) {
      return experimentalFeaturesResult;
    } // 2 - Use deprecated settings, otherwise.


    var deprecatedSettingsValue = deprecatedFlags[featurePath] ? deprecatedFlags[featurePath](settings) : undefined;

    if (deprecatedSettingsValue !== undefined) {
      return deprecatedSettingsValue;
    } // 3 - Fall back for typography.dropCap:
    // This is only necessary to support typography.dropCap.
    // when __experimentalFeatures are not present (core without plugin).
    // To remove when __experimentalFeatures are ported to core.


    return featurePath === 'typography.dropCap' ? true : undefined;
  }, [blockName, clientId, featurePath]);
  return setting;
}
//# sourceMappingURL=index.js.map