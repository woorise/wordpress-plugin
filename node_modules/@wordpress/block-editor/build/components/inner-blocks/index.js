"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInnerBlocksProps = useInnerBlocksProps;
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _compose = require("@wordpress/compose");

var _data = require("@wordpress/data");

var _blocks = require("@wordpress/blocks");

var _buttonBlockAppender = _interopRequireDefault(require("./button-block-appender"));

var _defaultBlockAppender = _interopRequireDefault(require("./default-block-appender"));

var _useNestedSettingsUpdate = _interopRequireDefault(require("./use-nested-settings-update"));

var _useInnerBlockTemplateSync = _interopRequireDefault(require("./use-inner-block-template-sync"));

var _getBlockContext = _interopRequireDefault(require("./get-block-context"));

var _blockList = require("../block-list");

var _blockContext = require("../block-context");

var _context = require("../block-edit/context");

var _useBlockSync = _interopRequireDefault(require("../provider/use-block-sync"));

var _store = require("../../store");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * InnerBlocks is a component which allows a single block to have multiple blocks
 * as children. The UncontrolledInnerBlocks component is used whenever the inner
 * blocks are not controlled by another entity. In other words, it is normally
 * used for inner blocks in the post editor
 *
 * @param {Object} props The component props.
 */
function UncontrolledInnerBlocks(props) {
  var clientId = props.clientId,
      allowedBlocks = props.allowedBlocks,
      template = props.template,
      templateLock = props.templateLock,
      wrapperRef = props.wrapperRef,
      templateInsertUpdatesSelection = props.templateInsertUpdatesSelection,
      captureToolbars = props.__experimentalCaptureToolbars,
      __experimentalAppenderTagName = props.__experimentalAppenderTagName,
      renderAppender = props.renderAppender,
      orientation = props.orientation,
      placeholder = props.placeholder,
      __experimentalLayout = props.__experimentalLayout;
  (0, _useNestedSettingsUpdate.default)(clientId, allowedBlocks, templateLock, captureToolbars, orientation);
  (0, _useInnerBlockTemplateSync.default)(clientId, template, templateLock, templateInsertUpdatesSelection);
  var context = (0, _data.useSelect)(function (select) {
    var block = select(_store.store).getBlock(clientId);
    var blockType = (0, _blocks.getBlockType)(block.name);

    if (!blockType || !blockType.providesContext) {
      return;
    }

    return (0, _getBlockContext.default)(block.attributes, blockType);
  }, [clientId]); // This component needs to always be synchronous as it's the one changing
  // the async mode depending on the block selection.

  return (0, _element.createElement)(_blockContext.BlockContextProvider, {
    value: context
  }, (0, _element.createElement)(_blockList.BlockListItems, {
    rootClientId: clientId,
    renderAppender: renderAppender,
    __experimentalAppenderTagName: __experimentalAppenderTagName,
    __experimentalLayout: __experimentalLayout,
    wrapperRef: wrapperRef,
    placeholder: placeholder
  }));
}
/**
 * The controlled inner blocks component wraps the uncontrolled inner blocks
 * component with the blockSync hook. This keeps the innerBlocks of the block in
 * the block-editor store in sync with the blocks of the controlling entity. An
 * example of an inner block controller is a template part block, which provides
 * its own blocks from the template part entity data source.
 *
 * @param {Object} props The component props.
 */


function ControlledInnerBlocks(props) {
  (0, _useBlockSync.default)(props);
  return (0, _element.createElement)(UncontrolledInnerBlocks, props);
}

var ForwardedInnerBlocks = (0, _element.forwardRef)(function (props, ref) {
  var innerBlocksProps = useInnerBlocksProps({
    ref: ref
  }, props);
  return (0, _element.createElement)("div", {
    className: "block-editor-inner-blocks"
  }, (0, _element.createElement)("div", innerBlocksProps));
});
/**
 * This hook is used to lightly mark an element as an inner blocks wrapper
 * element. Call this hook and pass the returned props to the element to mark as
 * an inner blocks wrapper, automatically rendering inner blocks as children. If
 * you define a ref for the element, it is important to pass the ref to this
 * hook, which the hook in turn will pass to the component through the props it
 * returns. Optionally, you can also pass any other props through this hook, and
 * they will be merged and returned.
 *
 * @param {Object} props   Optional. Props to pass to the element. Must contain
 *                         the ref if one is defined.
 * @param {Object} options Optional. Inner blocks options.
 *
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/inner-blocks/README.md
 */

function useInnerBlocksProps() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fallbackRef = (0, _element.useRef)();

  var _useBlockEditContext = (0, _context.useBlockEditContext)(),
      clientId = _useBlockEditContext.clientId;

  var isSmallScreen = (0, _compose.useViewportMatch)('medium', '<');
  var hasOverlay = (0, _data.useSelect)(function (select) {
    var _select = select(_store.store),
        getBlockName = _select.getBlockName,
        isBlockSelected = _select.isBlockSelected,
        hasSelectedInnerBlock = _select.hasSelectedInnerBlock,
        isNavigationMode = _select.isNavigationMode;

    var enableClickThrough = isNavigationMode() || isSmallScreen;
    return getBlockName(clientId) !== 'core/template' && !isBlockSelected(clientId) && !hasSelectedInnerBlock(clientId, true) && enableClickThrough;
  }, [clientId, isSmallScreen]);
  var ref = (0, _compose.useMergeRefs)([props.ref, fallbackRef]);
  var InnerBlocks = options.value && options.onChange ? ControlledInnerBlocks : UncontrolledInnerBlocks;
  return _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    className: (0, _classnames.default)(props.className, 'block-editor-block-list__layout', {
      'has-overlay': hasOverlay
    }),
    children: (0, _element.createElement)(InnerBlocks, (0, _extends2.default)({}, options, {
      clientId: clientId,
      wrapperRef: fallbackRef
    }))
  });
} // Expose default appender placeholders as components.


ForwardedInnerBlocks.DefaultBlockAppender = _defaultBlockAppender.default;
ForwardedInnerBlocks.ButtonBlockAppender = _buttonBlockAppender.default;
ForwardedInnerBlocks.Content = (0, _blocks.withBlockContentContext)(function (_ref) {
  var BlockContent = _ref.BlockContent;
  return (0, _element.createElement)(BlockContent, null);
});
/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/inner-blocks/README.md
 */

var _default = ForwardedInnerBlocks;
exports.default = _default;
//# sourceMappingURL=index.js.map