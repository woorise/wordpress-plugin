{"version":3,"sources":["@wordpress/block-editor/src/components/line-height-control/index.js"],"names":["LineHeightControl","lineHeight","value","onChange","isDefined","handleOnKeyDown","event","keyCode","ZERO","preventDefault","handleOnChange","nextValue","adjustedNextValue","STEP","BASE_DEFAULT_VALUE","RESET_VALUE"],"mappings":";;;;;;;;;AAGA;;AACA;;AACA;;AAKA;;AAVA;AACA;AACA;;AAKA;AACA;AACA;AAQe,SAASA,iBAAT,OAA8D;AAAA,MAAzBC,UAAyB,QAAhCC,KAAgC;AAAA,MAAbC,QAAa,QAAbA,QAAa;AAC5E,MAAMC,SAAS,GAAG,gCAAqBH,UAArB,CAAlB;;AAEA,MAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAEC,KAAF,EAAa;AAAA,QAC5BC,OAD4B,GAChBD,KADgB,CAC5BC,OAD4B;;AAGpC,QAAKA,OAAO,KAAKC,cAAZ,IAAoB,CAAEJ,SAA3B,EAAuC;AACtC;AACH;AACA;AACA;AACA;AACGE,MAAAA,KAAK,CAACG,cAAN;AACAN,MAAAA,QAAQ,CAAE,GAAF,CAAR;AACA;AACD,GAZD;;AAcA,MAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAAEC,SAAF,EAAiB;AACvC;AACA,QAAKP,SAAL,EAAiB;AAChBD,MAAAA,QAAQ,CAAEQ,SAAF,CAAR;AACA;AACA,KALsC,CAOvC;;AACA;AACF;AACA;AACA;AACA;;;AACE,QAAIC,iBAAiB,GAAGD,SAAxB;;AAEA,YAASA,SAAT;AACC,qBAASE,WAAT;AACC;AACAD,QAAAA,iBAAiB,GAAGE,4BAAqBD,WAAzC;AACA;;AACD,WAAK,GAAL;AACC;AACAD,QAAAA,iBAAiB,GAAGE,4BAAqBD,WAAzC;AACA;AARF;;AAWAV,IAAAA,QAAQ,CAAES,iBAAF,CAAR;AACA,GA3BD;;AA6BA,MAAMV,KAAK,GAAGE,SAAS,GAAGH,UAAH,GAAgBc,kBAAvC;AAEA,SACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC,4BAAC,uBAAD;AACC,IAAA,YAAY,EAAC,KADd;AAEC,IAAA,SAAS,EAAGV,eAFb;AAGC,IAAA,QAAQ,EAAGK,cAHZ;AAIC,IAAA,KAAK,EAAG,cAAI,aAAJ,CAJT;AAKC,IAAA,WAAW,EAAGI,yBALf;AAMC,IAAA,IAAI,EAAGD,WANR;AAOC,IAAA,IAAI,EAAC,QAPN;AAQC,IAAA,KAAK,EAAGX,KART;AASC,IAAA,GAAG,EAAG;AATP,IADD,CADD;AAeA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { TextControl } from '@wordpress/components';\nimport { ZERO } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport {\n\tBASE_DEFAULT_VALUE,\n\tRESET_VALUE,\n\tSTEP,\n\tisLineHeightDefined,\n} from './utils';\n\nexport default function LineHeightControl( { value: lineHeight, onChange } ) {\n\tconst isDefined = isLineHeightDefined( lineHeight );\n\n\tconst handleOnKeyDown = ( event ) => {\n\t\tconst { keyCode } = event;\n\n\t\tif ( keyCode === ZERO && ! isDefined ) {\n\t\t\t/**\n\t\t\t * Prevents the onChange callback from firing, which prevents\n\t\t\t * the logic from assuming the change was triggered from\n\t\t\t * an input arrow CLICK.\n\t\t\t */\n\t\t\tevent.preventDefault();\n\t\t\tonChange( '0' );\n\t\t}\n\t};\n\n\tconst handleOnChange = ( nextValue ) => {\n\t\t// Set the next value without modification if lineHeight has been defined\n\t\tif ( isDefined ) {\n\t\t\tonChange( nextValue );\n\t\t\treturn;\n\t\t}\n\n\t\t// Otherwise...\n\t\t/**\n\t\t * The following logic handles the initial up/down arrow CLICK of the\n\t\t * input element. This is so that the next values (from an undefined value state)\n\t\t * are more better suited for line-height rendering.\n\t\t */\n\t\tlet adjustedNextValue = nextValue;\n\n\t\tswitch ( nextValue ) {\n\t\t\tcase `${ STEP }`:\n\t\t\t\t// Increment by step value\n\t\t\t\tadjustedNextValue = BASE_DEFAULT_VALUE + STEP;\n\t\t\t\tbreak;\n\t\t\tcase '0':\n\t\t\t\t// Decrement by step value\n\t\t\t\tadjustedNextValue = BASE_DEFAULT_VALUE - STEP;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tonChange( adjustedNextValue );\n\t};\n\n\tconst value = isDefined ? lineHeight : RESET_VALUE;\n\n\treturn (\n\t\t<div className=\"block-editor-line-height-control\">\n\t\t\t<TextControl\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\tonKeyDown={ handleOnKeyDown }\n\t\t\t\tonChange={ handleOnChange }\n\t\t\t\tlabel={ __( 'Line height' ) }\n\t\t\t\tplaceholder={ BASE_DEFAULT_VALUE }\n\t\t\t\tstep={ STEP }\n\t\t\t\ttype=\"number\"\n\t\t\t\tvalue={ value }\n\t\t\t\tmin={ 0 }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n"]}