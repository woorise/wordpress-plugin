{"version":3,"sources":["@wordpress/block-editor/src/components/block-navigation/use-block-navigation-drop-zone.js"],"names":["useDropTargetBlocksData","ref","position","dragEventType","select","selectors","blockEditorStore","canInsertBlocks","getBlockRootClientId","getBlockIndex","getBlockCount","getDraggedBlockClientIds","blocksData","hasPosition","current","isBlockDrag","draggedBlockClientIds","undefined","blockElements","Array","from","querySelectorAll","map","blockElement","clientId","dataset","block","rootClientId","blockIndex","element","isDraggedBlock","includes","innerBlockCount","canInsertDraggedBlocksAsSibling","canInsertDraggedBlocksAsChild","isPointContainedByRect","point","rect","left","x","right","top","y","bottom","isNestingGesture","blockCenterX","width","ALLOWED_DROP_EDGES","getBlockNavigationDropTarget","candidateEdge","candidateBlockData","candidateDistance","candidateRect","blockData","getBoundingClientRect","distance","edge","isCursorWithinBlock","index","indexOf","previousBlockData","isDraggingBelow","dropPosition","offset","useBlockNavigationDropZone","target","setTarget","targetRootClientId","targetBlockIndex","dropEventHandlers","withPosition","type","newTarget"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __unstableUseDropZone as useDropZone } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport { useEffect, useRef, useState } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { getDistanceToNearestEdge } from '../../utils/math';\nimport useOnBlockDrop from '../use-on-block-drop';\nimport { store as blockEditorStore } from '../../store';\n\n/** @typedef {import('../../utils/math').WPPoint} WPPoint */\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n\n/**\n * The type of a drag event.\n *\n * @typedef {'default'|'file'|'html'} WPDragEventType\n */\n\n/**\n * An array representing data for blocks in the DOM used by drag and drop.\n *\n * @typedef {Object} WPBlockNavigationDropZoneBlocks\n * @property {string}  clientId                        The client id for the block.\n * @property {string}  rootClientId                    The root client id for the block.\n * @property {number}  blockIndex                      The block's index.\n * @property {Element} element                         The DOM element representing the block.\n * @property {number}  innerBlockCount                 The number of inner blocks the block has.\n * @property {boolean} isDraggedBlock                  Whether the block is currently being dragged.\n * @property {boolean} canInsertDraggedBlocksAsSibling Whether the dragged block can be a sibling of this block.\n * @property {boolean} canInsertDraggedBlocksAsChild   Whether the dragged block can be a child of this block.\n */\n\n/**\n * An object containing details of a drop target.\n *\n * @typedef {Object} WPBlockNavigationDropZoneTarget\n * @property {string}                   blockIndex   The insertion index.\n * @property {string}                   rootClientId The root client id for the block.\n * @property {string|undefined}         clientId     The client id for the block.\n * @property {'top'|'bottom'|'inside'}  dropPosition The position relative to the block that the user is dropping to.\n *                                                   'inside' refers to nesting as an inner block.\n */\n\n/**\n * A react hook that returns data about blocks used for computing where a user\n * can drop to when dragging and dropping blocks.\n *\n * @param {Object}          ref           A React ref of a containing element for block navigation.\n * @param {WPPoint}         position      The current drag position.\n * @param {WPDragEventType} dragEventType The drag event type.\n *\n * @return {RefObject<WPBlockNavigationDropZoneBlocks>} A React ref containing the blocks data.\n */\nfunction useDropTargetBlocksData( ref, position, dragEventType ) {\n\tconst {\n\t\tgetBlockRootClientId,\n\t\tgetBlockIndex,\n\t\tgetBlockCount,\n\t\tgetDraggedBlockClientIds,\n\t\tcanInsertBlocks,\n\t} = useSelect( ( select ) => {\n\t\tconst selectors = select( blockEditorStore );\n\t\treturn {\n\t\t\tcanInsertBlocks: selectors.canInsertBlocks,\n\t\t\tgetBlockRootClientId: selectors.getBlockRootClientId,\n\t\t\tgetBlockIndex: selectors.getBlockIndex,\n\t\t\tgetBlockCount: selectors.getBlockCount,\n\t\t\tgetDraggedBlockClientIds: selectors.getDraggedBlockClientIds,\n\t\t};\n\t}, [] );\n\tconst blocksData = useRef();\n\n\t// Compute data about blocks only when the user\n\t// starts dragging, as determined by `hasPosition`.\n\tconst hasPosition = !! position;\n\n\tuseEffect( () => {\n\t\tif ( ! ref.current || ! hasPosition ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isBlockDrag = dragEventType === 'default';\n\n\t\tconst draggedBlockClientIds = isBlockDrag\n\t\t\t? getDraggedBlockClientIds()\n\t\t\t: undefined;\n\n\t\tconst blockElements = Array.from(\n\t\t\tref.current.querySelectorAll( '[data-block]' )\n\t\t);\n\n\t\tblocksData.current = blockElements.map( ( blockElement ) => {\n\t\t\tconst clientId = blockElement.dataset.block;\n\t\t\tconst rootClientId = getBlockRootClientId( clientId );\n\n\t\t\treturn {\n\t\t\t\tclientId,\n\t\t\t\trootClientId,\n\t\t\t\tblockIndex: getBlockIndex( clientId, rootClientId ),\n\t\t\t\telement: blockElement,\n\t\t\t\tisDraggedBlock: isBlockDrag\n\t\t\t\t\t? draggedBlockClientIds.includes( clientId )\n\t\t\t\t\t: false,\n\t\t\t\tinnerBlockCount: getBlockCount( clientId ),\n\t\t\t\tcanInsertDraggedBlocksAsSibling: isBlockDrag\n\t\t\t\t\t? canInsertBlocks( draggedBlockClientIds, rootClientId )\n\t\t\t\t\t: true,\n\t\t\t\tcanInsertDraggedBlocksAsChild: isBlockDrag\n\t\t\t\t\t? canInsertBlocks( draggedBlockClientIds, clientId )\n\t\t\t\t\t: true,\n\t\t\t};\n\t\t} );\n\t}, [\n\t\t// `ref` shouldn't actually change during a drag operation, but\n\t\t// is specified for completeness as it's used within the hook.\n\t\tref,\n\t\thasPosition,\n\t\tdragEventType,\n\t\tcanInsertBlocks,\n\t\tgetBlockCount,\n\t\tgetBlockIndex,\n\t\tgetBlockRootClientId,\n\t\tgetDraggedBlockClientIds,\n\t] );\n\n\treturn blocksData;\n}\n\n/**\n * Is the point contained by the rectangle.\n *\n * @param {WPPoint} point The point.\n * @param {DOMRect} rect  The rectangle.\n *\n * @return {boolean} True if the point is contained by the rectangle, false otherwise.\n */\nfunction isPointContainedByRect( point, rect ) {\n\treturn (\n\t\trect.left <= point.x &&\n\t\trect.right >= point.x &&\n\t\trect.top <= point.y &&\n\t\trect.bottom >= point.y\n\t);\n}\n\n/**\n * Determines whether the user positioning the dragged block to nest as an\n * inner block.\n *\n * Presently this is determined by whether the cursor is on the right hand side\n * of the block.\n *\n * @param {WPPoint} point The point representing the cursor position when dragging.\n * @param {DOMRect} rect  The rectangle.\n */\nfunction isNestingGesture( point, rect ) {\n\tconst blockCenterX = rect.left + rect.width / 2;\n\treturn point.x > blockCenterX;\n}\n\n// Block navigation is always a vertical list, so only allow dropping\n// to the above or below a block.\nconst ALLOWED_DROP_EDGES = [ 'top', 'bottom' ];\n\n/**\n * Given blocks data and the cursor position, compute the drop target.\n *\n * @param {WPBlockNavigationDropZoneBlocks} blocksData Data about the blocks in block navigation.\n * @param {WPPoint} position The point representing the cursor position when dragging.\n *\n * @return {WPBlockNavigationDropZoneTarget} An object containing data about the drop target.\n */\nfunction getBlockNavigationDropTarget( blocksData, position ) {\n\tlet candidateEdge;\n\tlet candidateBlockData;\n\tlet candidateDistance;\n\tlet candidateRect;\n\n\tfor ( const blockData of blocksData ) {\n\t\tif ( blockData.isDraggedBlock ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst rect = blockData.element.getBoundingClientRect();\n\t\tconst [ distance, edge ] = getDistanceToNearestEdge(\n\t\t\tposition,\n\t\t\trect,\n\t\t\tALLOWED_DROP_EDGES\n\t\t);\n\n\t\tconst isCursorWithinBlock = isPointContainedByRect( position, rect );\n\t\tif (\n\t\t\tcandidateDistance === undefined ||\n\t\t\tdistance < candidateDistance ||\n\t\t\tisCursorWithinBlock\n\t\t) {\n\t\t\tcandidateDistance = distance;\n\n\t\t\tconst index = blocksData.indexOf( blockData );\n\t\t\tconst previousBlockData = blocksData[ index - 1 ];\n\n\t\t\t// If dragging near the top of a block and the preceding block\n\t\t\t// is at the same level, use the preceding block as the candidate\n\t\t\t// instead, as later it makes determining a nesting drop easier.\n\t\t\tif (\n\t\t\t\tedge === 'top' &&\n\t\t\t\tpreviousBlockData &&\n\t\t\t\tpreviousBlockData.rootClientId === blockData.rootClientId &&\n\t\t\t\t! previousBlockData.isDraggedBlock\n\t\t\t) {\n\t\t\t\tcandidateBlockData = previousBlockData;\n\t\t\t\tcandidateEdge = 'bottom';\n\t\t\t\tcandidateRect = previousBlockData.element.getBoundingClientRect();\n\t\t\t} else {\n\t\t\t\tcandidateBlockData = blockData;\n\t\t\t\tcandidateEdge = edge;\n\t\t\t\tcandidateRect = rect;\n\t\t\t}\n\n\t\t\t// If the mouse position is within the block, break early\n\t\t\t// as the user would intend to drop either before or after\n\t\t\t// this block.\n\t\t\t//\n\t\t\t// This solves an issue where some rows in the block navigation\n\t\t\t// tree overlap slightly due to sub-pixel rendering.\n\t\t\tif ( isCursorWithinBlock ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! candidateBlockData ) {\n\t\treturn;\n\t}\n\n\tconst isDraggingBelow = candidateEdge === 'bottom';\n\n\t// If the user is dragging towards the bottom of the block check whether\n\t// they might be trying to nest the block as a child.\n\t// If the block already has inner blocks, this should always be treated\n\t// as nesting since the next block in the tree will be the first child.\n\tif (\n\t\tisDraggingBelow &&\n\t\tcandidateBlockData.canInsertDraggedBlocksAsChild &&\n\t\t( candidateBlockData.innerBlockCount > 0 ||\n\t\t\tisNestingGesture( position, candidateRect ) )\n\t) {\n\t\treturn {\n\t\t\trootClientId: candidateBlockData.clientId,\n\t\t\tblockIndex: 0,\n\t\t\tdropPosition: 'inside',\n\t\t};\n\t}\n\n\t// If dropping as a sibling, but block cannot be inserted in\n\t// this context, return early.\n\tif ( ! candidateBlockData.canInsertDraggedBlocksAsSibling ) {\n\t\treturn;\n\t}\n\n\tconst offset = isDraggingBelow ? 1 : 0;\n\treturn {\n\t\trootClientId: candidateBlockData.rootClientId,\n\t\tclientId: candidateBlockData.clientId,\n\t\tblockIndex: candidateBlockData.blockIndex + offset,\n\t\tdropPosition: candidateEdge,\n\t};\n}\n\n/**\n * A react hook for implementing a drop zone in block navigation.\n *\n * @param {Object} ref A React ref of a containing element for block navigation.\n *\n * @return {WPBlockNavigationDropZoneTarget} The drop target.\n */\nexport default function useBlockNavigationDropZone( ref ) {\n\tconst [ target = {}, setTarget ] = useState();\n\tconst {\n\t\trootClientId: targetRootClientId,\n\t\tblockIndex: targetBlockIndex,\n\t} = target;\n\n\tconst dropEventHandlers = useOnBlockDrop(\n\t\ttargetRootClientId,\n\t\ttargetBlockIndex\n\t);\n\n\tconst { position, type: dragEventType } = useDropZone( {\n\t\telement: ref,\n\t\twithPosition: true,\n\t\t...dropEventHandlers,\n\t} );\n\n\tconst blocksData = useDropTargetBlocksData( ref, position, dragEventType );\n\n\t// Calculate the drop target based on the drag position.\n\tuseEffect( () => {\n\t\tif ( position ) {\n\t\t\tconst newTarget = getBlockNavigationDropTarget(\n\t\t\t\tblocksData.current,\n\t\t\t\tposition\n\t\t\t);\n\n\t\t\tif ( newTarget ) {\n\t\t\t\tsetTarget( newTarget );\n\t\t\t}\n\t\t}\n\t}, [ blocksData, position ] );\n\n\tif ( position ) {\n\t\treturn target;\n\t}\n}\n"]}