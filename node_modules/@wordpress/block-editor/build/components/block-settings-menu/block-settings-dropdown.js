"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockSettingsDropdown = BlockSettingsDropdown;
exports.default = void 0;

var _element = require("@wordpress/element");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _icons = require("@wordpress/icons");

var _blocks = require("@wordpress/blocks");

var _keyboardShortcuts = require("@wordpress/keyboard-shortcuts");

var _compose = require("@wordpress/compose");

var _blockActions = _interopRequireDefault(require("../block-actions"));

var _blockModeToggle = _interopRequireDefault(require("./block-mode-toggle"));

var _blockHtmlConvertButton = _interopRequireDefault(require("./block-html-convert-button"));

var _blockSettingsMenuFirstItem = _interopRequireDefault(require("./block-settings-menu-first-item"));

var _blockSettingsMenuControls = _interopRequireDefault(require("../block-settings-menu-controls"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var POPOVER_PROPS = {
  className: 'block-editor-block-settings-menu__popover',
  position: 'bottom right',
  isAlternate: true
};

function CopyMenuItem(_ref) {
  var blocks = _ref.blocks,
      onCopy = _ref.onCopy;
  var ref = (0, _compose.useCopyToClipboard)(function () {
    return (0, _blocks.serialize)(blocks);
  }, onCopy);
  return (0, _element.createElement)(_components.MenuItem, {
    ref: ref
  }, (0, _i18n.__)('Copy'));
}

function BlockSettingsDropdown(_ref2) {
  var clientIds = _ref2.clientIds,
      __experimentalSelectBlock = _ref2.__experimentalSelectBlock,
      children = _ref2.children,
      props = (0, _objectWithoutProperties2.default)(_ref2, ["clientIds", "__experimentalSelectBlock", "children"]);
  var blockClientIds = (0, _lodash.castArray)(clientIds);
  var count = blockClientIds.length;
  var firstBlockClientId = blockClientIds[0];
  var shortcuts = (0, _data.useSelect)(function (select) {
    var _select = select(_keyboardShortcuts.store),
        getShortcutRepresentation = _select.getShortcutRepresentation;

    return {
      duplicate: getShortcutRepresentation('core/block-editor/duplicate'),
      remove: getShortcutRepresentation('core/block-editor/remove'),
      insertAfter: getShortcutRepresentation('core/block-editor/insert-after'),
      insertBefore: getShortcutRepresentation('core/block-editor/insert-before')
    };
  }, []);
  var updateSelection = (0, _element.useCallback)(__experimentalSelectBlock ? /*#__PURE__*/function () {
    var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(clientIdsPromise) {
      var ids;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return clientIdsPromise;

            case 2:
              ids = _context.sent;

              if (ids && ids[0]) {
                __experimentalSelectBlock(ids[0]);
              }

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }() : _lodash.noop, [__experimentalSelectBlock]);
  var removeBlockLabel = count === 1 ? (0, _i18n.__)('Remove block') : (0, _i18n.__)('Remove blocks');
  return (0, _element.createElement)(_blockActions.default, {
    clientIds: clientIds,
    __experimentalUpdateSelection: !__experimentalSelectBlock
  }, function (_ref4) {
    var canDuplicate = _ref4.canDuplicate,
        canInsertDefaultBlock = _ref4.canInsertDefaultBlock,
        isLocked = _ref4.isLocked,
        onDuplicate = _ref4.onDuplicate,
        onInsertAfter = _ref4.onInsertAfter,
        onInsertBefore = _ref4.onInsertBefore,
        onRemove = _ref4.onRemove,
        onCopy = _ref4.onCopy,
        onMoveTo = _ref4.onMoveTo,
        blocks = _ref4.blocks;
    return (0, _element.createElement)(_components.DropdownMenu, (0, _extends2.default)({
      icon: _icons.moreVertical,
      label: (0, _i18n.__)('Options'),
      className: "block-editor-block-settings-menu",
      popoverProps: POPOVER_PROPS,
      noIcons: true
    }, props), function (_ref5) {
      var onClose = _ref5.onClose;
      return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.MenuGroup, null, (0, _element.createElement)(_blockSettingsMenuFirstItem.default.Slot, {
        fillProps: {
          onClose: onClose
        }
      }), count === 1 && (0, _element.createElement)(_blockHtmlConvertButton.default, {
        clientId: firstBlockClientId
      }), (0, _element.createElement)(CopyMenuItem, {
        blocks: blocks,
        onCopy: onCopy
      }), canDuplicate && (0, _element.createElement)(_components.MenuItem, {
        onClick: (0, _lodash.flow)(onClose, onDuplicate, updateSelection),
        shortcut: shortcuts.duplicate
      }, (0, _i18n.__)('Duplicate')), canInsertDefaultBlock && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.MenuItem, {
        onClick: (0, _lodash.flow)(onClose, onInsertBefore),
        shortcut: shortcuts.insertBefore
      }, (0, _i18n.__)('Insert before')), (0, _element.createElement)(_components.MenuItem, {
        onClick: (0, _lodash.flow)(onClose, onInsertAfter),
        shortcut: shortcuts.insertAfter
      }, (0, _i18n.__)('Insert after'))), !isLocked && (0, _element.createElement)(_components.MenuItem, {
        onClick: (0, _lodash.flow)(onClose, onMoveTo)
      }, (0, _i18n.__)('Move to')), count === 1 && (0, _element.createElement)(_blockModeToggle.default, {
        clientId: firstBlockClientId,
        onToggle: onClose
      })), (0, _element.createElement)(_blockSettingsMenuControls.default.Slot, {
        fillProps: {
          onClose: onClose
        },
        clientIds: clientIds
      }), typeof children === 'function' ? children({
        onClose: onClose
      }) : _element.Children.map(function (child) {
        return (0, _element.cloneElement)(child, {
          onClose: onClose
        });
      }), (0, _element.createElement)(_components.MenuGroup, null, !isLocked && (0, _element.createElement)(_components.MenuItem, {
        onClick: (0, _lodash.flow)(onClose, onRemove, updateSelection),
        shortcut: shortcuts.remove
      }, removeBlockLabel)));
    });
  });
}

var _default = BlockSettingsDropdown;
exports.default = _default;
//# sourceMappingURL=block-settings-dropdown.js.map