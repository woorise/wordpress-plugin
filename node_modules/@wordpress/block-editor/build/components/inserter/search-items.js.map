{"version":3,"sources":["@wordpress/block-editor/src/components/inserter/search-items.js"],"names":["defaultGetName","item","name","defaultGetTitle","title","defaultGetDescription","description","defaultGetKeywords","keywords","defaultGetCategory","category","defaultGetCollection","normalizeSearchInput","input","replace","toLowerCase","getNormalizedSearchTerms","removeMatchingTerms","unmatchedTerms","unprocessedTerms","unmatchedTerm","unprocessedTerm","includes","searchBlockItems","items","categories","collections","searchInput","normalizedSearchTerms","length","config","getCategory","slug","getCollection","split","searchItems","rankedItems","map","getItemSearchRank","filter","rank","sort","rank1","rank2","searchTerm","getName","getTitle","getDescription","getKeywords","collection","normalizedSearchInput","normalizedTitle","startsWith","terms","join"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { deburr, differenceWith, find, words } from 'lodash';\n\n// Default search helpers\nconst defaultGetName = ( item ) => item.name || '';\nconst defaultGetTitle = ( item ) => item.title;\nconst defaultGetDescription = ( item ) => item.description || '';\nconst defaultGetKeywords = ( item ) => item.keywords || [];\nconst defaultGetCategory = ( item ) => item.category;\nconst defaultGetCollection = () => null;\n\n/**\n * Sanitizes the search input string.\n *\n * @param {string} input The search input to normalize.\n *\n * @return {string} The normalized search input.\n */\nfunction normalizeSearchInput( input = '' ) {\n\t// Disregard diacritics.\n\t//  Input: \"mÃ©dia\"\n\tinput = deburr( input );\n\n\t// Accommodate leading slash, matching autocomplete expectations.\n\t//  Input: \"/media\"\n\tinput = input.replace( /^\\//, '' );\n\n\t// Lowercase.\n\t//  Input: \"MEDIA\"\n\tinput = input.toLowerCase();\n\n\treturn input;\n}\n\n/**\n * Converts the search term into a list of normalized terms.\n *\n * @param {string} input The search term to normalize.\n *\n * @return {string[]} The normalized list of search terms.\n */\nexport const getNormalizedSearchTerms = ( input = '' ) => {\n\t// Extract words.\n\treturn words( normalizeSearchInput( input ) );\n};\n\nconst removeMatchingTerms = ( unmatchedTerms, unprocessedTerms ) => {\n\treturn differenceWith(\n\t\tunmatchedTerms,\n\t\tgetNormalizedSearchTerms( unprocessedTerms ),\n\t\t( unmatchedTerm, unprocessedTerm ) =>\n\t\t\tunprocessedTerm.includes( unmatchedTerm )\n\t);\n};\n\nexport const searchBlockItems = (\n\titems,\n\tcategories,\n\tcollections,\n\tsearchInput\n) => {\n\tconst normalizedSearchTerms = getNormalizedSearchTerms( searchInput );\n\tif ( normalizedSearchTerms.length === 0 ) {\n\t\treturn items;\n\t}\n\n\tconst config = {\n\t\tgetCategory: ( item ) =>\n\t\t\tfind( categories, { slug: item.category } )?.title,\n\t\tgetCollection: ( item ) =>\n\t\t\tcollections[ item.name.split( '/' )[ 0 ] ]?.title,\n\t};\n\n\treturn searchItems( items, searchInput, config );\n};\n\n/**\n * Filters an item list given a search term.\n *\n * @param {Array}  items       Item list\n * @param {string} searchInput Search input.\n * @param {Object} config      Search Config.\n * @return {Array}             Filtered item list.\n */\nexport const searchItems = ( items = [], searchInput = '', config = {} ) => {\n\tconst normalizedSearchTerms = getNormalizedSearchTerms( searchInput );\n\tif ( normalizedSearchTerms.length === 0 ) {\n\t\treturn items;\n\t}\n\n\tconst rankedItems = items\n\t\t.map( ( item ) => {\n\t\t\treturn [ item, getItemSearchRank( item, searchInput, config ) ];\n\t\t} )\n\t\t.filter( ( [ , rank ] ) => rank > 0 );\n\n\trankedItems.sort( ( [ , rank1 ], [ , rank2 ] ) => rank2 - rank1 );\n\treturn rankedItems.map( ( [ item ] ) => item );\n};\n\n/**\n * Get the search rank for a given item and a specific search term.\n * The better the match, the higher the rank.\n * If the rank equals 0, it should be excluded from the results.\n *\n * @param {Object} item       Item to filter.\n * @param {string} searchTerm Search term.\n * @param {Object} config     Search Config.\n * @return {number}           Search Rank.\n */\nexport function getItemSearchRank( item, searchTerm, config = {} ) {\n\tconst {\n\t\tgetName = defaultGetName,\n\t\tgetTitle = defaultGetTitle,\n\t\tgetDescription = defaultGetDescription,\n\t\tgetKeywords = defaultGetKeywords,\n\t\tgetCategory = defaultGetCategory,\n\t\tgetCollection = defaultGetCollection,\n\t} = config;\n\n\tconst name = getName( item );\n\tconst title = getTitle( item );\n\tconst description = getDescription( item );\n\tconst keywords = getKeywords( item );\n\tconst category = getCategory( item );\n\tconst collection = getCollection( item );\n\n\tconst normalizedSearchInput = normalizeSearchInput( searchTerm );\n\tconst normalizedTitle = normalizeSearchInput( title );\n\n\tlet rank = 0;\n\n\t// Prefers exact matches\n\t// Then prefers if the beginning of the title matches the search term\n\t// name, keywords, categories, collection, variations match come later.\n\tif ( normalizedSearchInput === normalizedTitle ) {\n\t\trank += 30;\n\t} else if ( normalizedTitle.startsWith( normalizedSearchInput ) ) {\n\t\trank += 20;\n\t} else {\n\t\tconst terms = [\n\t\t\tname,\n\t\t\ttitle,\n\t\t\tdescription,\n\t\t\t...keywords,\n\t\t\tcategory,\n\t\t\tcollection,\n\t\t].join( ' ' );\n\t\tconst normalizedSearchTerms = words( normalizedSearchInput );\n\t\tconst unmatchedTerms = removeMatchingTerms(\n\t\t\tnormalizedSearchTerms,\n\t\t\tterms\n\t\t);\n\n\t\tif ( unmatchedTerms.length === 0 ) {\n\t\t\trank += 10;\n\t\t}\n\t}\n\n\t// Give a better rank to \"core\" namespaced items.\n\tif ( rank !== 0 && name.startsWith( 'core/' ) ) {\n\t\trank++;\n\t}\n\n\treturn rank;\n}\n"]}