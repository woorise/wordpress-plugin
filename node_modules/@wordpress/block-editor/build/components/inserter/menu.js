"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _tips = _interopRequireDefault(require("./tips"));

var _searchForm = _interopRequireDefault(require("./search-form"));

var _previewPanel = _interopRequireDefault(require("./preview-panel"));

var _blockTypesTab = _interopRequireDefault(require("./block-types-tab"));

var _blockPatternsTab = _interopRequireDefault(require("./block-patterns-tab"));

var _reusableBlocksTab = _interopRequireDefault(require("./reusable-blocks-tab"));

var _searchResults = _interopRequireDefault(require("./search-results"));

var _useInsertionPoint3 = _interopRequireDefault(require("./hooks/use-insertion-point"));

var _tabs = _interopRequireDefault(require("./tabs"));

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function InserterMenu(_ref) {
  var rootClientId = _ref.rootClientId,
      clientId = _ref.clientId,
      isAppender = _ref.isAppender,
      __experimentalInsertionIndex = _ref.__experimentalInsertionIndex,
      onSelect = _ref.onSelect,
      showInserterHelpPanel = _ref.showInserterHelpPanel,
      showMostUsedBlocks = _ref.showMostUsedBlocks,
      _ref$shouldFocusBlock = _ref.shouldFocusBlock,
      shouldFocusBlock = _ref$shouldFocusBlock === void 0 ? true : _ref$shouldFocusBlock;

  var _useState = (0, _element.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      filterValue = _useState2[0],
      setFilterValue = _useState2[1];

  var _useState3 = (0, _element.useState)(null),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      hoveredItem = _useState4[0],
      setHoveredItem = _useState4[1];

  var _useState5 = (0, _element.useState)(null),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      selectedPatternCategory = _useState6[0],
      setSelectedPatternCategory = _useState6[1];

  var _useInsertionPoint = (0, _useInsertionPoint3.default)({
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender,
    insertionIndex: __experimentalInsertionIndex,
    shouldFocusBlock: shouldFocusBlock
  }),
      _useInsertionPoint2 = (0, _slicedToArray2.default)(_useInsertionPoint, 3),
      destinationRootClientId = _useInsertionPoint2[0],
      onInsertBlocks = _useInsertionPoint2[1],
      onToggleInsertionPoint = _useInsertionPoint2[2];

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _getSettings$__experi;

    var _select = select(_store.store),
        __experimentalGetAllowedPatterns = _select.__experimentalGetAllowedPatterns,
        getSettings = _select.getSettings;

    return {
      showPatterns: !destinationRootClientId || !!__experimentalGetAllowedPatterns(destinationRootClientId).length,
      hasReusableBlocks: !!((_getSettings$__experi = getSettings().__experimentalReusableBlocks) !== null && _getSettings$__experi !== void 0 && _getSettings$__experi.length)
    };
  }, [destinationRootClientId]),
      showPatterns = _useSelect.showPatterns,
      hasReusableBlocks = _useSelect.hasReusableBlocks;

  var onInsert = (0, _element.useCallback)(function (blocks, meta, shouldForceFocusBlock) {
    onInsertBlocks(blocks, meta, shouldForceFocusBlock);
    onSelect();
  }, [onInsertBlocks, onSelect]);
  var onInsertPattern = (0, _element.useCallback)(function (blocks, patternName) {
    onInsertBlocks(blocks, {
      patternName: patternName
    });
    onSelect();
  }, [onInsertBlocks, onSelect]);
  var onHover = (0, _element.useCallback)(function (item) {
    onToggleInsertionPoint(!!item);
    setHoveredItem(item);
  }, [onToggleInsertionPoint, setHoveredItem]);
  var onClickPatternCategory = (0, _element.useCallback)(function (patternCategory) {
    setSelectedPatternCategory(patternCategory);
  }, [setSelectedPatternCategory]);
  var blocksTab = (0, _element.useMemo)(function () {
    return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("div", {
      className: "block-editor-inserter__block-list"
    }, (0, _element.createElement)(_blockTypesTab.default, {
      rootClientId: destinationRootClientId,
      onInsert: onInsert,
      onHover: onHover,
      showMostUsedBlocks: showMostUsedBlocks
    })), showInserterHelpPanel && (0, _element.createElement)("div", {
      className: "block-editor-inserter__tips"
    }, (0, _element.createElement)(_components.VisuallyHidden, {
      as: "h2"
    }, (0, _i18n.__)('A tip for using the block editor')), (0, _element.createElement)(_tips.default, null)));
  }, [destinationRootClientId, onInsert, onHover, filterValue, showMostUsedBlocks, showInserterHelpPanel]);
  var patternsTab = (0, _element.useMemo)(function () {
    return (0, _element.createElement)(_blockPatternsTab.default, {
      rootClientId: destinationRootClientId,
      onInsert: onInsertPattern,
      onClickCategory: onClickPatternCategory,
      selectedCategory: selectedPatternCategory
    });
  }, [destinationRootClientId, onInsertPattern, onClickPatternCategory, selectedPatternCategory]);
  var reusableBlocksTab = (0, _element.useMemo)(function () {
    return (0, _element.createElement)(_reusableBlocksTab.default, {
      rootClientId: destinationRootClientId,
      onInsert: onInsert,
      onHover: onHover
    });
  }, [destinationRootClientId, onInsert, onHover]);
  var getCurrentTab = (0, _element.useCallback)(function (tab) {
    if (tab.name === 'blocks') {
      return blocksTab;
    } else if (tab.name === 'patterns') {
      return patternsTab;
    }

    return reusableBlocksTab;
  }, [blocksTab, patternsTab, reusableBlocksTab]);
  return (0, _element.createElement)("div", {
    className: "block-editor-inserter__menu"
  }, (0, _element.createElement)("div", {
    className: "block-editor-inserter__main-area"
  }, (0, _element.createElement)("div", {
    className: "block-editor-inserter__content"
  }, (0, _element.createElement)(_searchForm.default, {
    onChange: function onChange(value) {
      if (hoveredItem) setHoveredItem(null);
      setFilterValue(value);
    },
    value: filterValue,
    label: (0, _i18n.__)('Search for blocks and patterns'),
    placeholder: (0, _i18n.__)('Search')
  }), !!filterValue && (0, _element.createElement)(_searchResults.default, {
    filterValue: filterValue,
    onSelect: onSelect,
    onHover: onHover,
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender,
    showBlockDirectory: true,
    shouldFocusBlock: shouldFocusBlock
  }), !filterValue && (showPatterns || hasReusableBlocks) && (0, _element.createElement)(_tabs.default, {
    showPatterns: showPatterns,
    showReusableBlocks: hasReusableBlocks
  }, getCurrentTab), !filterValue && !showPatterns && !hasReusableBlocks && blocksTab)), showInserterHelpPanel && hoveredItem && (0, _element.createElement)(_previewPanel.default, {
    item: hoveredItem
  }));
}

var _default = InserterMenu;
exports.default = _default;
//# sourceMappingURL=menu.js.map