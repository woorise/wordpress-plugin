{"version":3,"sources":["@wordpress/block-editor/src/components/inserter/index.native.js"],"names":["VOICE_OVER_ANNOUNCEMENT_DELAY","defaultRenderToggle","onToggle","disabled","style","onLongPress","plusCircleFilled","color","hint","testID","Inserter","arguments","bind","renderToggle","renderContent","addBeforeOption","value","label","icon","plusCircle","replaceCurrentOption","addAfterOption","addToBeginningOption","insertBefore","addToEndOption","insertAfter","props","isAnyBlockSelected","isSelectedBlockReplaceable","insertionType","insertionIndexDefault","insertionIndexStart","insertionIndexBefore","insertionIndexAfter","insertionIndexEnd","isOpen","onInserterToggledAnnouncement","AccessibilityInfo","fetch","done","isEnabled","isIOS","Platform","OS","announcement","announceForAccessibility","getStylesFromColorScheme","showSeparator","styles","addBlockButton","addBlockButtonDark","onPress","setState","destinationRootClientId","shouldReplaceBlock","insertionIndex","getInsertionIndex","picker","presentPicker","onPickerSelect","instance","getInsertionOptions","onClose","clientId","isAppender","state","Component","select","rootClientId","blockEditorStore","getBlockRootClientId","getBlockSelectionEnd","getBlockOrder","getBlockIndex","getBlock","end","selectedBlockIndex","endOfRootIndex","length","isSelectedUnmodifiedDefaultBlock","undefined","getDefaultInsertionIndex","getSettings","shouldInsertAtTheTop","__experimentalShouldInsertAtTheTop","withPreferredColorScheme"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { AccessibilityInfo, Platform } from 'react-native';\nimport { delay } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Dropdown, ToolbarButton, Picker } from '@wordpress/components';\nimport { Component } from '@wordpress/element';\nimport { withSelect } from '@wordpress/data';\nimport { compose, withPreferredColorScheme } from '@wordpress/compose';\nimport { isUnmodifiedDefaultBlock } from '@wordpress/blocks';\nimport {\n\tIcon,\n\tplusCircle,\n\tplusCircleFilled,\n\tinsertAfter,\n\tinsertBefore,\n} from '@wordpress/icons';\n\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\nimport InserterMenu from './menu';\nimport BlockInsertionPoint from '../block-list/insertion-point';\nimport { store as blockEditorStore } from '../../store';\n\nconst VOICE_OVER_ANNOUNCEMENT_DELAY = 1000;\n\nconst defaultRenderToggle = ( { onToggle, disabled, style, onLongPress } ) => (\n\t<ToolbarButton\n\t\ttitle={ __( 'Add block' ) }\n\t\ticon={\n\t\t\t<Icon\n\t\t\t\ticon={ plusCircleFilled }\n\t\t\t\tstyle={ style }\n\t\t\t\tcolor={ style.color }\n\t\t\t/>\n\t\t}\n\t\tonClick={ onToggle }\n\t\textraProps={ {\n\t\t\thint: __( 'Double tap to add a block' ),\n\t\t\t// testID is present to disambiguate this element for native UI tests. It's not\n\t\t\t// usually required for components. See: https://git.io/JeQ7G.\n\t\t\ttestID: 'add-block-button',\n\t\t\tonLongPress,\n\t\t} }\n\t\tisDisabled={ disabled }\n\t/>\n);\n\nexport class Inserter extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.onToggle = this.onToggle.bind( this );\n\t\tthis.renderToggle = this.renderToggle.bind( this );\n\t\tthis.renderContent = this.renderContent.bind( this );\n\t}\n\n\tgetInsertionOptions() {\n\t\tconst addBeforeOption = {\n\t\t\tvalue: 'before',\n\t\t\tlabel: __( 'Add Block Before' ),\n\t\t\ticon: plusCircle,\n\t\t};\n\n\t\tconst replaceCurrentOption = {\n\t\t\tvalue: 'replace',\n\t\t\tlabel: __( 'Replace Current Block' ),\n\t\t\ticon: plusCircleFilled,\n\t\t};\n\n\t\tconst addAfterOption = {\n\t\t\tvalue: 'after',\n\t\t\tlabel: __( 'Add Block After' ),\n\t\t\ticon: plusCircle,\n\t\t};\n\n\t\tconst addToBeginningOption = {\n\t\t\tvalue: 'start',\n\t\t\tlabel: __( 'Add To Beginning' ),\n\t\t\ticon: insertBefore,\n\t\t};\n\n\t\tconst addToEndOption = {\n\t\t\tvalue: 'end',\n\t\t\tlabel: __( 'Add To End' ),\n\t\t\ticon: insertAfter,\n\t\t};\n\n\t\tconst { isAnyBlockSelected, isSelectedBlockReplaceable } = this.props;\n\t\tif ( isAnyBlockSelected ) {\n\t\t\tif ( isSelectedBlockReplaceable ) {\n\t\t\t\treturn [\n\t\t\t\t\taddToBeginningOption,\n\t\t\t\t\taddBeforeOption,\n\t\t\t\t\treplaceCurrentOption,\n\t\t\t\t\taddAfterOption,\n\t\t\t\t\taddToEndOption,\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn [\n\t\t\t\taddToBeginningOption,\n\t\t\t\taddBeforeOption,\n\t\t\t\taddAfterOption,\n\t\t\t\taddToEndOption,\n\t\t\t];\n\t\t}\n\t\treturn [ addToBeginningOption, addToEndOption ];\n\t}\n\n\tgetInsertionIndex( insertionType ) {\n\t\tconst {\n\t\t\tinsertionIndexDefault,\n\t\t\tinsertionIndexStart,\n\t\t\tinsertionIndexBefore,\n\t\t\tinsertionIndexAfter,\n\t\t\tinsertionIndexEnd,\n\t\t} = this.props;\n\t\tif ( insertionType === 'start' ) {\n\t\t\treturn insertionIndexStart;\n\t\t}\n\t\tif ( insertionType === 'before' || insertionType === 'replace' ) {\n\t\t\treturn insertionIndexBefore;\n\t\t}\n\t\tif ( insertionType === 'after' ) {\n\t\t\treturn insertionIndexAfter;\n\t\t}\n\t\tif ( insertionType === 'end' ) {\n\t\t\treturn insertionIndexEnd;\n\t\t}\n\t\treturn insertionIndexDefault;\n\t}\n\n\tshouldReplaceBlock( insertionType ) {\n\t\tconst { isSelectedBlockReplaceable } = this.props;\n\t\tif ( insertionType === 'replace' ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( insertionType === 'default' && isSelectedBlockReplaceable ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tonToggle( isOpen ) {\n\t\tconst { onToggle } = this.props;\n\n\t\t// Surface toggle callback to parent component\n\t\tif ( onToggle ) {\n\t\t\tonToggle( isOpen );\n\t\t}\n\t\tthis.onInserterToggledAnnouncement( isOpen );\n\t}\n\n\tonInserterToggledAnnouncement( isOpen ) {\n\t\tAccessibilityInfo.fetch().done( ( isEnabled ) => {\n\t\t\tif ( isEnabled ) {\n\t\t\t\tconst isIOS = Platform.OS === 'ios';\n\t\t\t\tconst announcement = isOpen\n\t\t\t\t\t? __( 'Scrollable block menu opened. Select a block.' )\n\t\t\t\t\t: __( 'Scrollable block menu closed.' );\n\t\t\t\tdelay(\n\t\t\t\t\t() =>\n\t\t\t\t\t\tAccessibilityInfo.announceForAccessibility(\n\t\t\t\t\t\t\tannouncement\n\t\t\t\t\t\t),\n\t\t\t\t\tisIOS ? VOICE_OVER_ANNOUNCEMENT_DELAY : 0\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Render callback to display Dropdown toggle element.\n\t *\n\t * @param {Object}   options\n\t * @param {Function} options.onToggle Callback to invoke when toggle is\n\t *                                    pressed.\n\t * @param {boolean}  options.isOpen   Whether dropdown is currently open.\n\t *\n\t * @return {WPElement} Dropdown toggle element.\n\t */\n\trenderToggle( { onToggle, isOpen } ) {\n\t\tconst {\n\t\t\tdisabled,\n\t\t\trenderToggle = defaultRenderToggle,\n\t\t\tgetStylesFromColorScheme,\n\t\t\tshowSeparator,\n\t\t} = this.props;\n\t\tif ( showSeparator && isOpen ) {\n\t\t\treturn <BlockInsertionPoint />;\n\t\t}\n\t\tconst style = getStylesFromColorScheme(\n\t\t\tstyles.addBlockButton,\n\t\t\tstyles.addBlockButtonDark\n\t\t);\n\n\t\tconst onPress = () => {\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tdestinationRootClientId: this.props.destinationRootClientId,\n\t\t\t\t\tshouldReplaceBlock: this.shouldReplaceBlock( 'default' ),\n\t\t\t\t\tinsertionIndex: this.getInsertionIndex( 'default' ),\n\t\t\t\t},\n\t\t\t\tonToggle\n\t\t\t);\n\t\t};\n\n\t\tconst onLongPress = () => {\n\t\t\tif ( this.picker ) {\n\t\t\t\tthis.picker.presentPicker();\n\t\t\t}\n\t\t};\n\n\t\tconst onPickerSelect = ( insertionType ) => {\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tdestinationRootClientId: this.props.destinationRootClientId,\n\t\t\t\t\tshouldReplaceBlock: this.shouldReplaceBlock(\n\t\t\t\t\t\tinsertionType\n\t\t\t\t\t),\n\t\t\t\t\tinsertionIndex: this.getInsertionIndex( insertionType ),\n\t\t\t\t},\n\t\t\t\tonToggle\n\t\t\t);\n\t\t};\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{ renderToggle( {\n\t\t\t\t\tonToggle: onPress,\n\t\t\t\t\tisOpen,\n\t\t\t\t\tdisabled,\n\t\t\t\t\tstyle,\n\t\t\t\t\tonLongPress,\n\t\t\t\t} ) }\n\t\t\t\t<Picker\n\t\t\t\t\tref={ ( instance ) => ( this.picker = instance ) }\n\t\t\t\t\toptions={ this.getInsertionOptions() }\n\t\t\t\t\tonChange={ onPickerSelect }\n\t\t\t\t\thideCancelButton\n\t\t\t\t/>\n\t\t\t</>\n\t\t);\n\t}\n\n\t/**\n\t * Render callback to display Dropdown content element.\n\t *\n\t * @param {Object}   options\n\t * @param {Function} options.onClose Callback to invoke when dropdown is\n\t *                                   closed.\n\t * @param {boolean}  options.isOpen  Whether dropdown is currently open.\n\t *\n\t * @return {WPElement} Dropdown content element.\n\t */\n\trenderContent( { onClose, isOpen } ) {\n\t\tconst { clientId, isAppender } = this.props;\n\t\tconst {\n\t\t\tdestinationRootClientId,\n\t\t\tshouldReplaceBlock,\n\t\t\tinsertionIndex,\n\t\t} = this.state;\n\t\treturn (\n\t\t\t<InserterMenu\n\t\t\t\tisOpen={ isOpen }\n\t\t\t\tonSelect={ onClose }\n\t\t\t\tonDismiss={ onClose }\n\t\t\t\trootClientId={ destinationRootClientId }\n\t\t\t\tclientId={ clientId }\n\t\t\t\tisAppender={ isAppender }\n\t\t\t\tshouldReplaceBlock={ shouldReplaceBlock }\n\t\t\t\tinsertionIndex={ insertionIndex }\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Dropdown\n\t\t\t\tonToggle={ this.onToggle }\n\t\t\t\theaderTitle={ __( 'Add a block' ) }\n\t\t\t\trenderToggle={ this.renderToggle }\n\t\t\t\trenderContent={ this.renderContent }\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default compose( [\n\twithSelect( ( select, { clientId, isAppender, rootClientId } ) => {\n\t\tconst {\n\t\t\tgetBlockRootClientId,\n\t\t\tgetBlockSelectionEnd,\n\t\t\tgetBlockOrder,\n\t\t\tgetBlockIndex,\n\t\t\tgetBlock,\n\t\t} = select( blockEditorStore );\n\n\t\tconst end = getBlockSelectionEnd();\n\t\t// `end` argument (id) can refer to the component which is removed\n\t\t// due to pressing `undo` button, that's why we need to check\n\t\t// if `getBlock( end) is valid, otherwise `null` is passed\n\t\tconst isAnyBlockSelected = ! isAppender && end && getBlock( end );\n\t\tconst destinationRootClientId = isAnyBlockSelected\n\t\t\t? getBlockRootClientId( end )\n\t\t\t: rootClientId;\n\t\tconst selectedBlockIndex = getBlockIndex(\n\t\t\tend,\n\t\t\tdestinationRootClientId\n\t\t);\n\t\tconst endOfRootIndex = getBlockOrder( rootClientId ).length;\n\t\tconst isSelectedUnmodifiedDefaultBlock = isAnyBlockSelected\n\t\t\t? isUnmodifiedDefaultBlock( getBlock( end ) )\n\t\t\t: undefined;\n\n\t\tfunction getDefaultInsertionIndex() {\n\t\t\tconst { getSettings } = select( blockEditorStore );\n\n\t\t\tconst {\n\t\t\t\t__experimentalShouldInsertAtTheTop: shouldInsertAtTheTop,\n\t\t\t} = getSettings();\n\n\t\t\t// if post title is selected insert as first block\n\t\t\tif ( shouldInsertAtTheTop ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t// If the clientId is defined, we insert at the position of the block.\n\t\t\tif ( clientId ) {\n\t\t\t\treturn getBlockIndex( clientId, rootClientId );\n\t\t\t}\n\n\t\t\t// If there is a selected block,\n\t\t\tif ( isAnyBlockSelected ) {\n\t\t\t\t// and the last selected block is unmodified (empty), it will be replaced\n\t\t\t\tif ( isSelectedUnmodifiedDefaultBlock ) {\n\t\t\t\t\treturn selectedBlockIndex;\n\t\t\t\t}\n\n\t\t\t\t// we insert after the selected block.\n\t\t\t\treturn selectedBlockIndex + 1;\n\t\t\t}\n\n\t\t\t// Otherwise, we insert at the end of the current rootClientId\n\t\t\treturn endOfRootIndex;\n\t\t}\n\n\t\tconst insertionIndexStart = 0;\n\n\t\tconst insertionIndexBefore = isAnyBlockSelected\n\t\t\t? selectedBlockIndex\n\t\t\t: insertionIndexStart;\n\n\t\tconst insertionIndexAfter = isAnyBlockSelected\n\t\t\t? selectedBlockIndex + 1\n\t\t\t: endOfRootIndex;\n\n\t\tconst insertionIndexEnd = endOfRootIndex;\n\n\t\treturn {\n\t\t\tdestinationRootClientId,\n\t\t\tinsertionIndexDefault: getDefaultInsertionIndex(),\n\t\t\tinsertionIndexBefore,\n\t\t\tinsertionIndexAfter,\n\t\t\tinsertionIndexStart,\n\t\t\tinsertionIndexEnd,\n\t\t\tisAnyBlockSelected: !! isAnyBlockSelected,\n\t\t\tisSelectedBlockReplaceable: isSelectedUnmodifiedDefaultBlock,\n\t\t};\n\t} ),\n\n\twithPreferredColorScheme,\n] )( Inserter );\n"]}