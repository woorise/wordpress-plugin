"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _data = require("@wordpress/data");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _searchResults = _interopRequireDefault(require("./search-results"));

var _searchForm = _interopRequireDefault(require("./search-form"));

var _store = require("../../store");

var _searchItems = require("./search-items");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var MIN_ITEMS_FOR_SEARCH = 2;

function InserterMenu(_ref) {
  var _onSelect = _ref.onSelect,
      onDismiss = _ref.onDismiss,
      rootClientId = _ref.rootClientId,
      clientId = _ref.clientId,
      isAppender = _ref.isAppender,
      shouldReplaceBlock = _ref.shouldReplaceBlock,
      insertionIndex = _ref.insertionIndex;

  var _useState = (0, _element.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      filterValue = _useState2[0],
      setFilterValue = _useState2[1];

  var _useState3 = (0, _element.useState)(0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      searchFormHeight = _useState4[0],
      setSearchFormHeight = _useState4[1]; // eslint-disable-next-line no-undef


  var _useState5 = (0, _element.useState)(__DEV__),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      showSearchForm = _useState6[0],
      setShowSearchForm = _useState6[1];

  var _useDispatch = (0, _data.useDispatch)(_store.store),
      showInsertionPoint = _useDispatch.showInsertionPoint,
      hideInsertionPoint = _useDispatch.hideInsertionPoint,
      clearSelectedBlock = _useDispatch.clearSelectedBlock,
      insertBlock = _useDispatch.insertBlock,
      removeBlock = _useDispatch.removeBlock,
      resetBlocks = _useDispatch.resetBlocks,
      insertDefaultBlock = _useDispatch.insertDefaultBlock;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select(_store.store),
        getInserterItems = _select.getInserterItems,
        getBlockRootClientId = _select.getBlockRootClientId,
        getBlockSelectionEnd = _select.getBlockSelectionEnd,
        selectBlockEditorStore = (0, _objectWithoutProperties2.default)(_select, ["getInserterItems", "getBlockRootClientId", "getBlockSelectionEnd"]);

    var targetRootClientId = rootClientId;

    if (!targetRootClientId && !clientId && !isAppender) {
      var end = getBlockSelectionEnd();

      if (end) {
        targetRootClientId = getBlockRootClientId(end) || undefined;
      }
    }

    return {
      items: getInserterItems(targetRootClientId),
      destinationRootClientId: targetRootClientId,
      getBlockOrder: selectBlockEditorStore.getBlockOrder,
      getBlockCount: selectBlockEditorStore.getBlockCount,
      canInsertBlockType: selectBlockEditorStore.canInsertBlockType
    };
  }),
      items = _useSelect.items,
      destinationRootClientId = _useSelect.destinationRootClientId,
      getBlockOrder = _useSelect.getBlockOrder,
      getBlockCount = _useSelect.getBlockCount,
      canInsertBlockType = _useSelect.canInsertBlockType;

  var _useSelect2 = (0, _data.useSelect)(function (select) {
    return select(_blocks.store);
  }),
      getBlockType = _useSelect2.getBlockType;

  (0, _element.useEffect)(function () {
    var _getItems;

    // Show/Hide insertion point on Mount/Dismount
    if (shouldReplaceBlock) {
      var count = getBlockCount(); // Check if there is a rootClientId because that means it is a nested replaceable block
      // and we don't want to clear/reset all blocks.

      if (count === 1 && !rootClientId) {
        // Removing the last block is not possilble with `removeBlock` action.
        // It always inserts a default block if the last of the blocks have been removed.
        clearSelectedBlock();
        resetBlocks([]);
      } else {
        var blockToReplace = getBlockOrder(destinationRootClientId)[insertionIndex];
        removeBlock(blockToReplace, false);
      }
    }

    showInsertionPoint(destinationRootClientId, insertionIndex); // Show search form if there are enough items to filter.

    if (((_getItems = getItems()) === null || _getItems === void 0 ? void 0 : _getItems.length) < MIN_ITEMS_FOR_SEARCH) {
      setShowSearchForm(false);
    }

    return hideInsertionPoint;
  }, []);
  var onClose = (0, _element.useCallback)(function () {
    // if should replace but didn't insert any block
    // re-insert default block
    if (shouldReplaceBlock) {
      insertDefaultBlock({}, destinationRootClientId, insertionIndex);
    }

    onDismiss();
  }, [shouldReplaceBlock, destinationRootClientId, insertionIndex]);
  var onInsert = (0, _element.useCallback)(function (item) {
    var name = item.name,
        initialAttributes = item.initialAttributes,
        innerBlocks = item.innerBlocks;
    var newBlock = (0, _blocks.createBlock)(name, initialAttributes, innerBlocks);
    insertBlock(newBlock, insertionIndex, destinationRootClientId);
  }, [insertBlock, destinationRootClientId, insertionIndex]);
  /**
   * Processes the inserter items to check
   * if there's any copied block in the clipboard
   * to add it as an extra item
   */

  function getItems() {
    var _clipboardBlock;

    // Filter out reusable blocks (they will be added in another tab)
    var itemsToDisplay = items.filter(function (_ref2) {
      var name = _ref2.name;
      return name !== 'core/block';
    });
    itemsToDisplay = (0, _searchItems.searchItems)(itemsToDisplay, filterValue);
    var clipboard = (0, _components.getClipboard)();
    var clipboardBlock = (0, _blocks.rawHandler)({
      HTML: clipboard
    })[0];
    var canAddClipboardBlock = canInsertBlockType((_clipboardBlock = clipboardBlock) === null || _clipboardBlock === void 0 ? void 0 : _clipboardBlock.name, destinationRootClientId);

    if (!canAddClipboardBlock) {
      return itemsToDisplay;
    }

    var _getBlockType = getBlockType(clipboardBlock.name),
        icon = _getBlockType.icon,
        name = _getBlockType.name;

    var _clipboardBlock2 = clipboardBlock,
        initialAttributes = _clipboardBlock2.attributes,
        innerBlocks = _clipboardBlock2.innerBlocks;
    clipboardBlock = {
      id: 'clipboard',
      name: name,
      icon: icon,
      initialAttributes: initialAttributes,
      innerBlocks: innerBlocks
    };
    return [clipboardBlock].concat((0, _toConsumableArray2.default)(itemsToDisplay));
  }

  return (0, _element.createElement)(_components.BottomSheet, {
    isVisible: true,
    onClose: onClose,
    hideHeader: true,
    hasNavigation: true,
    setMinHeightToMaxHeight: showSearchForm
  }, (0, _element.createElement)(_components.BottomSheetConsumer, null, function (_ref3) {
    var listProps = _ref3.listProps,
        safeAreaBottomInset = _ref3.safeAreaBottomInset;
    return (0, _element.createElement)(_reactNative.View, null, showSearchForm && (0, _element.createElement)(_searchForm.default, {
      onChange: function onChange(value) {
        setFilterValue(value);
      },
      value: filterValue,
      onLayout: function onLayout(event) {
        var height = event.nativeEvent.layout.height;
        setSearchFormHeight(height);
      }
    }), (0, _element.createElement)(_searchResults.default, {
      items: getItems(),
      onSelect: function onSelect(item) {
        onInsert(item);

        _onSelect(item);
      },
      listProps: listProps,
      safeAreaBottomInset: safeAreaBottomInset,
      searchFormHeight: searchFormHeight
    }));
  }));
}

var _default = InserterMenu;
exports.default = _default;
//# sourceMappingURL=menu.native.js.map