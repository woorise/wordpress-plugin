"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _a11y = require("@wordpress/a11y");

var _blockTypesList = _interopRequireDefault(require("../block-types-list"));

var _blockPatternsList = _interopRequireDefault(require("../block-patterns-list"));

var _inserterMenuExtension = _interopRequireDefault(require("../inserter-menu-extension"));

var _panel = _interopRequireDefault(require("./panel"));

var _noResults = _interopRequireDefault(require("./no-results"));

var _useInsertionPoint3 = _interopRequireDefault(require("./hooks/use-insertion-point"));

var _usePatternsState3 = _interopRequireDefault(require("./hooks/use-patterns-state"));

var _useBlockTypesState3 = _interopRequireDefault(require("./hooks/use-block-types-state"));

var _searchItems = require("./search-items");

var _inserterListbox = _interopRequireDefault(require("../inserter-listbox"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function InserterSearchResults(_ref) {
  var filterValue = _ref.filterValue,
      onSelect = _ref.onSelect,
      onHover = _ref.onHover,
      rootClientId = _ref.rootClientId,
      clientId = _ref.clientId,
      isAppender = _ref.isAppender,
      maxBlockPatterns = _ref.maxBlockPatterns,
      maxBlockTypes = _ref.maxBlockTypes,
      _ref$showBlockDirecto = _ref.showBlockDirectory,
      showBlockDirectory = _ref$showBlockDirecto === void 0 ? false : _ref$showBlockDirecto,
      _ref$isDraggable = _ref.isDraggable,
      isDraggable = _ref$isDraggable === void 0 ? true : _ref$isDraggable,
      _ref$shouldFocusBlock = _ref.shouldFocusBlock,
      shouldFocusBlock = _ref$shouldFocusBlock === void 0 ? true : _ref$shouldFocusBlock;
  var debouncedSpeak = (0, _compose.useDebounce)(_a11y.speak, 500);

  var _useInsertionPoint = (0, _useInsertionPoint3.default)({
    onSelect: onSelect,
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender,
    shouldFocusBlock: shouldFocusBlock
  }),
      _useInsertionPoint2 = (0, _slicedToArray2.default)(_useInsertionPoint, 2),
      destinationRootClientId = _useInsertionPoint2[0],
      onInsertBlocks = _useInsertionPoint2[1];

  var _useBlockTypesState = (0, _useBlockTypesState3.default)(destinationRootClientId, onInsertBlocks),
      _useBlockTypesState2 = (0, _slicedToArray2.default)(_useBlockTypesState, 4),
      blockTypes = _useBlockTypesState2[0],
      blockTypeCategories = _useBlockTypesState2[1],
      blockTypeCollections = _useBlockTypesState2[2],
      onSelectBlockType = _useBlockTypesState2[3];

  var _usePatternsState = (0, _usePatternsState3.default)(onInsertBlocks, destinationRootClientId),
      _usePatternsState2 = (0, _slicedToArray2.default)(_usePatternsState, 3),
      patterns = _usePatternsState2[0],
      onSelectBlockPattern = _usePatternsState2[2];

  var filteredBlockTypes = (0, _element.useMemo)(function () {
    var results = (0, _searchItems.searchBlockItems)((0, _lodash.orderBy)(blockTypes, ['frecency'], ['desc']), blockTypeCategories, blockTypeCollections, filterValue);
    return maxBlockTypes !== undefined ? results.slice(0, maxBlockTypes) : results;
  }, [filterValue, blockTypes, blockTypeCategories, blockTypeCollections, maxBlockTypes]);
  var filteredBlockPatterns = (0, _element.useMemo)(function () {
    var results = (0, _searchItems.searchItems)(patterns, filterValue);
    return maxBlockPatterns !== undefined ? results.slice(0, maxBlockPatterns) : results;
  }, [filterValue, patterns, maxBlockPatterns]); // Announce search results on change

  (0, _element.useEffect)(function () {
    if (!filterValue) {
      return;
    }

    var count = filteredBlockTypes.length + filteredBlockPatterns.length;
    var resultsFoundMessage = (0, _i18n.sprintf)(
    /* translators: %d: number of results. */
    (0, _i18n._n)('%d result found.', '%d results found.', count), count);
    debouncedSpeak(resultsFoundMessage);
  }, [filterValue, debouncedSpeak]);
  var currentShownPatterns = (0, _compose.useAsyncList)(filteredBlockPatterns);
  var hasItems = !(0, _lodash.isEmpty)(filteredBlockTypes) || !(0, _lodash.isEmpty)(filteredBlockPatterns);
  return (0, _element.createElement)(_inserterListbox.default, null, !showBlockDirectory && !hasItems && (0, _element.createElement)(_noResults.default, null), !!filteredBlockTypes.length && (0, _element.createElement)(_panel.default, {
    title: (0, _element.createElement)(_components.VisuallyHidden, null, (0, _i18n.__)('Blocks'))
  }, (0, _element.createElement)(_blockTypesList.default, {
    items: filteredBlockTypes,
    onSelect: onSelectBlockType,
    onHover: onHover,
    label: (0, _i18n.__)('Blocks'),
    isDraggable: isDraggable
  })), !!filteredBlockTypes.length && !!filteredBlockPatterns.length && (0, _element.createElement)("div", {
    className: "block-editor-inserter__quick-inserter-separator"
  }), !!filteredBlockPatterns.length && (0, _element.createElement)(_panel.default, {
    title: (0, _element.createElement)(_components.VisuallyHidden, null, (0, _i18n.__)('Block Patterns'))
  }, (0, _element.createElement)("div", {
    className: "block-editor-inserter__quick-inserter-patterns"
  }, (0, _element.createElement)(_blockPatternsList.default, {
    shownPatterns: currentShownPatterns,
    blockPatterns: filteredBlockPatterns,
    onClickPattern: onSelectBlockPattern,
    isDraggable: isDraggable
  }))), showBlockDirectory && (0, _element.createElement)(_inserterMenuExtension.default.Slot, {
    fillProps: {
      onSelect: onSelectBlockType,
      onHover: onHover,
      filterValue: filterValue,
      hasItems: hasItems,
      rootClientId: destinationRootClientId
    }
  }, function (fills) {
    if (fills.length) {
      return fills;
    }

    if (!hasItems) {
      return (0, _element.createElement)(_noResults.default, null);
    }

    return null;
  }));
}

var _default = InserterSearchResults;
exports.default = _default;
//# sourceMappingURL=search-results.js.map