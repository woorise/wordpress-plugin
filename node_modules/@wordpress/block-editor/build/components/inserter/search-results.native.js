"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _components = require("@wordpress/components");

var _style = _interopRequireDefault(require("./style.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var MIN_COL_NUM = 3;

function InserterSearchResults(_ref) {
  var items = _ref.items,
      onSelect = _ref.onSelect,
      listProps = _ref.listProps,
      safeAreaBottomInset = _ref.safeAreaBottomInset,
      _ref$searchFormHeight = _ref.searchFormHeight,
      searchFormHeight = _ref$searchFormHeight === void 0 ? 0 : _ref$searchFormHeight;

  var _useState = (0, _element.useState)(MIN_COL_NUM),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      numberOfColumns = _useState2[0],
      setNumberOfColumns = _useState2[1];

  var _useState3 = (0, _element.useState)(),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      itemWidth = _useState4[0],
      setItemWidth = _useState4[1];

  var _useState5 = (0, _element.useState)(),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      maxWidth = _useState6[0],
      setMaxWidth = _useState6[1];

  (0, _element.useEffect)(function () {
    _reactNative.Dimensions.addEventListener('change', onLayout);

    return function () {
      _reactNative.Dimensions.removeEventListener('change', onLayout);
    };
  }, []);

  function calculateItemWidth() {
    var _InserterButton$Style = _components.InserterButton.Styles.modalItem,
        itemPaddingLeft = _InserterButton$Style.paddingLeft,
        itemPaddingRight = _InserterButton$Style.paddingRight;
    var width = _components.InserterButton.Styles.modalIconWrapper.width;
    return width + itemPaddingLeft + itemPaddingRight;
  }

  function onLayout() {
    var sumLeftRightPadding = _style.default.columnPadding.paddingLeft + _style.default.columnPadding.paddingRight;

    var bottomSheetWidth = _components.BottomSheet.getWidth();

    var containerTotalWidth = bottomSheetWidth - sumLeftRightPadding;
    var itemTotalWidth = calculateItemWidth();
    var columnsFitToWidth = Math.floor(containerTotalWidth / itemTotalWidth);
    var numColumns = Math.max(MIN_COL_NUM, columnsFitToWidth);
    setNumberOfColumns(numColumns);
    setMaxWidth(containerTotalWidth / numColumns);

    if (columnsFitToWidth < MIN_COL_NUM) {
      var updatedItemWidth = (bottomSheetWidth - 2 * sumLeftRightPadding) / MIN_COL_NUM;
      setItemWidth(updatedItemWidth);
    }
  }

  return (0, _element.createElement)(_reactNative.TouchableHighlight, {
    accessible: false
  }, (0, _element.createElement)(_reactNative.FlatList, (0, _extends2.default)({
    onLayout: onLayout,
    key: "InserterUI-".concat(numberOfColumns) //re-render when numberOfColumns changes
    ,
    keyboardShouldPersistTaps: "always",
    numColumns: numberOfColumns,
    data: items,
    initialNumToRender: 3,
    ItemSeparatorComponent: function ItemSeparatorComponent() {
      return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
        accessible: false
      }, (0, _element.createElement)(_reactNative.View, {
        style: _style.default.rowSeparator
      }));
    },
    keyExtractor: function keyExtractor(item) {
      return item.name;
    },
    renderItem: function renderItem(_ref2) {
      var item = _ref2.item;
      return (0, _element.createElement)(_components.InserterButton, {
        item: item,
        itemWidth: itemWidth,
        maxWidth: maxWidth,
        onSelect: onSelect
      });
    }
  }, listProps, {
    contentContainerStyle: [].concat((0, _toConsumableArray2.default)(listProps.contentContainerStyle), [{
      paddingBottom: (safeAreaBottomInset || _style.default.list.paddingBottom) + searchFormHeight
    }])
  })));
}

var _default = InserterSearchResults;
exports.default = _default;
//# sourceMappingURL=search-results.native.js.map