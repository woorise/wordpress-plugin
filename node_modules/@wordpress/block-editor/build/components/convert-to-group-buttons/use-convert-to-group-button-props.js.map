{"version":3,"sources":["@wordpress/block-editor/src/components/convert-to-group-buttons/use-convert-to-group-button-props.js"],"names":["useConvertToGroupButtonProps","select","blockEditorStore","getBlockRootClientId","getBlocksByClientId","canInsertBlockType","getSelectedBlockClientIds","blocksStore","getGroupingBlockName","_clientIds","_groupingBlockName","rootClientId","length","undefined","groupingBlockAvailable","_blocksSelection","isSingleGroupingBlock","name","_isGroupable","_isUngroupable","innerBlocks","clientIds","isGroupable","isUngroupable","blocksSelection","groupingBlockName"],"mappings":";;;;;;;AAGA;;AACA;;AAKA;;AATA;AACA;AACA;;AAIA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,4BAAT,GAAwC;AAAA,mBAOlD,qBAAW,UAAEC,MAAF,EAAc;AAAA;;AAAA,kBAMxBA,MAAM,CAAEC,YAAF,CANkB;AAAA,QAE3BC,oBAF2B,WAE3BA,oBAF2B;AAAA,QAG3BC,mBAH2B,WAG3BA,mBAH2B;AAAA,QAI3BC,kBAJ2B,WAI3BA,kBAJ2B;AAAA,QAK3BC,yBAL2B,WAK3BA,yBAL2B;;AAAA,mBAOKL,MAAM,CAAEM,aAAF,CAPX;AAAA,QAOpBC,oBAPoB,YAOpBA,oBAPoB;;AAS5B,QAAMC,UAAU,GAAGH,yBAAyB,EAA5C;;AACA,QAAMI,kBAAkB,GAAGF,oBAAoB,EAA/C;;AAEA,QAAMG,YAAY,GAAG,CAAC,EAAEF,UAAF,aAAEA,UAAF,eAAEA,UAAU,CAAEG,MAAd,CAAD,GAClBT,oBAAoB,CAAEM,UAAU,CAAE,CAAF,CAAZ,CADF,GAElBI,SAFH;AAIA,QAAMC,sBAAsB,GAAGT,kBAAkB,CAChDK,kBADgD,EAEhDC,YAFgD,CAAjD;;AAKA,QAAMI,gBAAgB,GAAGX,mBAAmB,CAAEK,UAAF,CAA5C;;AAEA,QAAMO,qBAAqB,GAC1BD,gBAAgB,CAACH,MAAjB,KAA4B,CAA5B,IACA,sBAAAG,gBAAgB,CAAE,CAAF,CAAhB,wEAAuBE,IAAvB,MAAgCP,kBAFjC,CAvB4B,CA2B5B;AACA;AACA;AACA;AACA;;AACA,QAAMQ,YAAY,GACjBJ,sBAAsB,IACtBC,gBAAgB,CAACH,MADjB,IAEA,CAAEI,qBAHH,CAhC4B,CAqC5B;;;AACA,QAAMG,cAAc,GACnBH,qBAAqB,IACrB,CAAC,CAAED,gBAAgB,CAAE,CAAF,CAAhB,CAAsBK,WAAtB,CAAkCR,MAFtC;;AAGA,WAAO;AACNS,MAAAA,SAAS,EAAEZ,UADL;AAENa,MAAAA,WAAW,EAAEJ,YAFP;AAGNK,MAAAA,aAAa,EAAEJ,cAHT;AAINK,MAAAA,eAAe,EAAET,gBAJX;AAKNU,MAAAA,iBAAiB,EAAEf;AALb,KAAP;AAOA,GAhDG,EAgDD,EAhDC,CAPkD;AAAA,MAErDW,SAFqD,cAErDA,SAFqD;AAAA,MAGrDC,WAHqD,cAGrDA,WAHqD;AAAA,MAIrDC,aAJqD,cAIrDA,aAJqD;AAAA,MAKrDC,eALqD,cAKrDA,eALqD;AAAA,MAMrDC,iBANqD,cAMrDA,iBANqD;;AAwDtD,SAAO;AACNJ,IAAAA,SAAS,EAATA,SADM;AAENC,IAAAA,WAAW,EAAXA,WAFM;AAGNC,IAAAA,aAAa,EAAbA,aAHM;AAINC,IAAAA,eAAe,EAAfA,eAJM;AAKNC,IAAAA,iBAAiB,EAAjBA;AALM,GAAP;AAOA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n/**\n * Contains the properties `ConvertToGroupButton` component needs.\n *\n * @typedef {Object} ConvertToGroupButtonProps\n * @property {string[]} clientIds  An array of the selected client ids.\n * @property {boolean} isGroupable Indicates if the selected blocks can be grouped.\n * @property {boolean} isUngroupable Indicates if the selected blocks can be ungrouped.\n * @property {WPBlock[]} blocksSelection An array of the selected blocks.\n * @property {string} groupingBlockName The name of block used for handling grouping interactions.\n */\n\n/**\n * Returns the properties `ConvertToGroupButton` component needs to work properly.\n * It is used in `BlockSettingsMenuControls` to know if `ConvertToGroupButton`\n * should be rendered, to avoid ending up with an empty MenuGroup.\n *\n * @return {ConvertToGroupButtonProps} Returns the properties needed by `ConvertToGroupButton`.\n */\nexport default function useConvertToGroupButtonProps() {\n\tconst {\n\t\tclientIds,\n\t\tisGroupable,\n\t\tisUngroupable,\n\t\tblocksSelection,\n\t\tgroupingBlockName,\n\t} = useSelect( ( select ) => {\n\t\tconst {\n\t\t\tgetBlockRootClientId,\n\t\t\tgetBlocksByClientId,\n\t\t\tcanInsertBlockType,\n\t\t\tgetSelectedBlockClientIds,\n\t\t} = select( blockEditorStore );\n\t\tconst { getGroupingBlockName } = select( blocksStore );\n\n\t\tconst _clientIds = getSelectedBlockClientIds();\n\t\tconst _groupingBlockName = getGroupingBlockName();\n\n\t\tconst rootClientId = !! _clientIds?.length\n\t\t\t? getBlockRootClientId( _clientIds[ 0 ] )\n\t\t\t: undefined;\n\n\t\tconst groupingBlockAvailable = canInsertBlockType(\n\t\t\t_groupingBlockName,\n\t\t\trootClientId\n\t\t);\n\n\t\tconst _blocksSelection = getBlocksByClientId( _clientIds );\n\n\t\tconst isSingleGroupingBlock =\n\t\t\t_blocksSelection.length === 1 &&\n\t\t\t_blocksSelection[ 0 ]?.name === _groupingBlockName;\n\n\t\t// Do we have\n\t\t// 1. Grouping block available to be inserted?\n\t\t// 2. One or more blocks selected\n\t\t// (we allow single Blocks to become groups unless\n\t\t// they are a soltiary group block themselves)\n\t\tconst _isGroupable =\n\t\t\tgroupingBlockAvailable &&\n\t\t\t_blocksSelection.length &&\n\t\t\t! isSingleGroupingBlock;\n\n\t\t// Do we have a single Group Block selected and does that group have inner blocks?\n\t\tconst _isUngroupable =\n\t\t\tisSingleGroupingBlock &&\n\t\t\t!! _blocksSelection[ 0 ].innerBlocks.length;\n\t\treturn {\n\t\t\tclientIds: _clientIds,\n\t\t\tisGroupable: _isGroupable,\n\t\t\tisUngroupable: _isUngroupable,\n\t\t\tblocksSelection: _blocksSelection,\n\t\t\tgroupingBlockName: _groupingBlockName,\n\t\t};\n\t}, [] );\n\treturn {\n\t\tclientIds,\n\t\tisGroupable,\n\t\tisUngroupable,\n\t\tblocksSelection,\n\t\tgroupingBlockName,\n\t};\n}\n"]}