"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConvertToGroupButton = ConvertToGroupButton;
Object.defineProperty(exports, "useConvertToGroupButtonProps", {
  enumerable: true,
  get: function get() {
    return _useConvertToGroupButtonProps.default;
  }
});

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _store = require("../../store");

var _useConvertToGroupButtonProps = _interopRequireDefault(require("./use-convert-to-group-button-props"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ConvertToGroupButton(_ref) {
  var clientIds = _ref.clientIds,
      isGroupable = _ref.isGroupable,
      isUngroupable = _ref.isUngroupable,
      blocksSelection = _ref.blocksSelection,
      groupingBlockName = _ref.groupingBlockName,
      _ref$onClose = _ref.onClose,
      onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose;

  var _useDispatch = (0, _data.useDispatch)(_store.store),
      replaceBlocks = _useDispatch.replaceBlocks;

  var onConvertToGroup = function onConvertToGroup() {
    // Activate the `transform` on the Grouping Block which does the conversion
    var newBlocks = (0, _blocks.switchToBlockType)(blocksSelection, groupingBlockName);

    if (newBlocks) {
      replaceBlocks(clientIds, newBlocks);
    }
  };

  var onConvertFromGroup = function onConvertFromGroup() {
    var innerBlocks = blocksSelection[0].innerBlocks;

    if (!innerBlocks.length) {
      return;
    }

    replaceBlocks(clientIds, innerBlocks);
  };

  if (!isGroupable && !isUngroupable) {
    return null;
  }

  return (0, _element.createElement)(_element.Fragment, null, isGroupable && (0, _element.createElement)(_components.MenuItem, {
    onClick: function onClick() {
      onConvertToGroup();
      onClose();
    }
  }, (0, _i18n._x)('Group', 'verb')), isUngroupable && (0, _element.createElement)(_components.MenuItem, {
    onClick: function onClick() {
      onConvertFromGroup();
      onClose();
    }
  }, (0, _i18n._x)('Ungroup', 'Ungrouping blocks from within a Group block back into individual blocks within the Editor ')));
}
//# sourceMappingURL=index.js.map