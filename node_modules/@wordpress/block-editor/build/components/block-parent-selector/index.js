"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockParentSelector;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _blockIcon = _interopRequireDefault(require("../block-icon"));

var _utils = require("../block-toolbar/utils");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Block parent selector component, displaying the hierarchy of the
 * current block selection as a single icon to "go up" a level.
 *
 * @return {WPComponent} Parent block selector.
 */
function BlockParentSelector() {
  var _useDispatch = (0, _data.useDispatch)(_store.store),
      selectBlock = _useDispatch.selectBlock,
      toggleBlockHighlight = _useDispatch.toggleBlockHighlight;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select(_store.store),
        getBlockName = _select.getBlockName,
        getBlockParents = _select.getBlockParents,
        getSelectedBlockClientId = _select.getSelectedBlockClientId,
        getSettings = _select.getSettings;

    var _select2 = select(_blocks.store),
        hasBlockSupport = _select2.hasBlockSupport;

    var selectedBlockClientId = getSelectedBlockClientId();
    var parents = getBlockParents(selectedBlockClientId);
    var _firstParentClientId = parents[parents.length - 1];
    var parentBlockName = getBlockName(_firstParentClientId);

    var _parentBlockType = (0, _blocks.getBlockType)(parentBlockName);

    var settings = getSettings();
    return {
      parentBlockType: _parentBlockType,
      firstParentClientId: _firstParentClientId,
      shouldHide: !hasBlockSupport(_parentBlockType, '__experimentalParentSelector', true),
      hasReducedUI: settings.hasReducedUI
    };
  }, []),
      parentBlockType = _useSelect.parentBlockType,
      firstParentClientId = _useSelect.firstParentClientId,
      shouldHide = _useSelect.shouldHide,
      hasReducedUI = _useSelect.hasReducedUI; // Allows highlighting the parent block outline when focusing or hovering
  // the parent block selector within the child.


  var nodeRef = (0, _element.useRef)();

  var _useShowMoversGesture = (0, _utils.useShowMoversGestures)({
    ref: nodeRef,
    onChange: function onChange(isFocused) {
      if (isFocused && hasReducedUI) {
        return;
      }

      toggleBlockHighlight(firstParentClientId, isFocused);
    }
  }),
      showMoversGestures = _useShowMoversGesture.gestures;

  if (shouldHide) {
    return null;
  }

  if (firstParentClientId !== undefined) {
    return (0, _element.createElement)("div", (0, _extends2.default)({
      className: "block-editor-block-parent-selector",
      key: firstParentClientId,
      ref: nodeRef
    }, showMoversGestures), (0, _element.createElement)(_components.ToolbarButton, {
      className: "block-editor-block-parent-selector__button",
      onClick: function onClick() {
        return selectBlock(firstParentClientId);
      },
      label: (0, _i18n.sprintf)(
      /* translators: %s: Name of the block's parent. */
      (0, _i18n.__)('Select %s'), parentBlockType.title),
      showTooltip: true,
      icon: (0, _element.createElement)(_blockIcon.default, {
        icon: parentBlockType.icon
      })
    }));
  }

  return null;
}
//# sourceMappingURL=index.js.map