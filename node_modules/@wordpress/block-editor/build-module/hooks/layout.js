import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement, Fragment } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import classnames from 'classnames';
import { has } from 'lodash';
/**
 * WordPress dependencies
 */

import { Platform } from '@wordpress/element';
import { createHigherOrderComponent, useInstanceId } from '@wordpress/compose';
import { addFilter } from '@wordpress/hooks';
import { hasBlockSupport } from '@wordpress/blocks';
import { useSelect } from '@wordpress/data';
import { ToggleControl, PanelBody, __experimentalUnitControl as UnitControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { Icon, positionCenter, stretchWide } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../store';
import { InspectorControls } from '../components';
import useEditorFeature from '../components/use-editor-feature';
import { LayoutStyle } from '../components/block-list/layout';
var isWeb = Platform.OS === 'web';
var CSS_UNITS = [{
  value: '%',
  label: isWeb ? '%' : __('Percentage (%)'),
  default: ''
}, {
  value: 'px',
  label: isWeb ? 'px' : __('Pixels (px)'),
  default: ''
}, {
  value: 'em',
  label: isWeb ? 'em' : __('Relative to parent font size (em)'),
  default: ''
}, {
  value: 'rem',
  label: isWeb ? 'rem' : __('Relative to root font size (rem)'),
  default: ''
}, {
  value: 'vw',
  label: isWeb ? 'vw' : __('Viewport width (vw)'),
  default: ''
}];

function LayoutPanel(_ref) {
  var setAttributes = _ref.setAttributes,
      attributes = _ref.attributes;
  var _attributes$layout = attributes.layout,
      layout = _attributes$layout === void 0 ? {} : _attributes$layout;
  var wideSize = layout.wideSize,
      contentSize = layout.contentSize,
      _layout$inherit = layout.inherit,
      inherit = _layout$inherit === void 0 ? false : _layout$inherit;
  var defaultLayout = useEditorFeature('layout');
  var themeSupportsLayout = useSelect(function (select) {
    var _select = select(blockEditorStore),
        getSettings = _select.getSettings;

    return getSettings().supportsLayout;
  }, []);

  if (!themeSupportsLayout) {
    return null;
  }

  return createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Layout')
  }, !!defaultLayout && createElement(ToggleControl, {
    label: __('Inherit default layout'),
    checked: !!inherit,
    onChange: function onChange() {
      return setAttributes({
        layout: {
          inherit: !inherit
        }
      });
    }
  }), !inherit && createElement("div", {
    className: "block-editor-hooks__layout-controls"
  }, createElement("div", {
    className: "block-editor-hooks__layout-controls-unit"
  }, createElement(UnitControl, {
    label: __('Content'),
    labelPosition: "top",
    __unstableInputWidth: "80px",
    value: contentSize || wideSize || '',
    onChange: function onChange(nextWidth) {
      nextWidth = 0 > parseFloat(nextWidth) ? '0' : nextWidth;
      setAttributes({
        layout: _objectSpread(_objectSpread({}, layout), {}, {
          contentSize: nextWidth
        })
      });
    },
    units: CSS_UNITS
  }), createElement(Icon, {
    icon: positionCenter
  })), createElement("div", {
    className: "block-editor-hooks__layout-controls-unit"
  }, createElement(UnitControl, {
    label: __('Wide'),
    labelPosition: "top",
    __unstableInputWidth: "80px",
    value: wideSize || contentSize || '',
    onChange: function onChange(nextWidth) {
      nextWidth = 0 > parseFloat(nextWidth) ? '0' : nextWidth;
      setAttributes({
        layout: _objectSpread(_objectSpread({}, layout), {}, {
          wideSize: nextWidth
        })
      });
    },
    units: CSS_UNITS
  }), createElement(Icon, {
    icon: stretchWide
  }))), createElement("p", {
    className: "block-editor-hooks__layout-controls-helptext"
  }, __('Customize the width for all elements that are assigned to the center or wide columns.'))));
}
/**
 * Filters registered block settings, extending attributes to include `layout`.
 *
 * @param  {Object} settings Original block settings
 * @return {Object}          Filtered block settings
 */


export function addAttribute(settings) {
  if (has(settings.attributes, ['layout', 'type'])) {
    return settings;
  }

  if (hasBlockSupport(settings, '__experimentalLayout')) {
    settings.attributes = _objectSpread(_objectSpread({}, settings.attributes), {}, {
      layout: {
        type: 'object'
      }
    });
  }

  return settings;
}
/**
 * Override the default edit UI to include layout controls
 *
 * @param  {Function} BlockEdit Original component
 * @return {Function}           Wrapped component
 */

export var withInspectorControls = createHigherOrderComponent(function (BlockEdit) {
  return function (props) {
    var blockName = props.name;
    var supportLayout = hasBlockSupport(blockName, '__experimentalLayout');
    return [supportLayout && createElement(LayoutPanel, _extends({
      key: "layout"
    }, props)), createElement(BlockEdit, _extends({
      key: "edit"
    }, props))];
  };
}, 'withInspectorControls');
/**
 * Override the default block element to add the layout styles.
 *
 * @param  {Function} BlockListBlock Original component
 * @return {Function}                Wrapped component
 */

export var withLayoutStyles = createHigherOrderComponent(function (BlockListBlock) {
  return function (props) {
    var name = props.name,
        attributes = props.attributes;
    var supportLayout = hasBlockSupport(name, '__experimentalLayout');
    var id = useInstanceId(BlockListBlock);
    var defaultLayout = useEditorFeature('layout') || {};

    if (!supportLayout) {
      return createElement(BlockListBlock, props);
    }

    var _attributes$layout2 = attributes.layout,
        layout = _attributes$layout2 === void 0 ? {} : _attributes$layout2;
    var usedLayout = !!layout && layout.inherit ? defaultLayout : layout;
    var className = classnames(props === null || props === void 0 ? void 0 : props.className, "wp-container-".concat(id));
    return createElement(Fragment, null, createElement(LayoutStyle, {
      selector: ".wp-container-".concat(id),
      layout: usedLayout
    }), createElement(BlockListBlock, _extends({}, props, {
      className: className
    })));
  };
});
addFilter('blocks.registerBlockType', 'core/layout/addAttribute', addAttribute);
addFilter('editor.BlockListBlock', 'core/editor/layout/with-layout-styles', withLayoutStyles);
addFilter('editor.BlockEdit', 'core/editor/layout/with-inspector-controls', withInspectorControls);
//# sourceMappingURL=layout.js.map