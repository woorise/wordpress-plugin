import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { find } from 'lodash';
/**
 * WordPress dependencies
 */

import { hasBlockSupport } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import { cleanEmptyObject } from './utils';
import useEditorFeature from '../components/use-editor-feature';
import FontFamilyControl from '../components/font-family';
export var FONT_FAMILY_SUPPORT_KEY = '__experimentalFontFamily';

var getFontFamilyFromAttributeValue = function getFontFamilyFromAttributeValue(fontFamilies, value) {
  var attributeParsed = /var:preset\|font-family\|(.+)/.exec(value);

  if (attributeParsed && attributeParsed[1]) {
    var fontFamilyObject = find(fontFamilies, function (_ref) {
      var slug = _ref.slug;
      return slug === attributeParsed[1];
    });

    if (fontFamilyObject) {
      return fontFamilyObject.fontFamily;
    }
  }

  return value;
};

export function FontFamilyEdit(_ref2) {
  var _style$typography;

  var name = _ref2.name,
      setAttributes = _ref2.setAttributes,
      _ref2$attributes$styl = _ref2.attributes.style,
      style = _ref2$attributes$styl === void 0 ? {} : _ref2$attributes$styl;
  var fontFamilies = useEditorFeature('typography.fontFamilies');
  var isDisable = useIsFontFamilyDisabled({
    name: name
  });

  if (isDisable) {
    return null;
  }

  var value = getFontFamilyFromAttributeValue(fontFamilies, (_style$typography = style.typography) === null || _style$typography === void 0 ? void 0 : _style$typography.fontFamily);

  function onChange(newValue) {
    var predefinedFontFamily = find(fontFamilies, function (_ref3) {
      var fontFamily = _ref3.fontFamily;
      return fontFamily === newValue;
    });
    setAttributes({
      style: cleanEmptyObject(_objectSpread(_objectSpread({}, style), {}, {
        typography: _objectSpread(_objectSpread({}, style.typography || {}), {}, {
          fontFamily: predefinedFontFamily ? "var:preset|font-family|".concat(predefinedFontFamily.slug) : newValue || undefined
        })
      }))
    });
  }

  return createElement(FontFamilyControl, {
    className: "block-editor-hooks-font-family-control",
    fontFamilies: fontFamilies,
    value: value,
    onChange: onChange
  });
}
/**
 * Custom hook that checks if font-family functionality is disabled.
 *
 * @param {string} name The name of the block.
 * @return {boolean} Whether setting is disabled.
 */

export function useIsFontFamilyDisabled(_ref4) {
  var name = _ref4.name;
  var fontFamilies = useEditorFeature('typography.fontFamilies');
  return !fontFamilies || fontFamilies.length === 0 || !hasBlockSupport(name, FONT_FAMILY_SUPPORT_KEY);
}
//# sourceMappingURL=font-family.js.map