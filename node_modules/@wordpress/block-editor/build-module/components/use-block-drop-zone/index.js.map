{"version":3,"sources":["@wordpress/block-editor/src/components/use-block-drop-zone/index.js"],"names":["__unstableUseDropZone","useDropZone","useSelect","useEffect","useState","useOnBlockDrop","getDistanceToNearestEdge","store","blockEditorStore","getNearestBlockIndex","elements","position","orientation","allowedEdges","candidateIndex","candidateDistance","forEach","element","index","classList","contains","rect","getBoundingClientRect","distance","edge","undefined","isTrailingEdge","offset","isTargetDraggedBlock","useBlockDropZone","rootClientId","targetRootClientId","targetBlockIndex","setTargetBlockIndex","select","getBlockListSettings","getTemplateLock","isLockedAll","dropEventHandlers","isDisabled","withPosition","blockElements","Array","from","current","children","targetIndex"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __unstableUseDropZone as useDropZone } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport { useEffect, useState } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport useOnBlockDrop from '../use-on-block-drop';\nimport { getDistanceToNearestEdge } from '../../utils/math';\nimport { store as blockEditorStore } from '../../store';\n\n/** @typedef {import('../../utils/math').WPPoint} WPPoint */\n\n/**\n * The orientation of a block list.\n *\n * @typedef {'horizontal'|'vertical'|undefined} WPBlockListOrientation\n */\n\n/**\n * Given a list of block DOM elements finds the index that a block should be dropped\n * at.\n *\n * @param {Element[]}              elements    Array of DOM elements that represent each block in a block list.\n * @param {WPPoint}                position    The position of the item being dragged.\n * @param {WPBlockListOrientation} orientation The orientation of a block list.\n *\n * @return {number|undefined} The block index that's closest to the drag position.\n */\nexport function getNearestBlockIndex( elements, position, orientation ) {\n\tconst allowedEdges =\n\t\torientation === 'horizontal'\n\t\t\t? [ 'left', 'right' ]\n\t\t\t: [ 'top', 'bottom' ];\n\n\tlet candidateIndex;\n\tlet candidateDistance;\n\n\telements.forEach( ( element, index ) => {\n\t\t// Ensure the element is a block. It should have the `wp-block` class.\n\t\tif ( ! element.classList.contains( 'wp-block' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rect = element.getBoundingClientRect();\n\t\tconst [ distance, edge ] = getDistanceToNearestEdge(\n\t\t\tposition,\n\t\t\trect,\n\t\t\tallowedEdges\n\t\t);\n\n\t\tif ( candidateDistance === undefined || distance < candidateDistance ) {\n\t\t\t// If the user is dropping to the trailing edge of the block\n\t\t\t// add 1 to the index to represent dragging after.\n\t\t\tconst isTrailingEdge = edge === 'bottom' || edge === 'right';\n\t\t\tlet offset = isTrailingEdge ? 1 : 0;\n\n\t\t\t// If the target is the dragged block itself and another 1 to\n\t\t\t// index as the dragged block is set to `display: none` and\n\t\t\t// should be skipped in the calculation.\n\t\t\tconst isTargetDraggedBlock =\n\t\t\t\tisTrailingEdge &&\n\t\t\t\telements[ index + 1 ] &&\n\t\t\t\telements[ index + 1 ].classList.contains( 'is-dragging' );\n\t\t\toffset += isTargetDraggedBlock ? 1 : 0;\n\n\t\t\t// Update the currently known best candidate.\n\t\t\tcandidateDistance = distance;\n\t\t\tcandidateIndex = index + offset;\n\t\t}\n\t} );\n\n\treturn candidateIndex;\n}\n\n/**\n * @typedef  {Object} WPBlockDropZoneConfig\n * @property {Object} element      A React ref object pointing to the block list's DOM element.\n * @property {string} rootClientId The root client id for the block list.\n */\n\n/**\n * A React hook that can be used to make a block list handle drag and drop.\n *\n * @param {WPBlockDropZoneConfig} dropZoneConfig configuration data for the drop zone.\n *\n * @return {number|undefined} The block index that's closest to the drag position.\n */\nexport default function useBlockDropZone( {\n\telement,\n\t// An undefined value represents a top-level block. Default to an empty\n\t// string for this so that `targetRootClientId` can be easily compared to\n\t// values returned by the `getRootBlockClientId` selector, which also uses\n\t// an empty string to represent top-level blocks.\n\trootClientId: targetRootClientId = '',\n} ) {\n\tconst [ targetBlockIndex, setTargetBlockIndex ] = useState( null );\n\n\tconst { isLockedAll, orientation } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockListSettings, getTemplateLock } = select(\n\t\t\t\tblockEditorStore\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tisLockedAll: getTemplateLock( targetRootClientId ) === 'all',\n\t\t\t\torientation: getBlockListSettings( targetRootClientId )\n\t\t\t\t\t?.orientation,\n\t\t\t};\n\t\t},\n\t\t[ targetRootClientId ]\n\t);\n\n\tconst dropEventHandlers = useOnBlockDrop(\n\t\ttargetRootClientId,\n\t\ttargetBlockIndex\n\t);\n\n\tconst { position } = useDropZone( {\n\t\telement,\n\t\tisDisabled: isLockedAll,\n\t\twithPosition: true,\n\t\t...dropEventHandlers,\n\t} );\n\n\tuseEffect( () => {\n\t\tif ( position ) {\n\t\t\tconst blockElements = Array.from( element.current.children );\n\n\t\t\tconst targetIndex = getNearestBlockIndex(\n\t\t\t\tblockElements,\n\t\t\t\tposition,\n\t\t\t\torientation\n\t\t\t);\n\n\t\t\tsetTargetBlockIndex( targetIndex === undefined ? 0 : targetIndex );\n\t\t}\n\t}, [ position ] );\n\n\tif ( position ) {\n\t\treturn targetBlockIndex;\n\t}\n}\n"]}