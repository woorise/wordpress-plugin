import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { DropdownMenu, ToolbarGroup } from '@wordpress/components';
import { justifyLeft, justifyCenter, justifyRight, justifySpaceBetween } from '@wordpress/icons';
import { __ } from '@wordpress/i18n';
var icons = {
  left: justifyLeft,
  center: justifyCenter,
  right: justifyRight,
  'space-between': justifySpaceBetween
};

function JustifyContentUI(_ref) {
  var _ref$allowedControls = _ref.allowedControls,
      allowedControls = _ref$allowedControls === void 0 ? ['left', 'center', 'right', 'space-between'] : _ref$allowedControls,
      _ref$isCollapsed = _ref.isCollapsed,
      isCollapsed = _ref$isCollapsed === void 0 ? true : _ref$isCollapsed,
      onChange = _ref.onChange,
      value = _ref.value,
      popoverProps = _ref.popoverProps,
      isToolbar = _ref.isToolbar,
      _ref$isToolbarButton = _ref.isToolbarButton,
      isToolbarButton = _ref$isToolbarButton === void 0 ? true : _ref$isToolbarButton;

  // If the control is already selected we want a click
  // again on the control to deselect the item, so we
  // call onChange( undefined )
  var handleClick = function handleClick(next) {
    if (next === value) {
      onChange(undefined);
    } else {
      onChange(next);
    }
  };

  var icon = value ? icons[value] : icons.left;
  var allControls = [{
    name: 'left',
    icon: justifyLeft,
    title: __('Justify items left'),
    isActive: 'left' === value,
    onClick: function onClick() {
      return handleClick('left');
    }
  }, {
    name: 'center',
    icon: justifyCenter,
    title: __('Justify items center'),
    isActive: 'center' === value,
    onClick: function onClick() {
      return handleClick('center');
    }
  }, {
    name: 'right',
    icon: justifyRight,
    title: __('Justify items right'),
    isActive: 'right' === value,
    onClick: function onClick() {
      return handleClick('right');
    }
  }, {
    name: 'space-between',
    icon: justifySpaceBetween,
    title: __('Space between items'),
    isActive: 'space-between' === value,
    onClick: function onClick() {
      return handleClick('space-between');
    }
  }];
  var UIComponent = isToolbar ? ToolbarGroup : DropdownMenu;
  var extraProps = isToolbar ? {
    isCollapsed: isCollapsed
  } : {
    isToolbarButton: isToolbarButton
  };
  return createElement(UIComponent, _extends({
    icon: icon,
    popoverProps: popoverProps,
    label: __('Change items justification'),
    controls: allControls.filter(function (elem) {
      return allowedControls.includes(elem.name);
    })
  }, extraProps));
}

export default JustifyContentUI;
//# sourceMappingURL=ui.js.map