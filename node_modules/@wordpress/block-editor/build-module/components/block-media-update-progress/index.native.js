import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import { createElement } from "@wordpress/element";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * External dependencies
 */
import { View } from 'react-native';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { Spinner } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { subscribeMediaUpload, subscribeMediaSave } from '@wordpress/react-native-bridge';
/**
 * Internal dependencies
 */

import styles from './styles.scss';
export var MEDIA_UPLOAD_STATE_UPLOADING = 1;
export var MEDIA_UPLOAD_STATE_SUCCEEDED = 2;
export var MEDIA_UPLOAD_STATE_FAILED = 3;
export var MEDIA_UPLOAD_STATE_RESET = 4;
export var MEDIA_SAVE_STATE_SAVING = 5;
export var MEDIA_SAVE_STATE_SUCCEEDED = 6;
export var MEDIA_SAVE_STATE_FAILED = 7;
export var MEDIA_SAVE_STATE_RESET = 8;
export var MEDIA_SAVE_FINAL_STATE_RESULT = 9;
export var MEDIA_SAVE_MEDIAID_CHANGED = 10;
export var BlockMediaUpdateProgress = /*#__PURE__*/function (_Component) {
  _inherits(BlockMediaUpdateProgress, _Component);

  var _super = _createSuper(BlockMediaUpdateProgress);

  function BlockMediaUpdateProgress(props) {
    var _this;

    _classCallCheck(this, BlockMediaUpdateProgress);

    _this = _super.call(this, props);
    _this.state = {
      progress: 0,
      isSaveInProgress: false,
      isSaveFailed: false,
      isUploadInProgress: false,
      isUploadFailed: false
    };
    _this.mediaUpload = _this.mediaUpload.bind(_assertThisInitialized(_this));
    _this.mediaSave = _this.mediaSave.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(BlockMediaUpdateProgress, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.addMediaUploadListener();
      this.addMediaSaveListener();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeMediaUploadListener();
      this.removeMediaSaveListener();
    }
  }, {
    key: "mediaIdContainedInMediaFiles",
    value: function mediaIdContainedInMediaFiles(mediaId, mediaFiles) {
      if (mediaId !== undefined && mediaFiles !== undefined) {
        return mediaFiles.some(function (element) {
          return element.id === mediaId.toString();
        });
      }

      return false;
    }
  }, {
    key: "mediaUpload",
    value: function mediaUpload(payload) {
      var mediaFiles = this.props.mediaFiles;

      if (this.mediaIdContainedInMediaFiles(payload.mediaId, mediaFiles) === false) {
        return;
      }

      switch (payload.state) {
        case MEDIA_UPLOAD_STATE_UPLOADING:
          this.updateMediaUploadProgress(payload);
          break;

        case MEDIA_UPLOAD_STATE_SUCCEEDED:
          this.finishMediaUploadWithSuccess(payload);
          break;

        case MEDIA_UPLOAD_STATE_FAILED:
          this.finishMediaUploadWithFailure(payload);
          break;

        case MEDIA_UPLOAD_STATE_RESET:
          this.mediaUploadStateReset(payload);
          break;
      }
    }
  }, {
    key: "mediaSave",
    value: function mediaSave(payload) {
      var mediaFiles = this.props.mediaFiles;

      if (this.mediaIdContainedInMediaFiles(payload.mediaId, mediaFiles) === false) {
        return;
      }

      switch (payload.state) {
        case MEDIA_SAVE_STATE_SAVING:
          this.updateMediaSaveProgress(payload);
          break;

        case MEDIA_SAVE_STATE_SUCCEEDED:
          this.finishMediaSaveWithSuccess(payload);
          break;

        case MEDIA_SAVE_STATE_FAILED:
          this.finishMediaSaveWithFailure(payload);
          break;

        case MEDIA_SAVE_STATE_RESET:
          this.mediaSaveStateReset(payload);
          break;

        case MEDIA_SAVE_FINAL_STATE_RESULT:
          this.finalSaveResult(payload);
          break;

        case MEDIA_SAVE_MEDIAID_CHANGED:
          this.mediaIdChanged(payload);
          break;
      }
    } // ---- Block media save actions

  }, {
    key: "updateMediaSaveProgress",
    value: function updateMediaSaveProgress(payload) {
      this.setState({
        progress: payload.progress,
        isUploadInProgress: false,
        isUploadFailed: false,
        isSaveInProgress: true,
        isSaveFailed: false
      });

      if (this.props.onUpdateMediaSaveProgress) {
        this.props.onUpdateMediaSaveProgress(payload);
      }
    }
  }, {
    key: "finishMediaSaveWithSuccess",
    value: function finishMediaSaveWithSuccess(payload) {
      this.setState({
        isSaveInProgress: false
      });

      if (this.props.onFinishMediaSaveWithSuccess) {
        this.props.onFinishMediaSaveWithSuccess(payload);
      }
    }
  }, {
    key: "finishMediaSaveWithFailure",
    value: function finishMediaSaveWithFailure(payload) {
      this.setState({
        isSaveInProgress: false,
        isSaveFailed: true
      });

      if (this.props.onFinishMediaSaveWithFailure) {
        this.props.onFinishMediaSaveWithFailure(payload);
      }
    }
  }, {
    key: "mediaSaveStateReset",
    value: function mediaSaveStateReset(payload) {
      this.setState({
        isSaveInProgress: false,
        isSaveFailed: false
      });

      if (this.props.onMediaSaveStateReset) {
        this.props.onMediaSaveStateReset(payload);
      }
    }
  }, {
    key: "finalSaveResult",
    value: function finalSaveResult(payload) {
      this.setState({
        progress: payload.progress,
        isUploadInProgress: false,
        isUploadFailed: false,
        isSaveInProgress: false,
        isSaveFailed: !payload.success
      });

      if (this.props.onFinalSaveResult) {
        this.props.onFinalSaveResult(payload);
      }
    }
  }, {
    key: "mediaIdChanged",
    value: function mediaIdChanged(payload) {
      this.setState({
        isUploadInProgress: false,
        isUploadFailed: false,
        isSaveInProgress: false,
        isSaveFailed: false
      });

      if (this.props.onMediaIdChanged) {
        this.props.onMediaIdChanged(payload);
      }
    } // ---- Block media upload actions

  }, {
    key: "updateMediaUploadProgress",
    value: function updateMediaUploadProgress(payload) {
      this.setState({
        progress: payload.progress,
        isUploadInProgress: true,
        isUploadFailed: false,
        isSaveInProgress: false,
        isSaveFailed: false
      });

      if (this.props.onUpdateMediaUploadProgress) {
        this.props.onUpdateMediaUploadProgress(payload);
      }
    }
  }, {
    key: "finishMediaUploadWithSuccess",
    value: function finishMediaUploadWithSuccess(payload) {
      this.setState({
        isUploadInProgress: false,
        isSaveInProgress: false
      });

      if (this.props.onFinishMediaUploadWithSuccess) {
        this.props.onFinishMediaUploadWithSuccess(payload);
      }
    }
  }, {
    key: "finishMediaUploadWithFailure",
    value: function finishMediaUploadWithFailure(payload) {
      this.setState({
        isUploadInProgress: false,
        isUploadFailed: true
      });

      if (this.props.onFinishMediaUploadWithFailure) {
        this.props.onFinishMediaUploadWithFailure(payload);
      }
    }
  }, {
    key: "mediaUploadStateReset",
    value: function mediaUploadStateReset(payload) {
      this.setState({
        isUploadInProgress: false,
        isUploadFailed: false
      });

      if (this.props.onMediaUploadStateReset) {
        this.props.onMediaUploadStateReset(payload);
      }
    }
  }, {
    key: "addMediaUploadListener",
    value: function addMediaUploadListener() {
      var _this2 = this;

      //if we already have a subscription not worth doing it again
      if (this.subscriptionParentMediaUpload) {
        return;
      }

      this.subscriptionParentMediaUpload = subscribeMediaUpload(function (payload) {
        _this2.mediaUpload(payload);
      });
    }
  }, {
    key: "removeMediaUploadListener",
    value: function removeMediaUploadListener() {
      if (this.subscriptionParentMediaUpload) {
        this.subscriptionParentMediaUpload.remove();
      }
    }
  }, {
    key: "addMediaSaveListener",
    value: function addMediaSaveListener() {
      var _this3 = this;

      //if we already have a subscription not worth doing it again
      if (this.subscriptionParentMediaSave) {
        return;
      }

      this.subscriptionParentMediaSave = subscribeMediaSave(function (payload) {
        _this3.mediaSave(payload);
      });
    }
  }, {
    key: "removeMediaSaveListener",
    value: function removeMediaSaveListener() {
      if (this.subscriptionParentMediaSave) {
        this.subscriptionParentMediaSave.remove();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$renderCon = this.props.renderContent,
          renderContent = _this$props$renderCon === void 0 ? function () {
        return null;
      } : _this$props$renderCon;
      var _this$state = this.state,
          isUploadInProgress = _this$state.isUploadInProgress,
          isUploadFailed = _this$state.isUploadFailed,
          isSaveInProgress = _this$state.isSaveInProgress,
          isSaveFailed = _this$state.isSaveFailed;
      var showSpinner = this.state.isUploadInProgress || this.state.isSaveInProgress;
      var progress = this.state.progress * 100; // eslint-disable-next-line @wordpress/i18n-no-collapsible-whitespace

      var retryMessageSave = __('Failed to save files.\nPlease tap for options.'); // eslint-disable-next-line @wordpress/i18n-no-collapsible-whitespace


      var retryMessageUpload = __('Failed to upload files.\nPlease tap for options.');

      var retryMessage = retryMessageSave;

      if (isUploadFailed) {
        retryMessage = retryMessageUpload;
      }

      return createElement(View, {
        style: styles.mediaUploadProgress,
        pointerEvents: "box-none"
      }, showSpinner && createElement(View, {
        style: styles.progressBar
      }, createElement(Spinner, {
        progress: progress
      })), renderContent({
        isUploadInProgress: isUploadInProgress,
        isUploadFailed: isUploadFailed,
        isSaveInProgress: isSaveInProgress,
        isSaveFailed: isSaveFailed,
        retryMessage: retryMessage
      }));
    }
  }]);

  return BlockMediaUpdateProgress;
}(Component);
export default BlockMediaUpdateProgress;
//# sourceMappingURL=index.native.js.map