/**
 * External dependencies
 */
import { truncate } from 'lodash';
/**
 * WordPress dependencies
 */

import { useSelect } from '@wordpress/data';
import { getBlockType, __experimentalGetBlockLabel as getBlockLabel, isReusableBlock } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import useBlockDisplayInformation from '../use-block-display-information';
import { store as blockEditorStore } from '../../store';
/**
 * Renders the block's configured title as a string, or empty if the title
 * cannot be determined.
 *
 * @example
 *
 * ```jsx
 * <BlockTitle clientId="afd1cb17-2c08-4e7a-91be-007ba7ddc3a1" />
 * ```
 *
 * @param {Object} props
 * @param {string} props.clientId Client ID of block.
 *
 * @return {?string} Block title.
 */

export default function BlockTitle(_ref) {
  var clientId = _ref.clientId;

  var _useSelect = useSelect(function (select) {
    if (!clientId) {
      return {};
    }

    var _select = select(blockEditorStore),
        getBlockName = _select.getBlockName,
        getBlockAttributes = _select.getBlockAttributes,
        __experimentalGetReusableBlockTitle = _select.__experimentalGetReusableBlockTitle;

    var blockName = getBlockName(clientId);

    if (!blockName) {
      return {};
    }

    var isReusable = isReusableBlock(getBlockType(blockName));
    return {
      attributes: getBlockAttributes(clientId),
      name: blockName,
      reusableBlockTitle: isReusable && __experimentalGetReusableBlockTitle(getBlockAttributes(clientId).ref)
    };
  }, [clientId]),
      attributes = _useSelect.attributes,
      name = _useSelect.name,
      reusableBlockTitle = _useSelect.reusableBlockTitle;

  var blockInformation = useBlockDisplayInformation(clientId);
  if (!name || !blockInformation) return null;
  var blockType = getBlockType(name);
  var label = reusableBlockTitle || getBlockLabel(blockType, attributes); // Label will fallback to the title if no label is defined for the current
  // label context. If the label is defined we prioritize it over possible
  // possible block variation title match.

  if (label !== blockType.title) {
    return truncate(label, {
      length: 35
    });
  }

  return blockInformation.title;
}
//# sourceMappingURL=index.js.map