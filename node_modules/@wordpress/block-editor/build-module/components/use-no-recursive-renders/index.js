import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { createContext, useCallback, useContext, useMemo } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { useBlockEditContext } from '../block-edit/context';
var RenderedRefsContext = createContext({});
/**
 * Immutably adds an unique identifier to a set scoped for a given block type.
 *
 * @param {Object} renderedBlocks Rendered blocks grouped by block name
 * @param {string} blockName      Name of the block.
 * @param {*} uniqueId            Any value that acts as a unique identifier for a block instance.
 *
 * @return {Object} The list of rendered blocks grouped by block name.
 */

function addToBlockType(renderedBlocks, blockName, uniqueId) {
  var result = _objectSpread(_objectSpread({}, renderedBlocks), {}, _defineProperty({}, blockName, renderedBlocks[blockName] ? new Set(renderedBlocks[blockName]) : new Set()));

  result[blockName].add(uniqueId);
  return result;
}
/**
 * A React hook for keeping track of blocks previously rendered up in the block
 * tree. Blocks susceptible to recursion can use this hook in their `Edit`
 * function to prevent said recursion.
 *
 * @param {*} uniqueId Any value that acts as a unique identifier for a block instance.
 *
 * @return {[boolean, Function]} A tuple of:
 *                               - a boolean describing whether the provided id
 *                                 has already been rendered;
 *                               - a React context provider to be used to wrap
 *                                 other elements.
 */


export default function useNoRecursiveRenders(uniqueId) {
  var _previouslyRenderedBl;

  var previouslyRenderedBlocks = useContext(RenderedRefsContext);

  var _useBlockEditContext = useBlockEditContext(),
      blockName = _useBlockEditContext.name;

  var hasAlreadyRendered = Boolean((_previouslyRenderedBl = previouslyRenderedBlocks[blockName]) === null || _previouslyRenderedBl === void 0 ? void 0 : _previouslyRenderedBl.has(uniqueId));
  var newRenderedBlocks = useMemo(function () {
    return addToBlockType(previouslyRenderedBlocks, blockName, uniqueId);
  }, [previouslyRenderedBlocks, blockName, uniqueId]);
  var Provider = useCallback(function (_ref) {
    var children = _ref.children;
    return createElement(RenderedRefsContext.Provider, {
      value: newRenderedBlocks
    }, children);
  }, [newRenderedBlocks]);
  return [hasAlreadyRendered, Provider];
}
//# sourceMappingURL=index.js.map