import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { pick } from 'lodash';
/**
 * WordPress dependencies
 */

import { withFilters } from '@wordpress/components';
import { getBlockType } from '@wordpress/blocks';
import { useContext, useMemo } from '@wordpress/element';
/**
 * Internal dependencies
 */

import BlockContext from '../block-context';
/**
 * Default value used for blocks which do not define their own context needs,
 * used to guarantee that a block's `context` prop will always be an object. It
 * is assigned as a constant since it is always expected to be an empty object,
 * and in order to avoid unnecessary React reconciliations of a changing object.
 *
 * @type {{}}
 */

var DEFAULT_BLOCK_CONTEXT = {};
export var Edit = function Edit(props) {
  var name = props.name;
  var blockType = getBlockType(name);
  var blockContext = useContext(BlockContext); // Assign context values using the block type's declared context needs.

  var context = useMemo(function () {
    return blockType && blockType.usesContext ? pick(blockContext, blockType.usesContext) : DEFAULT_BLOCK_CONTEXT;
  }, [blockType, blockContext]);

  if (!blockType) {
    return null;
  }

  var Component = blockType.edit;
  return createElement(Component, _extends({}, props, {
    context: context
  }));
};
export default withFilters('editor.BlockEdit')(Edit);
//# sourceMappingURL=edit.native.js.map