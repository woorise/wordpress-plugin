import _extends from "@babel/runtime/helpers/esm/extends";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement, Fragment } from "@wordpress/element";
import _regeneratorRuntime from "@babel/runtime/regenerator";

/**
 * External dependencies
 */
import { castArray, flow, noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { DropdownMenu, MenuGroup, MenuItem } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
import { moreVertical } from '@wordpress/icons';
import { Children, cloneElement, useCallback } from '@wordpress/element';
import { serialize } from '@wordpress/blocks';
import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';
import { useCopyToClipboard } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import BlockActions from '../block-actions';
import BlockModeToggle from './block-mode-toggle';
import BlockHTMLConvertButton from './block-html-convert-button';
import __experimentalBlockSettingsMenuFirstItem from './block-settings-menu-first-item';
import BlockSettingsMenuControls from '../block-settings-menu-controls';
var POPOVER_PROPS = {
  className: 'block-editor-block-settings-menu__popover',
  position: 'bottom right',
  isAlternate: true
};

function CopyMenuItem(_ref) {
  var blocks = _ref.blocks,
      onCopy = _ref.onCopy;
  var ref = useCopyToClipboard(function () {
    return serialize(blocks);
  }, onCopy);
  return createElement(MenuItem, {
    ref: ref
  }, __('Copy'));
}

export function BlockSettingsDropdown(_ref2) {
  var clientIds = _ref2.clientIds,
      __experimentalSelectBlock = _ref2.__experimentalSelectBlock,
      children = _ref2.children,
      props = _objectWithoutProperties(_ref2, ["clientIds", "__experimentalSelectBlock", "children"]);

  var blockClientIds = castArray(clientIds);
  var count = blockClientIds.length;
  var firstBlockClientId = blockClientIds[0];
  var shortcuts = useSelect(function (select) {
    var _select = select(keyboardShortcutsStore),
        getShortcutRepresentation = _select.getShortcutRepresentation;

    return {
      duplicate: getShortcutRepresentation('core/block-editor/duplicate'),
      remove: getShortcutRepresentation('core/block-editor/remove'),
      insertAfter: getShortcutRepresentation('core/block-editor/insert-after'),
      insertBefore: getShortcutRepresentation('core/block-editor/insert-before')
    };
  }, []);
  var updateSelection = useCallback(__experimentalSelectBlock ? /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(clientIdsPromise) {
      var ids;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return clientIdsPromise;

            case 2:
              ids = _context.sent;

              if (ids && ids[0]) {
                __experimentalSelectBlock(ids[0]);
              }

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }() : noop, [__experimentalSelectBlock]);
  var removeBlockLabel = count === 1 ? __('Remove block') : __('Remove blocks');
  return createElement(BlockActions, {
    clientIds: clientIds,
    __experimentalUpdateSelection: !__experimentalSelectBlock
  }, function (_ref4) {
    var canDuplicate = _ref4.canDuplicate,
        canInsertDefaultBlock = _ref4.canInsertDefaultBlock,
        isLocked = _ref4.isLocked,
        onDuplicate = _ref4.onDuplicate,
        onInsertAfter = _ref4.onInsertAfter,
        onInsertBefore = _ref4.onInsertBefore,
        onRemove = _ref4.onRemove,
        onCopy = _ref4.onCopy,
        onMoveTo = _ref4.onMoveTo,
        blocks = _ref4.blocks;
    return createElement(DropdownMenu, _extends({
      icon: moreVertical,
      label: __('Options'),
      className: "block-editor-block-settings-menu",
      popoverProps: POPOVER_PROPS,
      noIcons: true
    }, props), function (_ref5) {
      var onClose = _ref5.onClose;
      return createElement(Fragment, null, createElement(MenuGroup, null, createElement(__experimentalBlockSettingsMenuFirstItem.Slot, {
        fillProps: {
          onClose: onClose
        }
      }), count === 1 && createElement(BlockHTMLConvertButton, {
        clientId: firstBlockClientId
      }), createElement(CopyMenuItem, {
        blocks: blocks,
        onCopy: onCopy
      }), canDuplicate && createElement(MenuItem, {
        onClick: flow(onClose, onDuplicate, updateSelection),
        shortcut: shortcuts.duplicate
      }, __('Duplicate')), canInsertDefaultBlock && createElement(Fragment, null, createElement(MenuItem, {
        onClick: flow(onClose, onInsertBefore),
        shortcut: shortcuts.insertBefore
      }, __('Insert before')), createElement(MenuItem, {
        onClick: flow(onClose, onInsertAfter),
        shortcut: shortcuts.insertAfter
      }, __('Insert after'))), !isLocked && createElement(MenuItem, {
        onClick: flow(onClose, onMoveTo)
      }, __('Move to')), count === 1 && createElement(BlockModeToggle, {
        clientId: firstBlockClientId,
        onToggle: onClose
      })), createElement(BlockSettingsMenuControls.Slot, {
        fillProps: {
          onClose: onClose
        },
        clientIds: clientIds
      }), typeof children === 'function' ? children({
        onClose: onClose
      }) : Children.map(function (child) {
        return cloneElement(child, {
          onClose: onClose
        });
      }), createElement(MenuGroup, null, !isLocked && createElement(MenuItem, {
        onClick: flow(onClose, onRemove, updateSelection),
        shortcut: shortcuts.remove
      }, removeBlockLabel)));
    });
  });
}
export default BlockSettingsDropdown;
//# sourceMappingURL=block-settings-dropdown.js.map