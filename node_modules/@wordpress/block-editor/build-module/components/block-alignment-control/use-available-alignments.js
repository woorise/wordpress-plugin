/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { useLayout } from '../block-list/layout';
import { store as blockEditorStore } from '../../store';
var DEFAULT_CONTROLS = ['left', 'center', 'right', 'wide', 'full'];
var WIDE_CONTROLS = ['wide', 'full'];
export default function useAvailableAlignments() {
  var controls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_CONTROLS;

  var _useSelect = useSelect(function (select) {
    var _select = select(blockEditorStore),
        getSettings = _select.getSettings;

    var settings = getSettings();
    return {
      wideControlsEnabled: settings.alignWide
    };
  }, []),
      _useSelect$wideContro = _useSelect.wideControlsEnabled,
      wideControlsEnabled = _useSelect$wideContro === void 0 ? false : _useSelect$wideContro;

  var layout = useLayout();
  var supportsAlignments = layout.type === 'default';

  if (!supportsAlignments) {
    return [];
  }

  var _layout$alignments = layout.alignments,
      availableAlignments = _layout$alignments === void 0 ? DEFAULT_CONTROLS : _layout$alignments;
  var enabledControls = controls.filter(function (control) {
    return (layout.alignments || // Ignore the global wideAlignment check if the layout explicitely defines alignments.
    wideControlsEnabled || !WIDE_CONTROLS.includes(control)) && availableAlignments.includes(control);
  });
  return enabledControls;
}
//# sourceMappingURL=use-available-alignments.js.map