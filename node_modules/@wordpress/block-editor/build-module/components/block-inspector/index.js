import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { getBlockType, getUnregisteredTypeHandlerName, hasBlockSupport, store as blocksStore } from '@wordpress/blocks';
import { PanelBody, __experimentalUseSlot as useSlot } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import SkipToSelectedBlock from '../skip-to-selected-block';
import BlockCard from '../block-card';
import InspectorControls from '../inspector-controls';
import InspectorAdvancedControls from '../inspector-advanced-controls';
import BlockStyles from '../block-styles';
import MultiSelectionInspector from '../multi-selection-inspector';
import DefaultStylePicker from '../default-style-picker';
import BlockVariationTransforms from '../block-variation-transforms';
import useBlockDisplayInformation from '../use-block-display-information';
import { store as blockEditorStore } from '../../store';

var BlockInspector = function BlockInspector(_ref) {
  var _ref$showNoBlockSelec = _ref.showNoBlockSelectedMessage,
      showNoBlockSelectedMessage = _ref$showNoBlockSelec === void 0 ? true : _ref$showNoBlockSelec,
      _ref$bubblesVirtually = _ref.bubblesVirtually,
      bubblesVirtually = _ref$bubblesVirtually === void 0 ? true : _ref$bubblesVirtually;

  var _useSelect = useSelect(function (select) {
    var _select = select(blockEditorStore),
        getSelectedBlockClientId = _select.getSelectedBlockClientId,
        getSelectedBlockCount = _select.getSelectedBlockCount,
        getBlockName = _select.getBlockName;

    var _select2 = select(blocksStore),
        getBlockStyles = _select2.getBlockStyles;

    var _selectedBlockClientId = getSelectedBlockClientId();

    var _selectedBlockName = _selectedBlockClientId && getBlockName(_selectedBlockClientId);

    var _blockType = _selectedBlockName && getBlockType(_selectedBlockName);

    var blockStyles = _selectedBlockName && getBlockStyles(_selectedBlockName);

    return {
      count: getSelectedBlockCount(),
      selectedBlockClientId: _selectedBlockClientId,
      selectedBlockName: _selectedBlockName,
      blockType: _blockType,
      hasBlockStyles: blockStyles && blockStyles.length > 0
    };
  }, []),
      count = _useSelect.count,
      hasBlockStyles = _useSelect.hasBlockStyles,
      selectedBlockName = _useSelect.selectedBlockName,
      selectedBlockClientId = _useSelect.selectedBlockClientId,
      blockType = _useSelect.blockType;

  if (count > 1) {
    return createElement("div", {
      className: "block-editor-block-inspector"
    }, createElement(MultiSelectionInspector, null), createElement(InspectorControls.Slot, {
      bubblesVirtually: bubblesVirtually
    }));
  }

  var isSelectedBlockUnregistered = selectedBlockName === getUnregisteredTypeHandlerName();
  /*
   * If the selected block is of an unregistered type, avoid showing it as an actual selection
   * because we want the user to focus on the unregistered block warning, not block settings.
   */

  if (!blockType || !selectedBlockClientId || isSelectedBlockUnregistered) {
    if (showNoBlockSelectedMessage) {
      return createElement("span", {
        className: "block-editor-block-inspector__no-blocks"
      }, __('No block selected.'));
    }

    return null;
  }

  return createElement(BlockInspectorSingleBlock, {
    clientId: selectedBlockClientId,
    blockName: blockType.name,
    hasBlockStyles: hasBlockStyles,
    bubblesVirtually: bubblesVirtually
  });
};

var BlockInspectorSingleBlock = function BlockInspectorSingleBlock(_ref2) {
  var clientId = _ref2.clientId,
      blockName = _ref2.blockName,
      hasBlockStyles = _ref2.hasBlockStyles,
      bubblesVirtually = _ref2.bubblesVirtually;
  var blockInformation = useBlockDisplayInformation(clientId);
  return createElement("div", {
    className: "block-editor-block-inspector"
  }, createElement(BlockCard, blockInformation), createElement(BlockVariationTransforms, {
    blockClientId: clientId
  }), hasBlockStyles && createElement("div", null, createElement(PanelBody, {
    title: __('Styles')
  }, createElement(BlockStyles, {
    clientId: clientId
  }), hasBlockSupport(blockName, 'defaultStylePicker', true) && createElement(DefaultStylePicker, {
    blockName: blockName
  }))), createElement(InspectorControls.Slot, {
    bubblesVirtually: bubblesVirtually
  }), createElement("div", null, createElement(AdvancedControls, {
    slotName: InspectorAdvancedControls.slotName,
    bubblesVirtually: bubblesVirtually
  })), createElement(SkipToSelectedBlock, {
    key: "back"
  }));
};

var AdvancedControls = function AdvancedControls(_ref3) {
  var slotName = _ref3.slotName,
      bubblesVirtually = _ref3.bubblesVirtually;
  var slot = useSlot(slotName);
  var hasFills = Boolean(slot.fills && slot.fills.length);

  if (!hasFills) {
    return null;
  }

  return createElement(PanelBody, {
    className: "block-editor-block-inspector__advanced",
    title: __('Advanced'),
    initialOpen: false
  }, createElement(InspectorAdvancedControls.Slot, {
    bubblesVirtually: bubblesVirtually
  }));
};

export default BlockInspector;
//# sourceMappingURL=index.js.map