import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { MenuItem } from '@wordpress/components';
import { _x } from '@wordpress/i18n';
import { switchToBlockType } from '@wordpress/blocks';
import { useDispatch } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../../store';
import useConvertToGroupButtonProps from './use-convert-to-group-button-props';

function ConvertToGroupButton(_ref) {
  var clientIds = _ref.clientIds,
      isGroupable = _ref.isGroupable,
      isUngroupable = _ref.isUngroupable,
      blocksSelection = _ref.blocksSelection,
      groupingBlockName = _ref.groupingBlockName,
      _ref$onClose = _ref.onClose,
      onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose;

  var _useDispatch = useDispatch(blockEditorStore),
      replaceBlocks = _useDispatch.replaceBlocks;

  var onConvertToGroup = function onConvertToGroup() {
    // Activate the `transform` on the Grouping Block which does the conversion
    var newBlocks = switchToBlockType(blocksSelection, groupingBlockName);

    if (newBlocks) {
      replaceBlocks(clientIds, newBlocks);
    }
  };

  var onConvertFromGroup = function onConvertFromGroup() {
    var innerBlocks = blocksSelection[0].innerBlocks;

    if (!innerBlocks.length) {
      return;
    }

    replaceBlocks(clientIds, innerBlocks);
  };

  if (!isGroupable && !isUngroupable) {
    return null;
  }

  return createElement(Fragment, null, isGroupable && createElement(MenuItem, {
    onClick: function onClick() {
      onConvertToGroup();
      onClose();
    }
  }, _x('Group', 'verb')), isUngroupable && createElement(MenuItem, {
    onClick: function onClick() {
      onConvertFromGroup();
      onClose();
    }
  }, _x('Ungroup', 'Ungrouping blocks from within a Group block back into individual blocks within the Editor ')));
}

export { useConvertToGroupButtonProps, ConvertToGroupButton };
//# sourceMappingURL=index.js.map