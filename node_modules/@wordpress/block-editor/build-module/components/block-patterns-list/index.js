import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { VisuallyHidden, __unstableComposite as Composite, __unstableUseCompositeState as useCompositeState, __unstableCompositeItem as CompositeItem } from '@wordpress/components';
import { useInstanceId } from '@wordpress/compose';
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import BlockPreview from '../block-preview';
import InserterDraggableBlocks from '../inserter-draggable-blocks';
import { store as blockEditorStore } from '../../store';

function BlockPattern(_ref) {
  var isDraggable = _ref.isDraggable,
      pattern = _ref.pattern,
      _onClick = _ref.onClick,
      composite = _ref.composite;
  var name = pattern.name,
      viewportWidth = pattern.viewportWidth;

  var _useSelect = useSelect(function (select) {
    return select(blockEditorStore).__experimentalGetParsedPattern(name);
  }, [name]),
      blocks = _useSelect.blocks;

  var instanceId = useInstanceId(BlockPattern);
  var descriptionId = "block-editor-block-patterns-list__item-description-".concat(instanceId);
  return createElement(InserterDraggableBlocks, {
    isEnabled: isDraggable,
    blocks: blocks
  }, function (_ref2) {
    var draggable = _ref2.draggable,
        onDragStart = _ref2.onDragStart,
        onDragEnd = _ref2.onDragEnd;
    return createElement("div", {
      className: "block-editor-block-patterns-list__list-item",
      "aria-label": pattern.title,
      "aria-describedby": pattern.description ? descriptionId : undefined,
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd
    }, createElement(CompositeItem, _extends({
      role: "option",
      as: "div"
    }, composite, {
      className: "block-editor-block-patterns-list__item",
      onClick: function onClick() {
        return _onClick(pattern, blocks);
      }
    }), createElement(BlockPreview, {
      blocks: blocks,
      viewportWidth: viewportWidth
    }), createElement("div", {
      className: "block-editor-block-patterns-list__item-title"
    }, pattern.title), !!pattern.description && createElement(VisuallyHidden, {
      id: descriptionId
    }, pattern.description)));
  });
}

function BlockPatternPlaceholder() {
  return createElement("div", {
    className: "block-editor-block-patterns-list__item is-placeholder"
  });
}

function BlockPatternList(_ref3) {
  var isDraggable = _ref3.isDraggable,
      blockPatterns = _ref3.blockPatterns,
      shownPatterns = _ref3.shownPatterns,
      onClickPattern = _ref3.onClickPattern,
      orientation = _ref3.orientation,
      _ref3$label = _ref3.label,
      label = _ref3$label === void 0 ? __('Block Patterns') : _ref3$label;
  var composite = useCompositeState({
    orientation: orientation
  });
  return createElement(Composite, _extends({}, composite, {
    role: "listbox",
    className: "block-editor-block-patterns-list",
    "aria-label": label
  }), blockPatterns.map(function (pattern) {
    var isShown = shownPatterns.includes(pattern);
    return isShown ? createElement(BlockPattern, {
      key: pattern.name,
      pattern: pattern,
      onClick: onClickPattern,
      isDraggable: isDraggable,
      composite: composite
    }) : createElement(BlockPatternPlaceholder, {
      key: pattern.name
    });
  }));
}

export default BlockPatternList;
//# sourceMappingURL=index.js.map