{"version":3,"sources":["@wordpress/block-editor/src/components/copy-handler/index.js"],"names":["useCallback","serialize","pasteHandler","store","blocksStore","documentHasSelection","documentHasUncollapsedSelection","useDispatch","useSelect","__","_n","sprintf","noticesStore","useRefEffect","getPasteEventData","blockEditorStore","useNotifyCopy","select","getBlockName","getBlockType","createSuccessNotice","eventType","selectedBlockClientIds","notice","length","clientId","title","type","useClipboardHandler","getBlocksByClientId","getSelectedBlockClientIds","hasMultiSelection","getSettings","flashBlock","removeBlocks","replaceBlocks","notifyCopy","node","handler","event","target","ownerDocument","hasSelection","contains","preventDefault","blocks","serialized","clipboardData","setData","canUserUseUnfilteredHTML","__experimentalCanUserUseUnfilteredHTML","plainText","html","HTML","mode","addEventListener","removeEventListener","CopyHandler","children"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\nimport {\n\tserialize,\n\tpasteHandler,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\nimport {\n\tdocumentHasSelection,\n\tdocumentHasUncollapsedSelection,\n} from '@wordpress/dom';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { useRefEffect } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { getPasteEventData } from '../../utils/get-paste-event-data';\nimport { store as blockEditorStore } from '../../store';\n\nexport function useNotifyCopy() {\n\tconst { getBlockName } = useSelect(\n\t\t( select ) => select( blockEditorStore ),\n\t\t[]\n\t);\n\tconst { getBlockType } = useSelect(\n\t\t( select ) => select( blocksStore ),\n\t\t[]\n\t);\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\n\treturn useCallback( ( eventType, selectedBlockClientIds ) => {\n\t\tlet notice = '';\n\t\tif ( selectedBlockClientIds.length === 1 ) {\n\t\t\tconst clientId = selectedBlockClientIds[ 0 ];\n\t\t\tconst { title } = getBlockType( getBlockName( clientId ) );\n\t\t\tnotice =\n\t\t\t\teventType === 'copy'\n\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t// Translators: Name of the block being copied, e.g. \"Paragraph\".\n\t\t\t\t\t\t\t__( 'Copied \"%s\" to clipboard.' ),\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t  )\n\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t// Translators: Name of the block being cut, e.g. \"Paragraph\".\n\t\t\t\t\t\t\t__( 'Moved \"%s\" to clipboard.' ),\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t  );\n\t\t} else {\n\t\t\tnotice =\n\t\t\t\teventType === 'copy'\n\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t// Translators: %d: Number of blocks being copied.\n\t\t\t\t\t\t\t_n(\n\t\t\t\t\t\t\t\t'Copied %d block to clipboard.',\n\t\t\t\t\t\t\t\t'Copied %d blocks to clipboard.',\n\t\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t  )\n\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t// Translators: %d: Number of blocks being cut.\n\t\t\t\t\t\t\t_n(\n\t\t\t\t\t\t\t\t'Moved %d block to clipboard.',\n\t\t\t\t\t\t\t\t'Moved %d blocks to clipboard.',\n\t\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t  );\n\t\t}\n\t\tcreateSuccessNotice( notice, {\n\t\t\ttype: 'snackbar',\n\t\t} );\n\t}, [] );\n}\n\nexport function useClipboardHandler() {\n\tconst {\n\t\tgetBlocksByClientId,\n\t\tgetSelectedBlockClientIds,\n\t\thasMultiSelection,\n\t\tgetSettings,\n\t} = useSelect( ( select ) => select( blockEditorStore ), [] );\n\tconst { flashBlock, removeBlocks, replaceBlocks } = useDispatch(\n\t\tblockEditorStore\n\t);\n\tconst notifyCopy = useNotifyCopy();\n\n\treturn useRefEffect( ( node ) => {\n\t\tfunction handler( event ) {\n\t\t\tconst selectedBlockClientIds = getSelectedBlockClientIds();\n\n\t\t\tif ( selectedBlockClientIds.length === 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Always handle multiple selected blocks.\n\t\t\tif ( ! hasMultiSelection() ) {\n\t\t\t\tconst { target } = event;\n\t\t\t\tconst { ownerDocument } = target;\n\t\t\t\t// If copying, only consider actual text selection as selection.\n\t\t\t\t// Otherwise, any focus on an input field is considered.\n\t\t\t\tconst hasSelection =\n\t\t\t\t\tevent.type === 'copy' || event.type === 'cut'\n\t\t\t\t\t\t? documentHasUncollapsedSelection( ownerDocument )\n\t\t\t\t\t\t: documentHasSelection( ownerDocument );\n\n\t\t\t\t// Let native copy behaviour take over in input fields.\n\t\t\t\tif ( hasSelection ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! node.contains( event.target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( event.type === 'copy' || event.type === 'cut' ) {\n\t\t\t\tif ( selectedBlockClientIds.length === 1 ) {\n\t\t\t\t\tflashBlock( selectedBlockClientIds[ 0 ] );\n\t\t\t\t}\n\t\t\t\tnotifyCopy( event.type, selectedBlockClientIds );\n\t\t\t\tconst blocks = getBlocksByClientId( selectedBlockClientIds );\n\t\t\t\tconst serialized = serialize( blocks );\n\n\t\t\t\tevent.clipboardData.setData( 'text/plain', serialized );\n\t\t\t\tevent.clipboardData.setData( 'text/html', serialized );\n\t\t\t}\n\n\t\t\tif ( event.type === 'cut' ) {\n\t\t\t\tremoveBlocks( selectedBlockClientIds );\n\t\t\t} else if ( event.type === 'paste' ) {\n\t\t\t\tconst {\n\t\t\t\t\t__experimentalCanUserUseUnfilteredHTML: canUserUseUnfilteredHTML,\n\t\t\t\t} = getSettings();\n\t\t\t\tconst { plainText, html } = getPasteEventData( event );\n\t\t\t\tconst blocks = pasteHandler( {\n\t\t\t\t\tHTML: html,\n\t\t\t\t\tplainText,\n\t\t\t\t\tmode: 'BLOCKS',\n\t\t\t\t\tcanUserUseUnfilteredHTML,\n\t\t\t\t} );\n\n\t\t\t\treplaceBlocks(\n\t\t\t\t\tselectedBlockClientIds,\n\t\t\t\t\tblocks,\n\t\t\t\t\tblocks.length - 1,\n\t\t\t\t\t-1\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tnode.addEventListener( 'copy', handler );\n\t\tnode.addEventListener( 'cut', handler );\n\t\tnode.addEventListener( 'paste', handler );\n\n\t\treturn () => {\n\t\t\tnode.removeEventListener( 'copy', handler );\n\t\t\tnode.removeEventListener( 'cut', handler );\n\t\t\tnode.removeEventListener( 'paste', handler );\n\t\t};\n\t}, [] );\n}\n\nfunction CopyHandler( { children } ) {\n\treturn <div ref={ useClipboardHandler() }>{ children }</div>;\n}\n\nexport default CopyHandler;\n"]}