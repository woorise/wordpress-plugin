import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { __experimentalTreeGridCell as TreeGridCell, __experimentalTreeGridItem as TreeGridItem, MenuGroup, MenuItem } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { moreVertical } from '@wordpress/icons';
import { useState, useRef, useEffect } from '@wordpress/element';
import { useDispatch, useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import BlockNavigationLeaf from './leaf';
import { BlockMoverUpButton, BlockMoverDownButton } from '../block-mover/button';
import BlockNavigationBlockContents from './block-contents';
import BlockSettingsDropdown from '../block-settings-menu/block-settings-dropdown';
import { useBlockNavigationContext } from './context';
import { store as blockEditorStore } from '../../store';
export default function BlockNavigationBlock(_ref) {
  var block = _ref.block,
      isSelected = _ref.isSelected,
      isBranchSelected = _ref.isBranchSelected,
      isLastOfSelectedBranch = _ref.isLastOfSelectedBranch,
      _onClick = _ref.onClick,
      position = _ref.position,
      level = _ref.level,
      rowCount = _ref.rowCount,
      siblingBlockCount = _ref.siblingBlockCount,
      showBlockMovers = _ref.showBlockMovers,
      path = _ref.path;
  var cellRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHovered = _useState2[0],
      setIsHovered = _useState2[1];

  var clientId = block.clientId;

  var _useSelect = useSelect(function (select) {
    var _select = select(blockEditorStore),
        isBlockBeingDragged = _select.isBlockBeingDragged,
        isAncestorBeingDragged = _select.isAncestorBeingDragged,
        getBlockParents = _select.getBlockParents;

    return {
      isDragging: isBlockBeingDragged(clientId) || isAncestorBeingDragged(clientId),
      blockParents: getBlockParents(clientId)
    };
  }, [clientId]),
      isDragging = _useSelect.isDragging,
      blockParents = _useSelect.blockParents;

  var _useDispatch = useDispatch(blockEditorStore),
      selectEditorBlock = _useDispatch.selectBlock,
      toggleBlockHighlight = _useDispatch.toggleBlockHighlight;

  var hasSiblings = siblingBlockCount > 0;
  var hasRenderedMovers = showBlockMovers && hasSiblings;
  var moverCellClassName = classnames('block-editor-block-navigation-block__mover-cell', {
    'is-visible': isHovered
  });

  var _useBlockNavigationCo = useBlockNavigationContext(),
      withExperimentalFeatures = _useBlockNavigationCo.__experimentalFeatures,
      withExperimentalPersistentListViewFeatures = _useBlockNavigationCo.__experimentalPersistentListViewFeatures;

  var blockNavigationBlockSettingsClassName = classnames('block-editor-block-navigation-block__menu-cell', {
    'is-visible': isHovered
  }); // If BlockNavigation has experimental features related to the Persistent List View,
  // only focus the selected list item on mount; otherwise the list would always
  // try to steal the focus from the editor canvas.

  useEffect(function () {
    if (withExperimentalPersistentListViewFeatures && isSelected) {
      cellRef.current.focus();
    }
  }, []); // If BlockNavigation has experimental features (such as drag and drop) enabled,
  // leave the focus handling as it was before, to avoid accidental regressions.

  useEffect(function () {
    if (withExperimentalFeatures && isSelected) {
      cellRef.current.focus();
    }
  }, [withExperimentalFeatures, isSelected]);
  var highlightBlock = withExperimentalPersistentListViewFeatures ? toggleBlockHighlight : function () {};

  var onMouseEnter = function onMouseEnter() {
    setIsHovered(true);
    highlightBlock(clientId, true);
  };

  var onMouseLeave = function onMouseLeave() {
    setIsHovered(false);
    highlightBlock(clientId, false);
  };

  var classes = classnames({
    'is-selected': isSelected,
    'is-branch-selected': withExperimentalPersistentListViewFeatures && isBranchSelected,
    'is-last-of-selected-branch': withExperimentalPersistentListViewFeatures && isLastOfSelectedBranch,
    'is-dragging': isDragging
  });
  return createElement(BlockNavigationLeaf, {
    className: classes,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onFocus: onMouseEnter,
    onBlur: onMouseLeave,
    level: level,
    position: position,
    rowCount: rowCount,
    path: path,
    id: "block-navigation-block-".concat(clientId),
    "data-block": clientId
  }, createElement(TreeGridCell, {
    className: "block-editor-block-navigation-block__contents-cell",
    colSpan: hasRenderedMovers ? undefined : 2,
    ref: cellRef
  }, function (_ref2) {
    var ref = _ref2.ref,
        tabIndex = _ref2.tabIndex,
        onFocus = _ref2.onFocus;
    return createElement("div", {
      className: "block-editor-block-navigation-block__contents-container"
    }, createElement(BlockNavigationBlockContents, {
      block: block,
      onClick: function onClick() {
        return _onClick(block.clientId);
      },
      isSelected: isSelected,
      position: position,
      siblingBlockCount: siblingBlockCount,
      level: level,
      ref: ref,
      tabIndex: tabIndex,
      onFocus: onFocus
    }));
  }), hasRenderedMovers && createElement(Fragment, null, createElement(TreeGridCell, {
    className: moverCellClassName,
    withoutGridItem: true
  }, createElement(TreeGridItem, null, function (_ref3) {
    var ref = _ref3.ref,
        tabIndex = _ref3.tabIndex,
        onFocus = _ref3.onFocus;
    return createElement(BlockMoverUpButton, {
      orientation: "vertical",
      clientIds: [clientId],
      ref: ref,
      tabIndex: tabIndex,
      onFocus: onFocus
    });
  }), createElement(TreeGridItem, null, function (_ref4) {
    var ref = _ref4.ref,
        tabIndex = _ref4.tabIndex,
        onFocus = _ref4.onFocus;
    return createElement(BlockMoverDownButton, {
      orientation: "vertical",
      clientIds: [clientId],
      ref: ref,
      tabIndex: tabIndex,
      onFocus: onFocus
    });
  }))), withExperimentalFeatures && createElement(TreeGridCell, {
    className: blockNavigationBlockSettingsClassName
  }, function (_ref5) {
    var ref = _ref5.ref,
        tabIndex = _ref5.tabIndex,
        onFocus = _ref5.onFocus;
    return createElement(BlockSettingsDropdown, {
      clientIds: [clientId],
      icon: moreVertical,
      toggleProps: {
        ref: ref,
        tabIndex: tabIndex,
        onFocus: onFocus
      },
      disableOpenOnArrowDown: true,
      __experimentalSelectBlock: _onClick
    }, function (_ref6) {
      var onClose = _ref6.onClose;
      return createElement(MenuGroup, null, createElement(MenuItem, {
        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _iterator, _step, parent;

          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!blockParents.length) {
                    _context.next = 20;
                    break;
                  }

                  // If the block to select is inside a dropdown, we need to open the dropdown.
                  // Otherwise focus won't transfer to the block.
                  _iterator = _createForOfIteratorHelper(blockParents);
                  _context.prev = 2;

                  _iterator.s();

                case 4:
                  if ((_step = _iterator.n()).done) {
                    _context.next = 10;
                    break;
                  }

                  parent = _step.value;
                  _context.next = 8;
                  return selectEditorBlock(parent);

                case 8:
                  _context.next = 4;
                  break;

                case 10:
                  _context.next = 15;
                  break;

                case 12:
                  _context.prev = 12;
                  _context.t0 = _context["catch"](2);

                  _iterator.e(_context.t0);

                case 15:
                  _context.prev = 15;

                  _iterator.f();

                  return _context.finish(15);

                case 18:
                  _context.next = 22;
                  break;

                case 20:
                  _context.next = 22;
                  return selectEditorBlock(null);

                case 22:
                  _context.next = 24;
                  return selectEditorBlock(clientId);

                case 24:
                  onClose();

                case 25:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[2, 12, 15, 18]]);
        }))
      }, __('Go to block')));
    });
  }));
}
//# sourceMappingURL=block.js.map