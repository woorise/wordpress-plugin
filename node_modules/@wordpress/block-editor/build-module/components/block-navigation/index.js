import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { isArray, noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { useDispatch, useSelect } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import BlockNavigationTree from './tree';
import { isClientIdSelected } from './utils';
import { store as blockEditorStore } from '../../store';
export default function BlockNavigation(_ref) {
  var _ref$onSelect = _ref.onSelect,
      onSelect = _ref$onSelect === void 0 ? noop : _ref$onSelect,
      __experimentalFeatures = _ref.__experimentalFeatures;

  var _useSelect = useSelect(function (select) {
    var _select = select(blockEditorStore),
        getBlockHierarchyRootClientId = _select.getBlockHierarchyRootClientId,
        getSelectedBlockClientId = _select.getSelectedBlockClientId,
        __unstableGetClientIdsTree = _select.__unstableGetClientIdsTree,
        __unstableGetClientIdWithClientIdsTree = _select.__unstableGetClientIdWithClientIdsTree;

    var _selectedBlockClientId = getSelectedBlockClientId();

    var _rootBlocks = __unstableGetClientIdsTree();

    var _rootBlock = selectedBlockClientId && !isArray(selectedBlockClientId) ? __unstableGetClientIdWithClientIdsTree(getBlockHierarchyRootClientId(_selectedBlockClientId)) : null;

    return {
      rootBlock: _rootBlock,
      rootBlocks: _rootBlocks,
      selectedBlockClientId: _selectedBlockClientId
    };
  }),
      rootBlock = _useSelect.rootBlock,
      rootBlocks = _useSelect.rootBlocks,
      selectedBlockClientId = _useSelect.selectedBlockClientId;

  var _useDispatch = useDispatch(blockEditorStore),
      selectBlock = _useDispatch.selectBlock;

  function selectEditorBlock(clientId) {
    selectBlock(clientId);
    onSelect(clientId);
  }

  if (!rootBlocks || rootBlocks.length === 0) {
    return null;
  }

  var hasHierarchy = rootBlock && (!isClientIdSelected(rootBlock.clientId, selectedBlockClientId) || rootBlock.innerBlocks && rootBlock.innerBlocks.length !== 0);
  return createElement("div", {
    className: "block-editor-block-navigation__container"
  }, createElement("p", {
    className: "block-editor-block-navigation__label"
  }, __('List view')), createElement(BlockNavigationTree, {
    blocks: hasHierarchy ? [rootBlock] : rootBlocks,
    selectedBlockClientIds: [selectedBlockClientId],
    selectBlock: selectEditorBlock,
    __experimentalFeatures: __experimentalFeatures,
    showNestedBlocks: true
  }));
}
//# sourceMappingURL=index.js.map