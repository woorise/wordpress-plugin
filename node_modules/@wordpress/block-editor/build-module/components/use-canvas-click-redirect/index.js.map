{"version":3,"sources":["@wordpress/block-editor/src/components/use-canvas-click-redirect/index.js"],"names":["overEvery","findLast","useRefEffect","focus","isTextField","placeCaretAtHorizontalEdge","isTabbableTextField","tabbable","isTabbableIndex","useCanvasClickRedirect","node","onMouseDown","event","target","focusableNodes","focusable","find","preventDefault","addEventListener"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,QAApC;AAEA;AACA;AACA;;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,0BAA7B,QAA+D,gBAA/D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,mBAAmB,GAAGN,SAAS,CAAE,CACtCI,WADsC,EAEtCD,KAAK,CAACI,QAAN,CAAeC,eAFuB,CAAF,CAArC;AAKA,OAAO,SAASC,sBAAT,GAAkC;AACxC,SAAOP,YAAY,CAAE,UAAEQ,IAAF,EAAY;AAChC,aAASC,WAAT,CAAsBC,KAAtB,EAA8B;AAC7B;AACA,UAAKA,KAAK,CAACC,MAAN,KAAiBH,IAAtB,EAA6B;AAC5B;AACA;;AAED,UAAMI,cAAc,GAAGX,KAAK,CAACY,SAAN,CAAgBC,IAAhB,CAAsBN,IAAtB,CAAvB;AACA,UAAMG,MAAM,GAAGZ,QAAQ,CAAEa,cAAF,EAAkBR,mBAAlB,CAAvB;;AAEA,UAAK,CAAEO,MAAP,EAAgB;AACf;AACA;;AAEDR,MAAAA,0BAA0B,CAAEQ,MAAF,EAAU,IAAV,CAA1B;AACAD,MAAAA,KAAK,CAACK,cAAN;AACA;;AAEDP,IAAAA,IAAI,CAACQ,gBAAL,CAAuB,WAAvB,EAAoCP,WAApC;AAEA,WAAO,YAAM;AACZD,MAAAA,IAAI,CAACQ,gBAAL,CAAuB,WAAvB,EAAoCP,WAApC;AACA,KAFD;AAGA,GAvBkB,EAuBhB,EAvBgB,CAAnB;AAwBA","sourcesContent":["/**\n * External dependencies\n */\nimport { overEvery, findLast } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useRefEffect } from '@wordpress/compose';\nimport { focus, isTextField, placeCaretAtHorizontalEdge } from '@wordpress/dom';\n\n/**\n * Given an element, returns true if the element is a tabbable text field, or\n * false otherwise.\n *\n * @param {Element} element Element to test.\n *\n * @return {boolean} Whether element is a tabbable text field.\n */\nconst isTabbableTextField = overEvery( [\n\tisTextField,\n\tfocus.tabbable.isTabbableIndex,\n] );\n\nexport function useCanvasClickRedirect() {\n\treturn useRefEffect( ( node ) => {\n\t\tfunction onMouseDown( event ) {\n\t\t\t// Only handle clicks on the canvas, not the content.\n\t\t\tif ( event.target !== node ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst focusableNodes = focus.focusable.find( node );\n\t\t\tconst target = findLast( focusableNodes, isTabbableTextField );\n\n\t\t\tif ( ! target ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tplaceCaretAtHorizontalEdge( target, true );\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tnode.addEventListener( 'mousedown', onMouseDown );\n\n\t\treturn () => {\n\t\t\tnode.addEventListener( 'mousedown', onMouseDown );\n\t\t};\n\t}, [] );\n}\n"]}