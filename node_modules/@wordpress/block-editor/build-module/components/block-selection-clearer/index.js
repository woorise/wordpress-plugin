import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useSelect, useDispatch } from '@wordpress/data';
import { useRefEffect } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../../store';
export function useBlockSelectionClearer() {
  var hasSelection = useSelect(function (select) {
    var _select = select(blockEditorStore),
        hasSelectedBlock = _select.hasSelectedBlock,
        hasMultiSelection = _select.hasMultiSelection;

    return hasSelectedBlock() || hasMultiSelection();
  });

  var _useDispatch = useDispatch(blockEditorStore),
      clearSelectedBlock = _useDispatch.clearSelectedBlock;

  return useRefEffect(function (node) {
    if (!hasSelection) {
      return;
    }

    function onMouseDown(event) {
      // Only handle clicks on the canvas, not the content.
      if (event.target.closest('.wp-block')) {
        return;
      }

      clearSelectedBlock();
    }

    node.addEventListener('mousedown', onMouseDown);
    return function () {
      node.removeEventListener('mousedown', onMouseDown);
    };
  }, [hasSelection, clearSelectedBlock]);
}
export default function BlockSelectionClearer(props) {
  return createElement("div", _extends({
    ref: useBlockSelectionClearer()
  }, props));
}
//# sourceMappingURL=index.js.map