import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { MenuGroup, MenuItem } from '@wordpress/components';
import { getBlockMenuDefaultClassName, switchToBlockType } from '@wordpress/blocks';
import { useState } from '@wordpress/element';
/**
 * Internal dependencies
 */

import BlockIcon from '../block-icon';
import PreviewBlockPopover from './preview-block-popover';

var BlockTransformationsMenu = function BlockTransformationsMenu(_ref) {
  var className = _ref.className,
      possibleBlockTransformations = _ref.possibleBlockTransformations,
      onSelect = _ref.onSelect,
      blocks = _ref.blocks;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      hoveredTransformItemName = _useState2[0],
      setHoveredTransformItemName = _useState2[1];

  return createElement(MenuGroup, {
    label: __('Transform to'),
    className: className
  }, hoveredTransformItemName && createElement(PreviewBlockPopover, {
    blocks: switchToBlockType(blocks, hoveredTransformItemName)
  }), possibleBlockTransformations.map(function (item) {
    var name = item.name,
        icon = item.icon,
        title = item.title,
        isDisabled = item.isDisabled;
    return createElement(MenuItem, {
      key: name,
      className: getBlockMenuDefaultClassName(name),
      onClick: function onClick(event) {
        event.preventDefault();
        onSelect(name);
      },
      disabled: isDisabled,
      onMouseLeave: function onMouseLeave() {
        return setHoveredTransformItemName(null);
      },
      onMouseEnter: function onMouseEnter() {
        return setHoveredTransformItemName(name);
      }
    }, createElement(BlockIcon, {
      icon: icon,
      showColors: true
    }), title);
  }));
};

export default BlockTransformationsMenu;
//# sourceMappingURL=block-transformations-menu.js.map