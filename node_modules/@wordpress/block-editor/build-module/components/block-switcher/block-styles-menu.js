import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { MenuGroup } from '@wordpress/components';
import { useState } from '@wordpress/element';
import { useSelect } from '@wordpress/data';
import { cloneBlock, getBlockFromExample, store as blocksStore } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import BlockStyles from '../block-styles';
import PreviewBlockPopover from './preview-block-popover';
export default function BlockStylesMenu(_ref) {
  var hoveredBlock = _ref.hoveredBlock,
      onSwitch = _ref.onSwitch;
  var name = hoveredBlock.name,
      clientId = hoveredBlock.clientId;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      hoveredClassName = _useState2[0],
      setHoveredClassName = _useState2[1];

  var blockType = useSelect(function (select) {
    return select(blocksStore).getBlockType(name);
  }, [name]);
  return createElement(MenuGroup, {
    label: __('Styles'),
    className: "block-editor-block-switcher__styles__menugroup"
  }, hoveredClassName && createElement(PreviewBlockPopover, {
    blocks: blockType.example ? getBlockFromExample(blockType.name, {
      attributes: _objectSpread(_objectSpread({}, blockType.example.attributes), {}, {
        className: hoveredClassName
      }),
      innerBlocks: blockType.example.innerBlocks
    }) : cloneBlock(hoveredBlock, {
      className: hoveredClassName
    })
  }), createElement(BlockStyles, {
    clientId: clientId,
    onSwitch: onSwitch,
    onHoverClassName: setHoveredClassName,
    itemRole: "menuitem"
  }));
}
//# sourceMappingURL=block-styles-menu.js.map