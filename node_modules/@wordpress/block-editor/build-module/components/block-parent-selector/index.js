import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { getBlockType, store as blocksStore } from '@wordpress/blocks';
import { ToolbarButton } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { __, sprintf } from '@wordpress/i18n';
import { useRef } from '@wordpress/element';
/**
 * Internal dependencies
 */

import BlockIcon from '../block-icon';
import { useShowMoversGestures } from '../block-toolbar/utils';
import { store as blockEditorStore } from '../../store';
/**
 * Block parent selector component, displaying the hierarchy of the
 * current block selection as a single icon to "go up" a level.
 *
 * @return {WPComponent} Parent block selector.
 */

export default function BlockParentSelector() {
  var _useDispatch = useDispatch(blockEditorStore),
      selectBlock = _useDispatch.selectBlock,
      toggleBlockHighlight = _useDispatch.toggleBlockHighlight;

  var _useSelect = useSelect(function (select) {
    var _select = select(blockEditorStore),
        getBlockName = _select.getBlockName,
        getBlockParents = _select.getBlockParents,
        getSelectedBlockClientId = _select.getSelectedBlockClientId,
        getSettings = _select.getSettings;

    var _select2 = select(blocksStore),
        hasBlockSupport = _select2.hasBlockSupport;

    var selectedBlockClientId = getSelectedBlockClientId();
    var parents = getBlockParents(selectedBlockClientId);
    var _firstParentClientId = parents[parents.length - 1];
    var parentBlockName = getBlockName(_firstParentClientId);

    var _parentBlockType = getBlockType(parentBlockName);

    var settings = getSettings();
    return {
      parentBlockType: _parentBlockType,
      firstParentClientId: _firstParentClientId,
      shouldHide: !hasBlockSupport(_parentBlockType, '__experimentalParentSelector', true),
      hasReducedUI: settings.hasReducedUI
    };
  }, []),
      parentBlockType = _useSelect.parentBlockType,
      firstParentClientId = _useSelect.firstParentClientId,
      shouldHide = _useSelect.shouldHide,
      hasReducedUI = _useSelect.hasReducedUI; // Allows highlighting the parent block outline when focusing or hovering
  // the parent block selector within the child.


  var nodeRef = useRef();

  var _useShowMoversGesture = useShowMoversGestures({
    ref: nodeRef,
    onChange: function onChange(isFocused) {
      if (isFocused && hasReducedUI) {
        return;
      }

      toggleBlockHighlight(firstParentClientId, isFocused);
    }
  }),
      showMoversGestures = _useShowMoversGesture.gestures;

  if (shouldHide) {
    return null;
  }

  if (firstParentClientId !== undefined) {
    return createElement("div", _extends({
      className: "block-editor-block-parent-selector",
      key: firstParentClientId,
      ref: nodeRef
    }, showMoversGestures), createElement(ToolbarButton, {
      className: "block-editor-block-parent-selector__button",
      onClick: function onClick() {
        return selectBlock(firstParentClientId);
      },
      label: sprintf(
      /* translators: %s: Name of the block's parent. */
      __('Select %s'), parentBlockType.title),
      showTooltip: true,
      icon: createElement(BlockIcon, {
        icon: parentBlockType.icon
      })
    }));
  }

  return null;
}
//# sourceMappingURL=index.js.map