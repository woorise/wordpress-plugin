import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { orderBy, isEmpty } from 'lodash';
/**
 * WordPress dependencies
 */

import { useMemo, useEffect } from '@wordpress/element';
import { __, _n, sprintf } from '@wordpress/i18n';
import { VisuallyHidden } from '@wordpress/components';
import { useDebounce, useAsyncList } from '@wordpress/compose';
import { speak } from '@wordpress/a11y';
/**
 * Internal dependencies
 */

import BlockTypesList from '../block-types-list';
import BlockPatternsList from '../block-patterns-list';
import __experimentalInserterMenuExtension from '../inserter-menu-extension';
import InserterPanel from './panel';
import InserterNoResults from './no-results';
import useInsertionPoint from './hooks/use-insertion-point';
import usePatternsState from './hooks/use-patterns-state';
import useBlockTypesState from './hooks/use-block-types-state';
import { searchBlockItems, searchItems } from './search-items';
import InserterListbox from '../inserter-listbox';

function InserterSearchResults(_ref) {
  var filterValue = _ref.filterValue,
      onSelect = _ref.onSelect,
      onHover = _ref.onHover,
      rootClientId = _ref.rootClientId,
      clientId = _ref.clientId,
      isAppender = _ref.isAppender,
      maxBlockPatterns = _ref.maxBlockPatterns,
      maxBlockTypes = _ref.maxBlockTypes,
      _ref$showBlockDirecto = _ref.showBlockDirectory,
      showBlockDirectory = _ref$showBlockDirecto === void 0 ? false : _ref$showBlockDirecto,
      _ref$isDraggable = _ref.isDraggable,
      isDraggable = _ref$isDraggable === void 0 ? true : _ref$isDraggable,
      _ref$shouldFocusBlock = _ref.shouldFocusBlock,
      shouldFocusBlock = _ref$shouldFocusBlock === void 0 ? true : _ref$shouldFocusBlock;
  var debouncedSpeak = useDebounce(speak, 500);

  var _useInsertionPoint = useInsertionPoint({
    onSelect: onSelect,
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender,
    shouldFocusBlock: shouldFocusBlock
  }),
      _useInsertionPoint2 = _slicedToArray(_useInsertionPoint, 2),
      destinationRootClientId = _useInsertionPoint2[0],
      onInsertBlocks = _useInsertionPoint2[1];

  var _useBlockTypesState = useBlockTypesState(destinationRootClientId, onInsertBlocks),
      _useBlockTypesState2 = _slicedToArray(_useBlockTypesState, 4),
      blockTypes = _useBlockTypesState2[0],
      blockTypeCategories = _useBlockTypesState2[1],
      blockTypeCollections = _useBlockTypesState2[2],
      onSelectBlockType = _useBlockTypesState2[3];

  var _usePatternsState = usePatternsState(onInsertBlocks, destinationRootClientId),
      _usePatternsState2 = _slicedToArray(_usePatternsState, 3),
      patterns = _usePatternsState2[0],
      onSelectBlockPattern = _usePatternsState2[2];

  var filteredBlockTypes = useMemo(function () {
    var results = searchBlockItems(orderBy(blockTypes, ['frecency'], ['desc']), blockTypeCategories, blockTypeCollections, filterValue);
    return maxBlockTypes !== undefined ? results.slice(0, maxBlockTypes) : results;
  }, [filterValue, blockTypes, blockTypeCategories, blockTypeCollections, maxBlockTypes]);
  var filteredBlockPatterns = useMemo(function () {
    var results = searchItems(patterns, filterValue);
    return maxBlockPatterns !== undefined ? results.slice(0, maxBlockPatterns) : results;
  }, [filterValue, patterns, maxBlockPatterns]); // Announce search results on change

  useEffect(function () {
    if (!filterValue) {
      return;
    }

    var count = filteredBlockTypes.length + filteredBlockPatterns.length;
    var resultsFoundMessage = sprintf(
    /* translators: %d: number of results. */
    _n('%d result found.', '%d results found.', count), count);
    debouncedSpeak(resultsFoundMessage);
  }, [filterValue, debouncedSpeak]);
  var currentShownPatterns = useAsyncList(filteredBlockPatterns);
  var hasItems = !isEmpty(filteredBlockTypes) || !isEmpty(filteredBlockPatterns);
  return createElement(InserterListbox, null, !showBlockDirectory && !hasItems && createElement(InserterNoResults, null), !!filteredBlockTypes.length && createElement(InserterPanel, {
    title: createElement(VisuallyHidden, null, __('Blocks'))
  }, createElement(BlockTypesList, {
    items: filteredBlockTypes,
    onSelect: onSelectBlockType,
    onHover: onHover,
    label: __('Blocks'),
    isDraggable: isDraggable
  })), !!filteredBlockTypes.length && !!filteredBlockPatterns.length && createElement("div", {
    className: "block-editor-inserter__quick-inserter-separator"
  }), !!filteredBlockPatterns.length && createElement(InserterPanel, {
    title: createElement(VisuallyHidden, null, __('Block Patterns'))
  }, createElement("div", {
    className: "block-editor-inserter__quick-inserter-patterns"
  }, createElement(BlockPatternsList, {
    shownPatterns: currentShownPatterns,
    blockPatterns: filteredBlockPatterns,
    onClickPattern: onSelectBlockPattern,
    isDraggable: isDraggable
  }))), showBlockDirectory && createElement(__experimentalInserterMenuExtension.Slot, {
    fillProps: {
      onSelect: onSelectBlockType,
      onHover: onHover,
      filterValue: filterValue,
      hasItems: hasItems,
      rootClientId: destinationRootClientId
    }
  }, function (fills) {
    if (fills.length) {
      return fills;
    }

    if (!hasItems) {
      return createElement(InserterNoResults, null);
    }

    return null;
  }));
}

export default InserterSearchResults;
//# sourceMappingURL=search-results.js.map