import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useState, useEffect } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { Button } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
/**
 * Internal dependencies
 */

import InserterSearchForm from './search-form';
import InserterSearchResults from './search-results';
import useInsertionPoint from './hooks/use-insertion-point';
import usePatternsState from './hooks/use-patterns-state';
import useBlockTypesState from './hooks/use-block-types-state';
import { store as blockEditorStore } from '../../store';
var SEARCH_THRESHOLD = 6;
var SHOWN_BLOCK_TYPES = 6;
var SHOWN_BLOCK_PATTERNS = 2;
export default function QuickInserter(_ref) {
  var onSelect = _ref.onSelect,
      rootClientId = _ref.rootClientId,
      clientId = _ref.clientId,
      isAppender = _ref.isAppender;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      filterValue = _useState2[0],
      setFilterValue = _useState2[1];

  var _useInsertionPoint = useInsertionPoint({
    onSelect: onSelect,
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender
  }),
      _useInsertionPoint2 = _slicedToArray(_useInsertionPoint, 2),
      destinationRootClientId = _useInsertionPoint2[0],
      onInsertBlocks = _useInsertionPoint2[1];

  var _useBlockTypesState = useBlockTypesState(destinationRootClientId, onInsertBlocks),
      _useBlockTypesState2 = _slicedToArray(_useBlockTypesState, 1),
      blockTypes = _useBlockTypesState2[0];

  var _usePatternsState = usePatternsState(onInsertBlocks, destinationRootClientId),
      _usePatternsState2 = _slicedToArray(_usePatternsState, 1),
      patterns = _usePatternsState2[0];

  var showPatterns = patterns.length && !!filterValue;
  var showSearch = showPatterns && patterns.length > SEARCH_THRESHOLD || blockTypes.length > SEARCH_THRESHOLD;

  var _useSelect = useSelect(function (select) {
    var _select = select(blockEditorStore),
        getSettings = _select.getSettings,
        getBlockIndex = _select.getBlockIndex;

    return {
      setInserterIsOpened: getSettings().__experimentalSetIsInserterOpened,
      blockIndex: getBlockIndex(clientId, rootClientId)
    };
  }, [clientId, rootClientId]),
      setInserterIsOpened = _useSelect.setInserterIsOpened,
      blockIndex = _useSelect.blockIndex;

  useEffect(function () {
    if (setInserterIsOpened) {
      setInserterIsOpened(false);
    }
  }, [setInserterIsOpened]);

  var _useDispatch = useDispatch(blockEditorStore),
      __unstableSetInsertionPoint = _useDispatch.__unstableSetInsertionPoint; // When clicking Browse All select the appropriate block so as
  // the insertion point can work as expected


  var onBrowseAll = function onBrowseAll() {
    __unstableSetInsertionPoint(rootClientId, blockIndex);

    setInserterIsOpened(true);
  };

  return createElement("div", {
    className: classnames('block-editor-inserter__quick-inserter', {
      'has-search': showSearch,
      'has-expand': setInserterIsOpened
    })
  }, showSearch && createElement(InserterSearchForm, {
    value: filterValue,
    onChange: function onChange(value) {
      setFilterValue(value);
    },
    label: __('Search for blocks and patterns'),
    placeholder: __('Search')
  }), createElement("div", {
    className: "block-editor-inserter__quick-inserter-results"
  }, createElement(InserterSearchResults, {
    filterValue: filterValue,
    onSelect: onSelect,
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender,
    maxBlockPatterns: showPatterns ? SHOWN_BLOCK_PATTERNS : 0,
    maxBlockTypes: SHOWN_BLOCK_TYPES,
    isDraggable: false
  })), setInserterIsOpened && createElement(Button, {
    className: "block-editor-inserter__quick-inserter-expand",
    onClick: onBrowseAll,
    "aria-label": __('Browse all. This will open the main inserter panel in the editor toolbar.')
  }, __('Browse all')));
}
//# sourceMappingURL=quick-inserter.js.map