import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { fromPairs } from 'lodash';
/**
 * WordPress dependencies
 */

import { useMemo, useCallback, useEffect } from '@wordpress/element';
import { _x } from '@wordpress/i18n';
import { useAsyncList } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import PatternInserterPanel from './pattern-panel';
import usePatternsState from './hooks/use-patterns-state';
import BlockPatternList from '../block-patterns-list';

function BlockPatternsCategory(_ref) {
  var rootClientId = _ref.rootClientId,
      onInsert = _ref.onInsert,
      selectedCategory = _ref.selectedCategory,
      onClickCategory = _ref.onClickCategory;

  var _usePatternsState = usePatternsState(onInsert, rootClientId),
      _usePatternsState2 = _slicedToArray(_usePatternsState, 3),
      allPatterns = _usePatternsState2[0],
      allCategories = _usePatternsState2[1],
      onClick = _usePatternsState2[2]; // Remove any empty categories


  var populatedCategories = useMemo(function () {
    return allCategories.filter(function (category) {
      return allPatterns.some(function (pattern) {
        var _pattern$categories;

        return (_pattern$categories = pattern.categories) === null || _pattern$categories === void 0 ? void 0 : _pattern$categories.includes(category.name);
      });
    });
  }, [allPatterns, allCategories]);
  var patternCategory = selectedCategory ? selectedCategory : populatedCategories[0];
  useEffect(function () {
    if (allPatterns.some(function (pattern) {
      return getPatternIndex(pattern) === Infinity;
    }) && !populatedCategories.find(function (category) {
      return category.name === 'uncategorized';
    })) {
      populatedCategories.push({
        name: 'uncategorized',
        label: _x('Uncategorized')
      });
    }
  }, [populatedCategories, allPatterns]);
  var getPatternIndex = useCallback(function (pattern) {
    if (!pattern.categories || !pattern.categories.length) {
      return Infinity;
    }

    var indexedCategories = fromPairs(populatedCategories.map(function (_ref2, index) {
      var name = _ref2.name;
      return [name, index];
    }));
    return Math.min.apply(Math, _toConsumableArray(pattern.categories.map(function (cat) {
      return indexedCategories[cat] !== undefined ? indexedCategories[cat] : Infinity;
    })));
  }, [populatedCategories]);
  var currentCategoryPatterns = useMemo(function () {
    return allPatterns.filter(function (pattern) {
      return patternCategory.name === 'uncategorized' ? getPatternIndex(pattern) === Infinity : pattern.categories && pattern.categories.includes(patternCategory.name);
    });
  }, [allPatterns, patternCategory]); // Ordering the patterns is important for the async rendering.

  var orderedPatterns = useMemo(function () {
    return currentCategoryPatterns.sort(function (a, b) {
      return getPatternIndex(a) - getPatternIndex(b);
    });
  }, [currentCategoryPatterns, getPatternIndex]);
  var currentShownPatterns = useAsyncList(orderedPatterns);
  return createElement(Fragment, null, !!currentCategoryPatterns.length && createElement(PatternInserterPanel, {
    selectedCategory: patternCategory,
    patternCategories: populatedCategories,
    onClickCategory: onClickCategory
  }, createElement(BlockPatternList, {
    shownPatterns: currentShownPatterns,
    blockPatterns: currentCategoryPatterns,
    onClickPattern: onClick,
    label: patternCategory.label,
    orientation: "vertical",
    isDraggable: true
  })));
}

function BlockPatternsTabs(_ref3) {
  var rootClientId = _ref3.rootClientId,
      onInsert = _ref3.onInsert,
      onClickCategory = _ref3.onClickCategory,
      selectedCategory = _ref3.selectedCategory;
  return createElement(BlockPatternsCategory, {
    rootClientId: rootClientId,
    selectedCategory: selectedCategory,
    onInsert: onInsert,
    onClickCategory: onClickCategory
  });
}

export default BlockPatternsTabs;
//# sourceMappingURL=block-patterns-tab.js.map