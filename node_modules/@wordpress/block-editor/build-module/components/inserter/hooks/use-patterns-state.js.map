{"version":3,"sources":["@wordpress/block-editor/src/components/inserter/hooks/use-patterns-state.js"],"names":["map","useCallback","cloneBlock","useDispatch","useSelect","__","sprintf","store","noticesStore","blockEditorStore","usePatternsState","onInsert","rootClientId","select","__experimentalGetAllowedPatterns","getSettings","inserterPatterns","filter","pattern","scope","inserter","patterns","patternCategories","__experimentalBlockPatternCategories","createSuccessNotice","onClickPattern","blocks","block","name","title","type"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,GAAT,QAAoB,QAApB;AAEA;AACA;AACA;;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,iBAAvC;AACA,SAASC,EAAT,EAAaC,OAAb,QAA4B,iBAA5B;AACA,SAASC,KAAK,IAAIC,YAAlB,QAAsC,oBAAtC;AAEA;AACA;AACA;;AACA,SAASD,KAAK,IAAIE,gBAAlB,QAA0C,gBAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAEC,QAAF,EAAYC,YAAZ,EAA8B;AAAA,mBACdR,SAAS,CAChD,UAAES,MAAF,EAAc;AAAA,kBAC6CA,MAAM,CAC/DJ,gBAD+D,CADnD;AAAA,QACLK,gCADK,WACLA,gCADK;AAAA,QAC6BC,WAD7B,WAC6BA,WAD7B;;AAIb,QAAMC,gBAAgB,GAAGF,gCAAgC,CACxDF,YADwD,CAAhC,CAEvBK,MAFuB,CAGxB,UAAEC,OAAF;AAAA,aAAe,CAAEA,OAAO,CAACC,KAAV,IAAmBD,OAAO,CAACC,KAAR,CAAcC,QAAhD;AAAA,KAHwB,CAAzB;;AAKA,WAAO;AACNC,MAAAA,QAAQ,EAAEL,gBADJ;AAENM,MAAAA,iBAAiB,EAAEP,WAAW,GAC5BQ;AAHI,KAAP;AAKA,GAf+C,EAgBhD,CAAEX,YAAF,CAhBgD,CADK;AAAA,MAC9CU,iBAD8C,cAC9CA,iBAD8C;AAAA,MAC3BD,QAD2B,cAC3BA,QAD2B;;AAAA,qBAmBtBlB,WAAW,CAAEK,YAAF,CAnBW;AAAA,MAmB9CgB,mBAnB8C,gBAmB9CA,mBAnB8C;;AAoBtD,MAAMC,cAAc,GAAGxB,WAAW,CAAE,UAAEiB,OAAF,EAAWQ,MAAX,EAAuB;AAC1Df,IAAAA,QAAQ,CACPX,GAAG,CAAE0B,MAAF,EAAU,UAAEC,KAAF;AAAA,aAAazB,UAAU,CAAEyB,KAAF,CAAvB;AAAA,KAAV,CADI,EAEPT,OAAO,CAACU,IAFD,CAAR;AAIAJ,IAAAA,mBAAmB,CAClBlB,OAAO;AACN;AACAD,IAAAA,EAAE,CAAE,8BAAF,CAFI,EAGNa,OAAO,CAACW,KAHF,CADW,EAMlB;AACCC,MAAAA,IAAI,EAAE;AADP,KANkB,CAAnB;AAUA,GAfiC,EAe/B,EAf+B,CAAlC;AAiBA,SAAO,CAAET,QAAF,EAAYC,iBAAZ,EAA+BG,cAA/B,CAAP;AACA,CAtCD;;AAwCA,eAAef,gBAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { map } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\nimport { cloneBlock } from '@wordpress/blocks';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../../store';\n\n/**\n * Retrieves the block patterns inserter state.\n *\n * @param {Function} onInsert     function called when inserter a list of blocks.\n * @param {string=}  rootClientId Insertion's root client ID.\n *\n * @return {Array} Returns the patterns state. (patterns, categories, onSelect handler)\n */\nconst usePatternsState = ( onInsert, rootClientId ) => {\n\tconst { patternCategories, patterns } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { __experimentalGetAllowedPatterns, getSettings } = select(\n\t\t\t\tblockEditorStore\n\t\t\t);\n\t\t\tconst inserterPatterns = __experimentalGetAllowedPatterns(\n\t\t\t\trootClientId\n\t\t\t).filter(\n\t\t\t\t( pattern ) => ! pattern.scope || pattern.scope.inserter\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tpatterns: inserterPatterns,\n\t\t\t\tpatternCategories: getSettings()\n\t\t\t\t\t.__experimentalBlockPatternCategories,\n\t\t\t};\n\t\t},\n\t\t[ rootClientId ]\n\t);\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\tconst onClickPattern = useCallback( ( pattern, blocks ) => {\n\t\tonInsert(\n\t\t\tmap( blocks, ( block ) => cloneBlock( block ) ),\n\t\t\tpattern.name\n\t\t);\n\t\tcreateSuccessNotice(\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: block pattern title. */\n\t\t\t\t__( 'Block pattern \"%s\" inserted.' ),\n\t\t\t\tpattern.title\n\t\t\t),\n\t\t\t{\n\t\t\t\ttype: 'snackbar',\n\t\t\t}\n\t\t);\n\t}, [] );\n\n\treturn [ patterns, patternCategories, onClickPattern ];\n};\n\nexport default usePatternsState;\n"]}