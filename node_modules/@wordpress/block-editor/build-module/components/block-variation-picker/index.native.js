import _objectDestructuringEmpty from "@babel/runtime/helpers/esm/objectDestructuringEmpty";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { ScrollView, View, Text, TouchableWithoutFeedback, Platform } from 'react-native';
/**
 * WordPress dependencies
 */

import { withSelect, useDispatch } from '@wordpress/data';
import { compose, usePreferredColorSchemeStyle } from '@wordpress/compose';
import { createBlocksFromInnerBlocksTemplate, store as blocksStore } from '@wordpress/blocks';
import { __ } from '@wordpress/i18n';
import { PanelBody, BottomSheet, FooterMessageControl, InserterButton } from '@wordpress/components';
import { Icon, close } from '@wordpress/icons';
import { useMemo } from '@wordpress/element';
/**
 * Internal dependencies
 */

import styles from './style.scss';
import { store as blockEditorStore } from '../../store';
var hitSlop = {
  top: 22,
  bottom: 22,
  left: 22,
  right: 22
};

function BlockVariationPicker(_ref) {
  var isVisible = _ref.isVisible,
      onClose = _ref.onClose,
      clientId = _ref.clientId,
      variations = _ref.variations;

  var _useDispatch = useDispatch(blockEditorStore),
      replaceInnerBlocks = _useDispatch.replaceInnerBlocks;

  var isIOS = Platform.OS === 'ios';
  var cancelButtonStyle = usePreferredColorSchemeStyle(styles.cancelButton, styles.cancelButtonDark);
  var leftButton = useMemo(function () {
    return createElement(TouchableWithoutFeedback, {
      onPress: onClose,
      hitSlop: hitSlop
    }, createElement(View, null, isIOS ? createElement(Text, {
      style: cancelButtonStyle,
      maxFontSizeMultiplier: 2
    }, __('Cancel')) : createElement(Icon, {
      icon: close,
      size: 24,
      style: styles.closeIcon
    })));
  }, [onClose, cancelButtonStyle]);

  var onVariationSelect = function onVariationSelect(variation) {
    replaceInnerBlocks(clientId, createBlocksFromInnerBlocksTemplate(variation.innerBlocks));
    onClose();
  };

  return useMemo(function () {
    return createElement(BottomSheet, {
      isVisible: isVisible,
      onClose: onClose,
      title: __('Select a layout'),
      contentStyle: styles.contentStyle,
      leftButton: leftButton
    }, createElement(ScrollView, {
      horizontal: true,
      showsHorizontalScrollIndicator: false,
      contentContainerStyle: styles.contentContainerStyle,
      style: styles.containerStyle
    }, variations.map(function (v) {
      return createElement(InserterButton, {
        item: v,
        key: v.name,
        onSelect: function onSelect() {
          return onVariationSelect(v);
        }
      });
    })), createElement(PanelBody, null, createElement(FooterMessageControl, {
      label: __('Note: Column layout may vary between themes and screen sizes')
    })));
  }, [variations, isVisible, onClose]);
}

export default compose(withSelect(function (select, _ref2) {
  _objectDestructuringEmpty(_ref2);

  var _select = select(blocksStore),
      getBlockVariations = _select.getBlockVariations;

  return {
    date: getBlockVariations('core/columns', 'block')
  };
}))(BlockVariationPicker);
//# sourceMappingURL=index.native.js.map