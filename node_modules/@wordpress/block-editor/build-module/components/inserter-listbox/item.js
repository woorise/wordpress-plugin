import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { Button, __unstableCompositeItem as CompositeItem } from '@wordpress/components';
import { forwardRef, useContext } from '@wordpress/element';
/**
 * Internal dependencies
 */

import InserterListboxContext from './context';

function InserterListboxItem(_ref, ref) {
  var isFirst = _ref.isFirst,
      Component = _ref.as,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["isFirst", "as", "children"]);

  var state = useContext(InserterListboxContext);
  return createElement(CompositeItem, _extends({
    ref: ref,
    state: state,
    role: "option" // Use the CompositeItem `focusable` prop over Button's
    // isFocusable. The latter was shown to cause an issue
    // with tab order in the inserter list.
    ,
    focusable: true
  }, props), function (htmlProps) {
    var propsWithTabIndex = _objectSpread(_objectSpread({}, htmlProps), {}, {
      tabIndex: isFirst ? 0 : htmlProps.tabIndex
    });

    if (Component) {
      return createElement(Component, propsWithTabIndex, children);
    }

    if (typeof children === 'function') {
      return children(propsWithTabIndex);
    }

    return createElement(Button, propsWithTabIndex, children);
  });
}

export default forwardRef(InserterListboxItem);
//# sourceMappingURL=item.js.map