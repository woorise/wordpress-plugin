import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { store as blocksStore } from '@wordpress/blocks';
import { __ } from '@wordpress/i18n';
import { DropdownMenu, MenuGroup, MenuItemsChoice } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { useState, useEffect } from '@wordpress/element';
import { chevronDown } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import { __experimentalGetMatchingVariation as getMatchingVariation } from '../../utils';
import { store as blockEditorStore } from '../../store';

function __experimentalBlockVariationTransforms(_ref) {
  var blockClientId = _ref.blockClientId;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      selectedValue = _useState2[0],
      setSelectedValue = _useState2[1];

  var _useDispatch = useDispatch(blockEditorStore),
      updateBlockAttributes = _useDispatch.updateBlockAttributes;

  var _useSelect = useSelect(function (select) {
    var _select = select(blocksStore),
        getBlockVariations = _select.getBlockVariations;

    var _select2 = select(blockEditorStore),
        getBlockName = _select2.getBlockName,
        getBlockAttributes = _select2.getBlockAttributes;

    var blockName = blockClientId && getBlockName(blockClientId);
    return {
      variations: blockName && getBlockVariations(blockName, 'transform'),
      blockAttributes: getBlockAttributes(blockClientId)
    };
  }, [blockClientId]),
      variations = _useSelect.variations,
      blockAttributes = _useSelect.blockAttributes;

  useEffect(function () {
    var _getMatchingVariation;

    setSelectedValue((_getMatchingVariation = getMatchingVariation(blockAttributes, variations)) === null || _getMatchingVariation === void 0 ? void 0 : _getMatchingVariation.name);
  }, [blockAttributes, variations]);
  if (!(variations !== null && variations !== void 0 && variations.length)) return null;
  var selectOptions = variations.map(function (_ref2) {
    var name = _ref2.name,
        title = _ref2.title,
        description = _ref2.description;
    return {
      value: name,
      label: title,
      info: description
    };
  });

  var onSelectVariation = function onSelectVariation(variationName) {
    updateBlockAttributes(blockClientId, _objectSpread({}, variations.find(function (_ref3) {
      var name = _ref3.name;
      return name === variationName;
    }).attributes));
  };

  var baseClass = 'block-editor-block-variation-transforms';
  return createElement(DropdownMenu, {
    className: baseClass,
    label: __('Transform to variation'),
    text: __('Transform to variation'),
    popoverProps: {
      position: 'bottom center',
      className: "".concat(baseClass, "__popover")
    },
    icon: chevronDown,
    toggleProps: {
      iconPosition: 'right'
    }
  }, function () {
    return createElement("div", {
      className: "".concat(baseClass, "__container")
    }, createElement(MenuGroup, null, createElement(MenuItemsChoice, {
      choices: selectOptions,
      value: selectedValue,
      onSelect: onSelectVariation
    })));
  });
}

export default __experimentalBlockVariationTransforms;
//# sourceMappingURL=index.js.map