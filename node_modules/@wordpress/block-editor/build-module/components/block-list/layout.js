import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { createContext, useContext } from '@wordpress/element';
export var defaultLayout = {
  type: 'default'
};
var Layout = createContext(defaultLayout);

function appendSelectors(selectors, append) {
  // Ideally we shouldn't need the `.editor-styles-wrapper` increased specificity here
  // The problem though is that we have a `.editor-styles-wrapper p { margin: reset; }` style
  // it's used to reset the default margin added by wp-admin to paragraphs
  // so we need this to be higher speficity otherwise, it won't be applied to paragraphs inside containers
  // When the post editor is fully iframed, this extra classname could be removed.
  return selectors.split(',').map(function (subselector) {
    return ".editor-styles-wrapper ".concat(subselector, " ").concat(append);
  }).join(',');
}
/**
 * Allows to define the layout.
 */


export var LayoutProvider = Layout.Provider;
/**
 * React hook used to retrieve the layout config.
 */

export function useLayout() {
  return useContext(Layout);
}
export function LayoutStyle(_ref) {
  var selector = _ref.selector,
      _ref$layout = _ref.layout,
      layout = _ref$layout === void 0 ? {} : _ref$layout;
  var contentSize = layout.contentSize,
      wideSize = layout.wideSize;
  var style = !!contentSize || !!wideSize ? "\n\t\t\t\t".concat(appendSelectors(selector, '> *'), " {\n\t\t\t\t\tmax-width: ").concat(contentSize !== null && contentSize !== void 0 ? contentSize : wideSize, ";\n\t\t\t\t\tmargin-left: auto;\n\t\t\t\t\tmargin-right: auto;\n\t\t\t\t}\n\n\t\t\t\t").concat(appendSelectors(selector, '> [data-align="wide"]'), "  {\n\t\t\t\t\tmax-width: ").concat(wideSize !== null && wideSize !== void 0 ? wideSize : contentSize, ";\n\t\t\t\t}\n\n\t\t\t\t").concat(appendSelectors(selector, '> [data-align="full"]'), " {\n\t\t\t\t\tmax-width: none;\n\t\t\t\t}\n\t\t\t") : '';
  style += "\n\t\t".concat(appendSelectors(selector, '> [data-align="left"]'), " {\n\t\t\tfloat: left;\n\t\t\tmargin-right: 2em;\n\t\t}\n\n\t\t").concat(appendSelectors(selector, '> [data-align="right"]'), " {\n\t\t\tfloat: right;\n\t\t\tmargin-left: 2em;\n\t\t}\n\t");
  return createElement("style", null, style);
}
//# sourceMappingURL=layout.js.map