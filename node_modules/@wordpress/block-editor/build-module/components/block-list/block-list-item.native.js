import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import { createElement } from "@wordpress/element";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * External dependencies
 */
import { View, Dimensions } from 'react-native';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { withSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose';
import { ReadableContentView, alignmentHelpers } from '@wordpress/components';
/**
 * Internal dependencies
 */

import BlockListBlock from './block';
import BlockInsertionPoint from './insertion-point';
import styles from './block-list-item.native.scss';
import { store as blockEditorStore } from '../../store';
var stretchStyle = {
  flex: 1
};
export var BlockListItem = /*#__PURE__*/function (_Component) {
  _inherits(BlockListItem, _Component);

  var _super = _createSuper(BlockListItem);

  function BlockListItem() {
    _classCallCheck(this, BlockListItem);

    return _super.apply(this, arguments);
  }

  _createClass(BlockListItem, [{
    key: "getMarginHorizontal",
    value: function getMarginHorizontal() {
      var _this$props = this.props,
          blockAlignment = _this$props.blockAlignment,
          marginHorizontal = _this$props.marginHorizontal,
          parentBlockAlignment = _this$props.parentBlockAlignment,
          hasParents = _this$props.hasParents,
          blockName = _this$props.blockName,
          parentBlockName = _this$props.parentBlockName,
          parentWidth = _this$props.parentWidth,
          blockWidth = _this$props.blockWidth;
      var isFullWidth = alignmentHelpers.isFullWidth,
          isWideWidth = alignmentHelpers.isWideWidth,
          isWider = alignmentHelpers.isWider,
          isContainerRelated = alignmentHelpers.isContainerRelated;

      if (isFullWidth(blockAlignment)) {
        if (!hasParents) {
          return 0;
        }

        return marginHorizontal;
      }

      if (isWideWidth(blockAlignment)) {
        return marginHorizontal;
      }

      var screenWidth = Math.floor(Dimensions.get('window').width);

      if (isFullWidth(parentBlockAlignment) && !isWider(blockWidth, 'medium')) {
        if (isContainerRelated(blockName) || isWider(screenWidth, 'mobile')) {
          return marginHorizontal;
        }

        return marginHorizontal * 2;
      }

      if (isContainerRelated(parentBlockName) && !isContainerRelated(blockName)) {
        var isScreenWidthEqual = parentWidth === screenWidth;

        if (isScreenWidthEqual || isWider(screenWidth, 'mobile')) {
          return marginHorizontal * 2;
        }
      }

      return marginHorizontal;
    }
  }, {
    key: "getContentStyles",
    value: function getContentStyles(readableContentViewStyle) {
      var _this$props2 = this.props,
          blockAlignment = _this$props2.blockAlignment,
          blockName = _this$props2.blockName,
          hasParents = _this$props2.hasParents,
          parentBlockName = _this$props2.parentBlockName;
      var isFullWidth = alignmentHelpers.isFullWidth,
          isContainerRelated = alignmentHelpers.isContainerRelated;
      return [readableContentViewStyle, isFullWidth(blockAlignment) && !hasParents && {
        width: styles.fullAlignment.width
      }, !blockAlignment && hasParents && !isContainerRelated(parentBlockName) && isContainerRelated(blockName) && {
        paddingHorizontal: styles.fullAlignmentPadding.paddingLeft
      }];
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          blockAlignment = _this$props3.blockAlignment,
          clientId = _this$props3.clientId,
          isReadOnly = _this$props3.isReadOnly,
          shouldShowInsertionPointBefore = _this$props3.shouldShowInsertionPointBefore,
          shouldShowInsertionPointAfter = _this$props3.shouldShowInsertionPointAfter,
          contentResizeMode = _this$props3.contentResizeMode,
          shouldShowInnerBlockAppender = _this$props3.shouldShowInnerBlockAppender,
          parentWidth = _this$props3.parentWidth,
          marginHorizontal = _this$props3.marginHorizontal,
          blockName = _this$props3.blockName,
          blockWidth = _this$props3.blockWidth,
          restProps = _objectWithoutProperties(_this$props3, ["blockAlignment", "clientId", "isReadOnly", "shouldShowInsertionPointBefore", "shouldShowInsertionPointAfter", "contentResizeMode", "shouldShowInnerBlockAppender", "parentWidth", "marginHorizontal", "blockName", "blockWidth"]);

      var readableContentViewStyle = contentResizeMode === 'stretch' && stretchStyle;
      var isContainerRelated = alignmentHelpers.isContainerRelated;

      if (!blockWidth) {
        return null;
      }

      return createElement(ReadableContentView, {
        align: blockAlignment,
        style: [readableContentViewStyle, isContainerRelated(blockName) && parentWidth && {
          maxWidth: parentWidth + 2 * marginHorizontal
        }]
      }, createElement(View, {
        style: this.getContentStyles(readableContentViewStyle),
        pointerEvents: isReadOnly ? 'box-only' : 'auto',
        onLayout: this.onLayout
      }, shouldShowInsertionPointBefore && createElement(BlockInsertionPoint, null), createElement(BlockListBlock, _extends({
        key: clientId,
        showTitle: false,
        clientId: clientId,
        parentWidth: parentWidth
      }, restProps, {
        marginHorizontal: this.getMarginHorizontal(),
        blockWidth: blockWidth
      })), !shouldShowInnerBlockAppender() && shouldShowInsertionPointAfter && createElement(BlockInsertionPoint, null)));
    }
  }]);

  return BlockListItem;
}(Component);
export default compose([withSelect(function (select, _ref) {
  var rootClientId = _ref.rootClientId,
      isStackedHorizontally = _ref.isStackedHorizontally,
      clientId = _ref.clientId;

  var _select = select(blockEditorStore),
      getBlockOrder = _select.getBlockOrder,
      getBlockInsertionPoint = _select.getBlockInsertionPoint,
      isBlockInsertionPointVisible = _select.isBlockInsertionPointVisible,
      getSettings = _select.getSettings,
      getBlockParents = _select.getBlockParents,
      __unstableGetBlockWithoutInnerBlocks = _select.__unstableGetBlockWithoutInnerBlocks;

  var blockClientIds = getBlockOrder(rootClientId);
  var insertionPoint = getBlockInsertionPoint();
  var blockInsertionPointIsVisible = isBlockInsertionPointVisible();
  var shouldShowInsertionPointBefore = !isStackedHorizontally && blockInsertionPointIsVisible && insertionPoint.rootClientId === rootClientId && ( // if list is empty, show the insertion point (via the default appender)
  blockClientIds.length === 0 || // or if the insertion point is right before the denoted block
  blockClientIds[insertionPoint.index] === clientId);
  var shouldShowInsertionPointAfter = !isStackedHorizontally && blockInsertionPointIsVisible && insertionPoint.rootClientId === rootClientId && // if the insertion point is at the end of the list
  blockClientIds.length === insertionPoint.index && // and the denoted block is the last one on the list, show the indicator at the end of the block
  blockClientIds[insertionPoint.index - 1] === clientId;
  var isReadOnly = getSettings().readOnly;

  var block = __unstableGetBlockWithoutInnerBlocks(clientId);

  var _ref2 = block || {},
      attributes = _ref2.attributes,
      name = _ref2.name;

  var _ref3 = attributes || {},
      align = _ref3.align;

  var parents = getBlockParents(clientId, true);
  var hasParents = !!parents.length;
  var parentBlock = hasParents ? __unstableGetBlockWithoutInnerBlocks(parents[0]) : {};

  var _ref4 = (parentBlock === null || parentBlock === void 0 ? void 0 : parentBlock.attributes) || {},
      parentBlockAlignment = _ref4.align;

  var _ref5 = parentBlock || {},
      parentBlockName = _ref5.name;

  return {
    shouldShowInsertionPointBefore: shouldShowInsertionPointBefore,
    shouldShowInsertionPointAfter: shouldShowInsertionPointAfter,
    isReadOnly: isReadOnly,
    hasParents: hasParents,
    blockAlignment: align,
    parentBlockAlignment: parentBlockAlignment,
    blockName: name,
    parentBlockName: parentBlockName
  };
})])(BlockListItem);
//# sourceMappingURL=block-list-item.native.js.map