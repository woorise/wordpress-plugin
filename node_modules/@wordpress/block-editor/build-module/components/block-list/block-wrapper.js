import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { forwardRef } from '@wordpress/element';
import deprecated from '@wordpress/deprecated';
/**
 * Internal dependencies
 */

import ELEMENTS from './block-wrapper-elements';
import { useBlockProps } from './use-block-props';
var BlockComponent = forwardRef(function (_ref, ref) {
  var children = _ref.children,
      _ref$tagName = _ref.tagName,
      TagName = _ref$tagName === void 0 ? 'div' : _ref$tagName,
      props = _objectWithoutProperties(_ref, ["children", "tagName"]);

  deprecated('wp.blockEditor.__experimentalBlock', {
    since: '5.6',
    alternative: 'wp.blockEditor.useBlockProps'
  });
  var blockProps = useBlockProps(_objectSpread(_objectSpread({}, props), {}, {
    ref: ref
  }));
  return createElement(TagName, blockProps, children);
});
var ExtendedBlockComponent = ELEMENTS.reduce(function (acc, element) {
  acc[element] = forwardRef(function (props, ref) {
    return createElement(BlockComponent, _extends({}, props, {
      ref: ref,
      tagName: element
    }));
  });
  return acc;
}, BlockComponent);
export var Block = ExtendedBlockComponent;
//# sourceMappingURL=block-wrapper.js.map