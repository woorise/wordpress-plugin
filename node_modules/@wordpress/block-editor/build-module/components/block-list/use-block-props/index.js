import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useContext } from '@wordpress/element';
import { __, sprintf } from '@wordpress/i18n';
import { __unstableGetBlockProps as getBlockProps, getBlockType } from '@wordpress/blocks';
import { useMergeRefs } from '@wordpress/compose';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import useMovingAnimation from '../../use-moving-animation';
import { BlockListBlockContext } from '../block';
import { useFocusFirstElement } from './use-focus-first-element';
import { useIsHovered } from './use-is-hovered';
import { useBlockClassNames } from './use-block-class-names';
import { useBlockDefaultClassName } from './use-block-default-class-name';
import { useBlockCustomClassName } from './use-block-custom-class-name';
import { useBlockMovingModeClassNames } from './use-block-moving-mode-class-names';
import { useEventHandlers } from './use-event-handlers';
import { useNavModeExit } from './use-nav-mode-exit';
import { useBlockNodes } from './use-block-nodes';
import { store as blockEditorStore } from '../../../store';
/**
 * If the block count exceeds the threshold, we disable the reordering animation
 * to avoid laginess.
 */

var BLOCK_ANIMATION_THRESHOLD = 200;
/**
 * This hook is used to lightly mark an element as a block element. The element
 * should be the outermost element of a block. Call this hook and pass the
 * returned props to the element to mark as a block. If you define a ref for the
 * element, it is important to pass the ref to this hook, which the hook in turn
 * will pass to the component through the props it returns. Optionally, you can
 * also pass any other props through this hook, and they will be merged and
 * returned.
 *
 * @param {Object}  props   Optional. Props to pass to the element. Must contain
 *                          the ref if one is defined.
 * @param {Object}  options Options for internal use only.
 * @param {boolean} options.__unstableIsHtml
 *
 * @return {Object} Props to pass to the element to mark as a block.
 */

export function useBlockProps() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      __unstableIsHtml = _ref.__unstableIsHtml;

  var _useContext = useContext(BlockListBlockContext),
      clientId = _useContext.clientId,
      index = _useContext.index,
      className = _useContext.className,
      _useContext$wrapperPr = _useContext.wrapperProps,
      wrapperProps = _useContext$wrapperPr === void 0 ? {} : _useContext$wrapperPr;

  var _useSelect = useSelect(function (select) {
    var _select = select(blockEditorStore),
        getBlockMode = _select.getBlockMode,
        getBlockName = _select.getBlockName,
        isTyping = _select.isTyping,
        getGlobalBlockCount = _select.getGlobalBlockCount,
        isBlockSelected = _select.isBlockSelected,
        isBlockMultiSelected = _select.isBlockMultiSelected,
        isAncestorMultiSelected = _select.isAncestorMultiSelected,
        isFirstMultiSelectedBlock = _select.isFirstMultiSelectedBlock;

    var isSelected = isBlockSelected(clientId);
    var isPartOfMultiSelection = isBlockMultiSelected(clientId) || isAncestorMultiSelected(clientId);
    var blockName = getBlockName(clientId);
    return {
      mode: getBlockMode(clientId),
      name: blockName,
      blockTitle: getBlockType(blockName).title,
      isPartOfSelection: isSelected || isPartOfMultiSelection,
      adjustScrolling: isSelected || isFirstMultiSelectedBlock(clientId),
      enableAnimation: !isTyping() && getGlobalBlockCount() <= BLOCK_ANIMATION_THRESHOLD
    };
  }, [clientId]),
      mode = _useSelect.mode,
      name = _useSelect.name,
      blockTitle = _useSelect.blockTitle,
      isPartOfSelection = _useSelect.isPartOfSelection,
      adjustScrolling = _useSelect.adjustScrolling,
      enableAnimation = _useSelect.enableAnimation; // translators: %s: Type of block (i.e. Text, Image etc)


  var blockLabel = sprintf(__('Block: %s'), blockTitle);
  var htmlSuffix = mode === 'html' && !__unstableIsHtml ? '-visual' : '';
  var mergedRefs = useMergeRefs([props.ref, useFocusFirstElement(clientId), useBlockNodes(clientId), useEventHandlers(clientId), useNavModeExit(clientId), useIsHovered(), useMovingAnimation({
    isSelected: isPartOfSelection,
    adjustScrolling: adjustScrolling,
    enableAnimation: enableAnimation,
    triggerAnimationOnChange: index
  })]);
  return _objectSpread(_objectSpread(_objectSpread({}, wrapperProps), props), {}, {
    ref: mergedRefs,
    id: "block-".concat(clientId).concat(htmlSuffix),
    tabIndex: 0,
    role: 'group',
    'aria-label': blockLabel,
    'data-block': clientId,
    'data-type': name,
    'data-title': blockTitle,
    className: classnames(className, props.className, wrapperProps.className, useBlockClassNames(clientId), useBlockDefaultClassName(clientId), useBlockCustomClassName(clientId), useBlockMovingModeClassNames(clientId)),
    style: _objectSpread(_objectSpread({}, wrapperProps.style), props.style)
  });
}
/**
 * Call within a save function to get the props for the block wrapper.
 *
 * @param {Object} props Optional. Props to pass to the element.
 */

useBlockProps.save = getBlockProps;
//# sourceMappingURL=index.js.map