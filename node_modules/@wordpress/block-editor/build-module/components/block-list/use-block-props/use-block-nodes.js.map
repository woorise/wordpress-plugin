{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-block-nodes.js"],"names":["omit","useContext","useRefEffect","useSelect","SetBlockNodes","store","blockEditorStore","useBlockNodes","clientId","setBlockNodes","isNodeNeeded","select","isBlockSelected","isFirstMultiSelectedBlock","getLastMultiSelectedBlockClientId","node","nodes"],"mappings":";;;;;;AAAA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,QAArB;AAEA;AACA;AACA;;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA;AACA;AACA;;AACA,SAASC,aAAT,QAA8B,KAA9B;AACA,SAASC,KAAK,IAAIC,gBAAlB,QAA0C,gBAA1C;AAEA,OAAO,SAASC,aAAT,CAAwBC,QAAxB,EAAmC;AACzC,MAAMC,aAAa,GAAGR,UAAU,CAAEG,aAAF,CAAhC,CADyC,CAEzC;AACA;AACA;AACA;;AACA,MAAMM,YAAY,GAAGP,SAAS,CAC7B,UAAEQ,MAAF,EAAc;AAAA,kBAKTA,MAAM,CAAEL,gBAAF,CALG;AAAA,QAEZM,eAFY,WAEZA,eAFY;AAAA,QAGZC,yBAHY,WAGZA,yBAHY;AAAA,QAIZC,iCAJY,WAIZA,iCAJY;;AAMb,WACCF,eAAe,CAAEJ,QAAF,CAAf,IACAK,yBAAyB,CAAEL,QAAF,CADzB,IAEAM,iCAAiC,OAAON,QAHzC;AAKA,GAZ4B,CAa7B;AACA;AACA;AACA;AAhB6B,GAA9B;AAmBA,SAAON,YAAY,CAClB,UAAEa,IAAF,EAAY;AACX,QAAK,CAAEL,YAAP,EAAsB;AACrB;AACA;;AAEDD,IAAAA,aAAa,CAAE,UAAEO,KAAF;AAAA,6CACXA,KADW,2BAEZR,QAFY,EAEAO,IAFA;AAAA,KAAF,CAAb;AAKA,WAAO,YAAM;AACZN,MAAAA,aAAa,CAAE,UAAEO,KAAF;AAAA,eAAahB,IAAI,CAAEgB,KAAF,EAASR,QAAT,CAAjB;AAAA,OAAF,CAAb;AACA,KAFD;AAGA,GAdiB,EAelB,CAAEE,YAAF,EAAgBF,QAAhB,EAA0BC,aAA1B,CAfkB,CAAnB;AAiBA","sourcesContent":["/**\n * External dependencies\n */\nimport { omit } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useContext } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { SetBlockNodes } from '../';\nimport { store as blockEditorStore } from '../../../store';\n\nexport function useBlockNodes( clientId ) {\n\tconst setBlockNodes = useContext( SetBlockNodes );\n\t// Provide the selected node, or the first and last nodes of a multi-\n\t// selection, so it can be used to position the contextual block toolbar.\n\t// We only provide what is necessary, and remove the nodes again when they\n\t// are no longer selected.\n\tconst isNodeNeeded = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tisBlockSelected,\n\t\t\t\tisFirstMultiSelectedBlock,\n\t\t\t\tgetLastMultiSelectedBlockClientId,\n\t\t\t} = select( blockEditorStore );\n\t\t\treturn (\n\t\t\t\tisBlockSelected( clientId ) ||\n\t\t\t\tisFirstMultiSelectedBlock( clientId ) ||\n\t\t\t\tgetLastMultiSelectedBlockClientId() === clientId\n\t\t\t);\n\t\t}\n\t\t// To do: figure out why tests are failing when dependencies are added.\n\t\t// This data was originally retrieved with `withSelect` in `block.js`.\n\t\t// For some reason, adding `clientId` as a dependency results in\n\t\t// `toolbar-roving-tabindex.test.js` e2e test failures.\n\t);\n\n\treturn useRefEffect(\n\t\t( node ) => {\n\t\t\tif ( ! isNodeNeeded ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetBlockNodes( ( nodes ) => ( {\n\t\t\t\t...nodes,\n\t\t\t\t[ clientId ]: node,\n\t\t\t} ) );\n\n\t\t\treturn () => {\n\t\t\t\tsetBlockNodes( ( nodes ) => omit( nodes, clientId ) );\n\t\t\t};\n\t\t},\n\t\t[ isNodeNeeded, clientId, setBlockNodes ]\n\t);\n}\n"]}