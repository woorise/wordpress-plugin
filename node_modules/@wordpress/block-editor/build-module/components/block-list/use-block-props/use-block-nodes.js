import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { omit } from 'lodash';
/**
 * WordPress dependencies
 */

import { useContext } from '@wordpress/element';
import { useRefEffect } from '@wordpress/compose';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { SetBlockNodes } from '../';
import { store as blockEditorStore } from '../../../store';
export function useBlockNodes(clientId) {
  var setBlockNodes = useContext(SetBlockNodes); // Provide the selected node, or the first and last nodes of a multi-
  // selection, so it can be used to position the contextual block toolbar.
  // We only provide what is necessary, and remove the nodes again when they
  // are no longer selected.

  var isNodeNeeded = useSelect(function (select) {
    var _select = select(blockEditorStore),
        isBlockSelected = _select.isBlockSelected,
        isFirstMultiSelectedBlock = _select.isFirstMultiSelectedBlock,
        getLastMultiSelectedBlockClientId = _select.getLastMultiSelectedBlockClientId;

    return isBlockSelected(clientId) || isFirstMultiSelectedBlock(clientId) || getLastMultiSelectedBlockClientId() === clientId;
  } // To do: figure out why tests are failing when dependencies are added.
  // This data was originally retrieved with `withSelect` in `block.js`.
  // For some reason, adding `clientId` as a dependency results in
  // `toolbar-roving-tabindex.test.js` e2e test failures.
  );
  return useRefEffect(function (node) {
    if (!isNodeNeeded) {
      return;
    }

    setBlockNodes(function (nodes) {
      return _objectSpread(_objectSpread({}, nodes), {}, _defineProperty({}, clientId, node));
    });
    return function () {
      setBlockNodes(function (nodes) {
        return omit(nodes, clientId);
      });
    };
  }, [isNodeNeeded, clientId, setBlockNodes]);
}
//# sourceMappingURL=use-block-nodes.js.map