/**
 * WordPress dependencies
 */
import { useSelect, select } from '@wordpress/data';
import { useEffect } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../store';

var requestIdleCallback = function () {
  if (typeof window === 'undefined') {
    return function (callback) {
      setTimeout(function () {
        return callback(Date.now());
      }, 0);
    };
  }

  return window.requestIdleCallback || window.requestAnimationFrame;
}();

var cancelIdleCallback = function () {
  if (typeof window === 'undefined') {
    return clearTimeout;
  }

  return window.cancelIdleCallback || window.cancelAnimationFrame;
}();

export function usePreParsePatterns() {
  var patterns = useSelect(function (_select) {
    return _select(blockEditorStore).getSettings().__experimentalBlockPatterns;
  }, []);
  useEffect(function () {
    if (!(patterns !== null && patterns !== void 0 && patterns.length)) {
      return;
    }

    var handle;
    var index = -1;

    var callback = function callback() {
      index++;

      if (index >= patterns.length) {
        return;
      }

      select(blockEditorStore).__experimentalGetParsedPattern(patterns[index].name);

      handle = requestIdleCallback(callback);
    };

    handle = requestIdleCallback(callback);
    return function () {
      return cancelIdleCallback(handle);
    };
  }, [patterns]);
  return null;
}
//# sourceMappingURL=pre-parse-patterns.js.map