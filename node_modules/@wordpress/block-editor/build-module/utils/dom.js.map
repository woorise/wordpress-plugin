{"version":3,"sources":["@wordpress/block-editor/src/utils/dom.js"],"names":["getBlockDOMNode","clientId","doc","getElementById","getBlockPreviewContainerDOMNode","domNode","firstChild","isInSameBlock","a","b","closest","isInsideRootBlock","blockElement","element","parentBlock","getBlockClientId","node","nodeType","ELEMENT_NODE","parentNode","elementNode","blockNode","id","slice","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAT,CAA0BC,QAA1B,EAAoCC,GAApC,EAA0C;AAChD,SAAOA,GAAG,CAACC,cAAJ,CAAoB,WAAWF,QAA/B,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,+BAAT,CAA0CH,QAA1C,EAAoDC,GAApD,EAA0D;AAChE,MAAMG,OAAO,GAAGL,eAAe,CAAEC,QAAF,EAAYC,GAAZ,CAA/B;;AAEA,MAAK,CAAEG,OAAP,EAAiB;AAChB;AACA;;AAED,SAAOA,OAAO,CAACC,UAAR,IAAsBD,OAA7B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,aAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA+B;AACrC,SACCD,CAAC,CAACE,OAAF,CAAW,iCAAX,MACAD,CAAC,CAACC,OAAF,CAAW,iCAAX,CAFD;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA4BC,YAA5B,EAA0CC,OAA1C,EAAoD;AAC1D,MAAMC,WAAW,GAAGD,OAAO,CAACH,OAAR,CAAiB,iCAAjB,CAApB;AACA,SAAOI,WAAW,KAAKF,YAAvB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,gBAAT,CAA2BC,IAA3B,EAAkC;AACxC,SAAQA,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBD,IAAI,CAACE,YAAvC,EAAsD;AACrDF,IAAAA,IAAI,GAAGA,IAAI,CAACG,UAAZ;AACA;;AAED,MAAK,CAAEH,IAAP,EAAc;AACb;AACA;;AAED,MAAMI,WAAW;AAAG;AAAyBJ,EAAAA,IAA7C;AACA,MAAMK,SAAS,GAAGD,WAAW,CAACV,OAAZ,CAAqB,iCAArB,CAAlB;;AAEA,MAAK,CAAEW,SAAP,EAAmB;AAClB;AACA;;AAED,SAAOA,SAAS,CAACC,EAAV,CAAaC,KAAb,CAAoB,SAASC,MAA7B,CAAP;AACA","sourcesContent":["/**\n * Given a block client ID, returns the corresponding DOM node for the block,\n * if exists. As much as possible, this helper should be avoided, and used only\n * in cases where isolated behaviors need remote access to a block node.\n *\n * @param {string}   clientId Block client ID.\n * @param {Document} doc      Document to search.\n *\n * @return {Element?} Block DOM node.\n */\nexport function getBlockDOMNode( clientId, doc ) {\n\treturn doc.getElementById( 'block-' + clientId );\n}\n\n/**\n * Returns the preview container DOM node for a given block client ID, or\n * undefined if the container cannot be determined.\n *\n * @param {string}   clientId Block client ID.\n * @param {Document} doc      Document to search.\n *\n * @return {Node|undefined} Preview container DOM node.\n */\nexport function getBlockPreviewContainerDOMNode( clientId, doc ) {\n\tconst domNode = getBlockDOMNode( clientId, doc );\n\n\tif ( ! domNode ) {\n\t\treturn;\n\t}\n\n\treturn domNode.firstChild || domNode;\n}\n\n/**\n * Returns true if two elements are contained within the same block.\n *\n * @param {Element} a First element.\n * @param {Element} b Second element.\n *\n * @return {boolean} Whether elements are in the same block.\n */\nexport function isInSameBlock( a, b ) {\n\treturn (\n\t\ta.closest( '.block-editor-block-list__block' ) ===\n\t\tb.closest( '.block-editor-block-list__block' )\n\t);\n}\n\n/**\n * Returns true if an element is considered part of the block and not its\n * children.\n *\n * @param {Element} blockElement Block container element.\n * @param {Element} element      Element.\n *\n * @return {boolean} Whether element is in the block Element but not its\n *                   children.\n */\nexport function isInsideRootBlock( blockElement, element ) {\n\tconst parentBlock = element.closest( '.block-editor-block-list__block' );\n\treturn parentBlock === blockElement;\n}\n\n/**\n * Finds the block client ID given any DOM node inside the block.\n *\n * @param {Node?} node DOM node.\n *\n * @return {string|undefined} Client ID or undefined if the node is not part of\n *                            a block.\n */\nexport function getBlockClientId( node ) {\n\twhile ( node && node.nodeType !== node.ELEMENT_NODE ) {\n\t\tnode = node.parentNode;\n\t}\n\n\tif ( ! node ) {\n\t\treturn;\n\t}\n\n\tconst elementNode = /** @type {Element} */ ( node );\n\tconst blockNode = elementNode.closest( '.block-editor-block-list__block' );\n\n\tif ( ! blockNode ) {\n\t\treturn;\n\t}\n\n\treturn blockNode.id.slice( 'block-'.length );\n}\n"]}