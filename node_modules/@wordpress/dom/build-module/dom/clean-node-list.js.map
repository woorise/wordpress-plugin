{"version":3,"sources":["@wordpress/dom/src/dom/clean-node-list.js"],"names":["includes","noop","isEmpty","remove","unwrap","isPhrasingContent","insertAfter","cleanNodeList","nodeList","doc","schema","inline","Array","from","forEach","node","tag","nodeName","toLowerCase","hasOwnProperty","isMatch","nodeType","ELEMENT_NODE","attributes","classes","children","require","allowEmpty","hasAttributes","name","removeAttribute","classList","length","mattchers","map","item","className","RegExp","test","some","hasChildNodes","querySelector","join","childNodes","parentNode","child","firstChild","nextElementSibling","createElement"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { includes, noop } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport isEmpty from './is-empty';\nimport remove from './remove';\nimport unwrap from './unwrap';\nimport { isPhrasingContent } from '../phrasing-content';\nimport insertAfter from './insert-after';\n\n/**\n * Given a schema, unwraps or removes nodes, attributes and classes on a node\n * list.\n *\n * @param {NodeList} nodeList The nodeList to filter.\n * @param {Document} doc      The document of the nodeList.\n * @param {Object}   schema   An array of functions that can mutate with the provided node.\n * @param {Object}   inline   Whether to clean for inline mode.\n */\nexport default function cleanNodeList( nodeList, doc, schema, inline ) {\n\tArray.from( nodeList ).forEach( ( node ) => {\n\t\tconst tag = node.nodeName.toLowerCase();\n\n\t\t// It's a valid child, if the tag exists in the schema without an isMatch\n\t\t// function, or with an isMatch function that matches the node.\n\t\tif (\n\t\t\tschema.hasOwnProperty( tag ) &&\n\t\t\t( ! schema[ tag ].isMatch || schema[ tag ].isMatch( node ) )\n\t\t) {\n\t\t\tif ( node.nodeType === node.ELEMENT_NODE ) {\n\t\t\t\tconst {\n\t\t\t\t\tattributes = [],\n\t\t\t\t\tclasses = [],\n\t\t\t\t\tchildren,\n\t\t\t\t\trequire = [],\n\t\t\t\t\tallowEmpty,\n\t\t\t\t} = schema[ tag ];\n\n\t\t\t\t// If the node is empty and it's supposed to have children,\n\t\t\t\t// remove the node.\n\t\t\t\tif ( children && ! allowEmpty && isEmpty( node ) ) {\n\t\t\t\t\tremove( node );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( node.hasAttributes() ) {\n\t\t\t\t\t// Strip invalid attributes.\n\t\t\t\t\tArray.from( node.attributes ).forEach( ( { name } ) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tname !== 'class' &&\n\t\t\t\t\t\t\t! includes( attributes, name )\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnode.removeAttribute( name );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Strip invalid classes.\n\t\t\t\t\t// In jsdom-jscore, 'node.classList' can be undefined.\n\t\t\t\t\t// TODO: Explore patching this in jsdom-jscore.\n\t\t\t\t\tif ( node.classList && node.classList.length ) {\n\t\t\t\t\t\tconst mattchers = classes.map( ( item ) => {\n\t\t\t\t\t\t\tif ( typeof item === 'string' ) {\n\t\t\t\t\t\t\t\treturn ( className ) => className === item;\n\t\t\t\t\t\t\t} else if ( item instanceof RegExp ) {\n\t\t\t\t\t\t\t\treturn ( className ) => item.test( className );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn noop;\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tArray.from( node.classList ).forEach( ( name ) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t! mattchers.some( ( isMatch ) =>\n\t\t\t\t\t\t\t\t\tisMatch( name )\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tnode.classList.remove( name );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tif ( ! node.classList.length ) {\n\t\t\t\t\t\t\tnode.removeAttribute( 'class' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( node.hasChildNodes() ) {\n\t\t\t\t\t// Do not filter any content.\n\t\t\t\t\tif ( children === '*' ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Continue if the node is supposed to have children.\n\t\t\t\t\tif ( children ) {\n\t\t\t\t\t\t// If a parent requires certain children, but it does\n\t\t\t\t\t\t// not have them, drop the parent and continue.\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\trequire.length &&\n\t\t\t\t\t\t\t! node.querySelector( require.join( ',' ) )\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcleanNodeList(\n\t\t\t\t\t\t\t\tnode.childNodes,\n\t\t\t\t\t\t\t\tdoc,\n\t\t\t\t\t\t\t\tschema,\n\t\t\t\t\t\t\t\tinline\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tunwrap( node );\n\t\t\t\t\t\t\t// If the node is at the top, phrasing content, and\n\t\t\t\t\t\t\t// contains children that are block content, unwrap\n\t\t\t\t\t\t\t// the node because it is invalid.\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tnode.parentNode.nodeName === 'BODY' &&\n\t\t\t\t\t\t\tisPhrasingContent( node )\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcleanNodeList(\n\t\t\t\t\t\t\t\tnode.childNodes,\n\t\t\t\t\t\t\t\tdoc,\n\t\t\t\t\t\t\t\tschema,\n\t\t\t\t\t\t\t\tinline\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tArray.from( node.childNodes ).some(\n\t\t\t\t\t\t\t\t\t( child ) => ! isPhrasingContent( child )\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tunwrap( node );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcleanNodeList(\n\t\t\t\t\t\t\t\tnode.childNodes,\n\t\t\t\t\t\t\t\tdoc,\n\t\t\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t\t\tinline\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Remove children if the node is not supposed to have any.\n\t\t\t\t\t} else {\n\t\t\t\t\t\twhile ( node.firstChild ) {\n\t\t\t\t\t\t\tremove( node.firstChild );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Invalid child. Continue with schema at the same place and unwrap.\n\t\t} else {\n\t\t\tcleanNodeList( node.childNodes, doc, schema, inline );\n\n\t\t\t// For inline mode, insert a line break when unwrapping nodes that\n\t\t\t// are not phrasing content.\n\t\t\tif (\n\t\t\t\tinline &&\n\t\t\t\t! isPhrasingContent( node ) &&\n\t\t\t\tnode.nextElementSibling\n\t\t\t) {\n\t\t\t\tinsertAfter( doc.createElement( 'br' ), node );\n\t\t\t}\n\n\t\t\tunwrap( node );\n\t\t}\n\t} );\n}\n"]}