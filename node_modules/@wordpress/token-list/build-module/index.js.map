{"version":3,"sources":["@wordpress/token-list/src/index.js"],"names":["uniq","compact","without","TokenList","initialValue","value","_currentValue","_valueAsArray","entries","forEach","keys","values","String","split","join","length","Symbol","iterator","index","item","indexOf","items","token","force","undefined","contains","add","remove","newToken"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { uniq, compact, without } from 'lodash';\n\n/**\n * A set of tokens.\n *\n * @see https://dom.spec.whatwg.org/#domtokenlist\n */\nexport default class TokenList {\n\t/**\n\t * Constructs a new instance of TokenList.\n\t *\n\t * @param {string} initialValue Initial value to assign.\n\t */\n\tconstructor( initialValue = '' ) {\n\t\tthis.value = initialValue;\n\n\t\t// Disable reason: These are type hints on the class.\n\t\t/* eslint-disable no-unused-expressions */\n\t\t/** @type {string} */\n\t\tthis._currentValue;\n\n\t\t/** @type {string[]} */\n\t\tthis._valueAsArray;\n\t\t/* eslint-enable no-unused-expressions */\n\t}\n\n\t/**\n\t * @param {Parameters<Array<string>['entries']>} args\n\t */\n\tentries( ...args ) {\n\t\treturn this._valueAsArray.entries( ...args );\n\t}\n\n\t/**\n\t * @param {Parameters<Array<string>['forEach']>} args\n\t */\n\tforEach( ...args ) {\n\t\treturn this._valueAsArray.forEach( ...args );\n\t}\n\n\t/**\n\t * @param {Parameters<Array<string>['keys']>} args\n\t */\n\tkeys( ...args ) {\n\t\treturn this._valueAsArray.keys( ...args );\n\t}\n\n\t/**\n\t * @param {Parameters<Array<string>['values']>} args\n\t */\n\tvalues( ...args ) {\n\t\treturn this._valueAsArray.values( ...args );\n\t}\n\n\t/**\n\t * Returns the associated set as string.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-value\n\t *\n\t * @return {string} Token set as string.\n\t */\n\tget value() {\n\t\treturn this._currentValue;\n\t}\n\n\t/**\n\t * Replaces the associated set with a new string value.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-value\n\t *\n\t * @param {string} value New token set as string.\n\t */\n\tset value( value ) {\n\t\tvalue = String( value );\n\t\tthis._valueAsArray = uniq( compact( value.split( /\\s+/g ) ) );\n\t\tthis._currentValue = this._valueAsArray.join( ' ' );\n\t}\n\n\t/**\n\t * Returns the number of tokens.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-length\n\t *\n\t * @return {number} Number of tokens.\n\t */\n\tget length() {\n\t\treturn this._valueAsArray.length;\n\t}\n\n\t/**\n\t * Returns the stringified form of the TokenList.\n\t *\n\t * @see https://dom.spec.whatwg.org/#DOMTokenList-stringification-behavior\n\t * @see https://www.ecma-international.org/ecma-262/9.0/index.html#sec-tostring\n\t *\n\t * @return {string} Token set as string.\n\t */\n\ttoString() {\n\t\treturn this.value;\n\t}\n\n\t/**\n\t * Returns an iterator for the TokenList, iterating items of the set.\n\t *\n\t * @see https://dom.spec.whatwg.org/#domtokenlist\n\t *\n\t * @return {IterableIterator<string>} TokenList iterator.\n\t */\n\t*[ Symbol.iterator ]() {\n\t\treturn yield* this._valueAsArray;\n\t}\n\n\t/**\n\t * Returns the token with index `index`.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-item\n\t *\n\t * @param {number} index Index at which to return token.\n\t *\n\t * @return {string|undefined} Token at index.\n\t */\n\titem( index ) {\n\t\treturn this._valueAsArray[ index ];\n\t}\n\n\t/**\n\t * Returns true if `token` is present, and false otherwise.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-contains\n\t *\n\t * @param {string} item Token to test.\n\t *\n\t * @return {boolean} Whether token is present.\n\t */\n\tcontains( item ) {\n\t\treturn this._valueAsArray.indexOf( item ) !== -1;\n\t}\n\n\t/**\n\t * Adds all arguments passed, except those already present.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-add\n\t *\n\t * @param {...string} items Items to add.\n\t */\n\tadd( ...items ) {\n\t\tthis.value += ' ' + items.join( ' ' );\n\t}\n\n\t/**\n\t * Removes arguments passed, if they are present.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-remove\n\t *\n\t * @param {...string} items Items to remove.\n\t */\n\tremove( ...items ) {\n\t\tthis.value = without( this._valueAsArray, ...items ).join( ' ' );\n\t}\n\n\t/**\n\t * If `force` is not given, \"toggles\" `token`, removing it if it’s present\n\t * and adding it if it’s not present. If `force` is true, adds token (same\n\t * as add()). If force is false, removes token (same as remove()). Returns\n\t * true if `token` is now present, and false otherwise.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-toggle\n\t *\n\t * @param {string}  token   Token to toggle.\n\t * @param {boolean} [force] Presence to force.\n\t *\n\t * @return {boolean} Whether token is present after toggle.\n\t */\n\ttoggle( token, force ) {\n\t\tif ( undefined === force ) {\n\t\t\tforce = ! this.contains( token );\n\t\t}\n\n\t\tif ( force ) {\n\t\t\tthis.add( token );\n\t\t} else {\n\t\t\tthis.remove( token );\n\t\t}\n\n\t\treturn force;\n\t}\n\n\t/**\n\t * Replaces `token` with `newToken`. Returns true if `token` was replaced\n\t * with `newToken`, and false otherwise.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-replace\n\t *\n\t * @param {string} token    Token to replace with `newToken`.\n\t * @param {string} newToken Token to use in place of `token`.\n\t *\n\t * @return {boolean} Whether replacement occurred.\n\t */\n\treplace( token, newToken ) {\n\t\tif ( ! this.contains( token ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.remove( token );\n\t\tthis.add( newToken );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if `token` is in the associated attribute’s supported\n\t * tokens. Returns false otherwise.\n\t *\n\t * Always returns `true` in this implementation.\n\t *\n\t * @see https://dom.spec.whatwg.org/#dom-domtokenlist-supports\n\t *\n\t * @return {boolean} Whether token is supported.\n\t */\n\tsupports() {\n\t\treturn true;\n\t}\n}\n"]}