import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Internal dependencies
 */
import { withNext } from '../ui/context';
import { Flex as NextFlex, FlexItem as NextFlexItem, FlexBlock as NextFlexBlock } from '../ui/flex';
var Flex = process.env.COMPONENT_SYSTEM_PHASE === 1 ? NextFlex : undefined;
var FlexBlock = process.env.COMPONENT_SYSTEM_PHASE === 1 ? NextFlexBlock : undefined;
var FlexItem = process.env.COMPONENT_SYSTEM_PHASE === 1 ? NextFlexItem : undefined;
/**
 * @param {import('./index').Props} props Current props.
 * @return {import('../ui/flex/types').FlexProps} Next props.
 */

var flexAdapter = function flexAdapter(_ref) {
  var isReversed = _ref.isReversed,
      restProps = _objectWithoutProperties(_ref, ["isReversed"]);

  return _objectSpread(_objectSpread({
    // There's no equivalent for `direction` on the original component so we can just translate `isReversed` to it
    direction: isReversed ? 'row-reverse' : 'row'
  }, restProps), {}, {
    // There's an HTML attribute named `wrap` that will exist in `restProps` so we need to set it to undefined so the default behavior of the next component takes over
    wrap: undefined
  });
};
/**
 * @param {import('./item').Props} props Current props.
 * @return {import('../ui/flex/types').FlexItemProps} Next props.
 */


var flexItemAdapter = function flexItemAdapter(props) {
  return _objectSpread(_objectSpread({}, props), {}, {
    // ensure these are undefined so the default takes over
    isBlock: undefined,
    display: undefined
  });
};
/**
 * @param {import('./block').Props} props Current props.
 * @return {import('../ui/flex/types').FlexBlockProps} Next props.
 */


var flexBlockAdapter = function flexBlockAdapter(props) {
  return _objectSpread(_objectSpread({}, props), {}, {
    // ensure this is undefined so the default takes over
    display: undefined
  });
};
/* eslint-disable jsdoc/valid-types */

/**
 * @param {import('react').ForwardRefExoticComponent<import('./index').Props>} Current
 */

/* eslint-enable jsdoc/valid-types */


export function withNextFlex(Current) {
  return withNext(Current, Flex, 'WPComponentsFlex', flexAdapter);
}
/* eslint-disable jsdoc/valid-types */

/**
 * @param {import('react').ForwardRefExoticComponent<import('./item').Props>} Current
 */

/* eslint-enable jsdoc/valid-types */

export function withNextFlexItem(Current) {
  return withNext(Current, FlexItem, 'WPComponentsFlex', flexItemAdapter);
}
/* eslint-disable jsdoc/valid-types */

/**
 * @param {import('react').ForwardRefExoticComponent<import('./block').Props>} Current
 */

/* eslint-enable jsdoc/valid-types */

export function withNextFlexBlock(Current) {
  return withNext(Current, FlexBlock, 'WPComponentsFlex', flexBlockAdapter);
}
//# sourceMappingURL=next.js.map