{"version":3,"sources":["@wordpress/components/src/tree-grid/index.js"],"names":["includes","focus","forwardRef","useCallback","UP","DOWN","LEFT","RIGHT","RovingTabIndexContainer","getRowFocusables","rowElement","focusablesInRow","focusable","find","length","filter","closest","TreeGrid","ref","children","props","onKeyDown","event","keyCode","metaKey","ctrlKey","altKey","shiftKey","hasModifierKeyPressed","stopPropagation","document","activeElement","treeGridElement","currentTarget","contains","activeRow","currentColumnIndex","indexOf","nextIndex","Math","max","min","preventDefault","rows","Array","from","querySelectorAll","currentRowIndex","nextRowIndex","focusablesInNextRow","default","TreeGridRow","TreeGridCell","TreeGridItem"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { focus } from '@wordpress/dom';\nimport { forwardRef, useCallback } from '@wordpress/element';\nimport { UP, DOWN, LEFT, RIGHT } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport RovingTabIndexContainer from './roving-tab-index';\n\n/**\n * Return focusables in a row element, excluding those from other branches\n * nested within the row.\n *\n * @param {Element} rowElement The DOM element representing the row.\n *\n * @return {?Array} The array of focusables in the row.\n */\nfunction getRowFocusables( rowElement ) {\n\tconst focusablesInRow = focus.focusable.find( rowElement );\n\n\tif ( ! focusablesInRow || ! focusablesInRow.length ) {\n\t\treturn;\n\t}\n\n\treturn focusablesInRow.filter( ( focusable ) => {\n\t\treturn focusable.closest( '[role=\"row\"]' ) === rowElement;\n\t} );\n}\n\n/**\n * Renders both a table and tbody element, used to create a tree hierarchy.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/components/src/tree-grid/README.md\n * @param {Object}    props          Component props.\n * @param {WPElement} props.children Children to be rendered.\n * @param {Object}    ref            A ref to the underlying DOM table element.\n */\nfunction TreeGrid( { children, ...props }, ref ) {\n\tconst onKeyDown = useCallback( ( event ) => {\n\t\tconst { keyCode, metaKey, ctrlKey, altKey, shiftKey } = event;\n\n\t\tconst hasModifierKeyPressed = metaKey || ctrlKey || altKey || shiftKey;\n\n\t\tif (\n\t\t\thasModifierKeyPressed ||\n\t\t\t! includes( [ UP, DOWN, LEFT, RIGHT ], keyCode )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The event will be handled, stop propagation.\n\t\tevent.stopPropagation();\n\n\t\tconst { activeElement } = document;\n\t\tconst { currentTarget: treeGridElement } = event;\n\t\tif ( ! treeGridElement.contains( activeElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Calculate the columnIndex of the active element.\n\t\tconst activeRow = activeElement.closest( '[role=\"row\"]' );\n\t\tconst focusablesInRow = getRowFocusables( activeRow );\n\t\tconst currentColumnIndex = focusablesInRow.indexOf( activeElement );\n\n\t\tif ( includes( [ LEFT, RIGHT ], keyCode ) ) {\n\t\t\t// Calculate to the next element.\n\t\t\tlet nextIndex;\n\t\t\tif ( keyCode === LEFT ) {\n\t\t\t\tnextIndex = Math.max( 0, currentColumnIndex - 1 );\n\t\t\t} else {\n\t\t\t\tnextIndex = Math.min(\n\t\t\t\t\tcurrentColumnIndex + 1,\n\t\t\t\t\tfocusablesInRow.length - 1\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Focus is either at the left or right edge of the grid. Do nothing.\n\t\t\tif ( nextIndex === currentColumnIndex ) {\n\t\t\t\t// Prevent key use for anything else. For example, Voiceover\n\t\t\t\t// will start reading text on continued use of left/right arrow\n\t\t\t\t// keys.\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Focus the next element.\n\t\t\tfocusablesInRow[ nextIndex ].focus();\n\n\t\t\t// Prevent key use for anything else. This ensures Voiceover\n\t\t\t// doesn't try to handle key navigation.\n\t\t\tevent.preventDefault();\n\t\t} else if ( includes( [ UP, DOWN ], keyCode ) ) {\n\t\t\t// Calculate the rowIndex of the next row.\n\t\t\tconst rows = Array.from(\n\t\t\t\ttreeGridElement.querySelectorAll( '[role=\"row\"]' )\n\t\t\t);\n\t\t\tconst currentRowIndex = rows.indexOf( activeRow );\n\t\t\tlet nextRowIndex;\n\n\t\t\tif ( keyCode === UP ) {\n\t\t\t\tnextRowIndex = Math.max( 0, currentRowIndex - 1 );\n\t\t\t} else {\n\t\t\t\tnextRowIndex = Math.min( currentRowIndex + 1, rows.length - 1 );\n\t\t\t}\n\n\t\t\t// Focus is either at the top or bottom edge of the grid. Do nothing.\n\t\t\tif ( nextRowIndex === currentRowIndex ) {\n\t\t\t\t// Prevent key use for anything else. For example, Voiceover\n\t\t\t\t// will start navigating horizontally when reaching the vertical\n\t\t\t\t// bounds of a table.\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the focusables in the next row.\n\t\t\tconst focusablesInNextRow = getRowFocusables(\n\t\t\t\trows[ nextRowIndex ]\n\t\t\t);\n\n\t\t\t// If for some reason there are no focusables in the next row, do nothing.\n\t\t\tif ( ! focusablesInNextRow || ! focusablesInNextRow.length ) {\n\t\t\t\t// Prevent key use for anything else. For example, Voiceover\n\t\t\t\t// will still focus text when using arrow keys, while this\n\t\t\t\t// component should limit navigation to focusables.\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Try to focus the element in the next row that's at a similar column to the activeElement.\n\t\t\tconst nextIndex = Math.min(\n\t\t\t\tcurrentColumnIndex,\n\t\t\t\tfocusablesInNextRow.length - 1\n\t\t\t);\n\t\t\tfocusablesInNextRow[ nextIndex ].focus();\n\n\t\t\t// Prevent key use for anything else. This ensures Voiceover\n\t\t\t// doesn't try to handle key navigation.\n\t\t\tevent.preventDefault();\n\t\t}\n\t}, [] );\n\n\t/* Disable reason: A treegrid is implemented using a table element. */\n\t/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n\treturn (\n\t\t<RovingTabIndexContainer>\n\t\t\t<table\n\t\t\t\t{ ...props }\n\t\t\t\trole=\"treegrid\"\n\t\t\t\tonKeyDown={ onKeyDown }\n\t\t\t\tref={ ref }\n\t\t\t>\n\t\t\t\t<tbody>{ children }</tbody>\n\t\t\t</table>\n\t\t</RovingTabIndexContainer>\n\t);\n\t/* eslint-enable jsx-a11y/no-noninteractive-element-to-interactive-role */\n}\n\nexport default forwardRef( TreeGrid );\nexport { default as TreeGridRow } from './row';\nexport { default as TreeGridCell } from './cell';\nexport { default as TreeGridItem } from './item';\n"]}