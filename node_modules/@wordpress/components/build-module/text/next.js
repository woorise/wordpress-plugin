import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Internal dependencies
 */
import { withNext } from '../ui/context';
import { Text as NextText } from '../ui/text';
import { text } from './styles/text-mixins';
var Text = process.env.COMPONENT_SYSTEM_PHASE === 1 ? NextText : undefined;
/**
 * @typedef AdaptedTextProps
 * @property {keyof JSX.IntrinsicElements} as Styled components `as` prop.
 * @property {import('./styles/text-mixins').TextVariant} variant The variant to render.
 * @property {import('react').ReactNode} children Children to render.
 * @property {string} [className] Classname to render on the element.
 */

/**
 * @param {AdaptedTextProps} props
 */

export var adapter = function adapter(_ref) {
  var as = _ref.as,
      variant = _ref.variant,
      restProps = _objectWithoutProperties(_ref, ["as", "variant"]);

  return _objectSpread({
    // as has not changed
    as: as,
    // luckily `text` just returns an emotion CSS object, so we can pass the styles from that directly to the handy `css` prop
    css: text({
      variant: variant
    }).styles
  }, restProps);
};
/* eslint-disable jsdoc/valid-types */

/**
 * @param {import('react').ForwardRefExoticComponent<AdaptedTextProps>} Current
 */

/* eslint-enable jsdoc/valid-types */

export function withNextComponent(Current) {
  return withNext(Current, Text, 'WPComponentsText', adapter);
}
//# sourceMappingURL=next.js.map