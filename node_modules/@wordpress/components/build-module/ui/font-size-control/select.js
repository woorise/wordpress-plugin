import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { noop } from 'lodash';
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { TextInput, SelectDropdown, FormGroup, Button } from '@wp-g2/components';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import { getSelectTemplateColumns } from './utils';
import { Grid } from '../grid';
import { View } from '../view';

function renderItem(_ref) {
  var name = _ref.name,
      style = _ref.style;
  return createElement("span", {
    style: style
  }, name);
}

function FontSizeControlSelect(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'FontSizeControlSelect'),
      customLabel = _useContextSystem.customLabel,
      disabled = _useContextSystem.disabled,
      inputValue = _useContextSystem.inputValue,
      isDefaultValue = _useContextSystem.isDefaultValue,
      label = _useContextSystem.label,
      max = _useContextSystem.max,
      min = _useContextSystem.min,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      _useContextSystem$onI = _useContextSystem.onInputChange,
      onInputChange = _useContextSystem$onI === void 0 ? noop : _useContextSystem$onI,
      _useContextSystem$onR = _useContextSystem.onReset,
      onReset = _useContextSystem$onR === void 0 ? noop : _useContextSystem$onR,
      _useContextSystem$opt = _useContextSystem.options,
      options = _useContextSystem$opt === void 0 ? [] : _useContextSystem$opt,
      size = _useContextSystem.size,
      value = _useContextSystem.value,
      withNumberInput = _useContextSystem.withNumberInput,
      withSelect = _useContextSystem.withSelect,
      otherProps = _objectWithoutProperties(_useContextSystem, ["customLabel", "disabled", "inputValue", "isDefaultValue", "label", "max", "min", "onChange", "onInputChange", "onReset", "options", "size", "value", "withNumberInput", "withSelect"]);

  var templateColumns = getSelectTemplateColumns(withNumberInput);
  var subControlsTemplateColumns = withNumberInput ? '1fr 1fr' : '1fr';
  return createElement(Grid, {
    alignment: "bottom",
    templateColumns: templateColumns
  }, withSelect && createElement(FormGroup, {
    label: label
  }, createElement(SelectDropdown, _extends({
    disabled: disabled,
    max: 260,
    onChange: onChange,
    options: options,
    renderItem: renderItem,
    ref: forwardedRef,
    size: size,
    value: value
  }, otherProps))), createElement(Grid, {
    alignment: "bottom",
    templateColumns: subControlsTemplateColumns
  }, withNumberInput && createElement(FormGroup, {
    label: customLabel
  }, createElement(TextInput, {
    disabled: disabled,
    max: max,
    min: min,
    onChange: onInputChange,
    size: size,
    type: "number",
    value: inputValue
  })), createElement(View, null, createElement(Button, {
    disabled: isDefaultValue,
    isBlock: true,
    onClick: onReset
  }, __('Reset')))));
}

export default contextConnect(FontSizeControlSelect, 'FontSizeControlSelect');
//# sourceMappingURL=select.js.map