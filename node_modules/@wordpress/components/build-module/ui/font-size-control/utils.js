import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
/**
 * External dependencies
 */

import { ui } from '@wp-g2/styles';
import { createUnitValue, parseUnitValue } from '@wp-g2/utils';
var DEFAULT_FONT_SIZE = 'default';
var CUSTOM_FONT_SIZE = 'custom';
var MAX_FONT_SIZE_DISPLAY = '25px';
var ASIDE_CONTROL_WIDTH = 70;
export function hasUnit(value) {
  var _parseUnitValue = parseUnitValue(value),
      _parseUnitValue2 = _slicedToArray(_parseUnitValue, 2),
      unit = _parseUnitValue2[1];

  return !!unit;
}

function getFontSize() {
  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var value = arguments.length > 1 ? arguments[1] : undefined;
  return values.find(function (item) {
    return item.size === value;
  });
}

export function isCustomValue() {
  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var value = arguments.length > 1 ? arguments[1] : undefined;
  var item = getFontSize(values, value);
  return !!item;
}
export function isCustomSelectedItem(selectedItem) {
  return (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.key) === CUSTOM_FONT_SIZE;
}
export function getSelectValueFromFontSize(fontSizes, value) {
  if (!value) return DEFAULT_FONT_SIZE;
  var fontSize = getFontSize(fontSizes, value);
  return fontSize ? fontSize.slug : CUSTOM_FONT_SIZE;
}
export function getSelectOptions(_ref) {
  var disableCustomFontSizes = _ref.disableCustomFontSizes,
      hasCustomValue = _ref.hasCustomValue,
      options = _ref.options;
  if (disableCustomFontSizes && !options.length) return null;
  options = [{
    slug: DEFAULT_FONT_SIZE,
    name: __('Default'),
    size: undefined
  }].concat(_toConsumableArray(options));

  if (!hasCustomValue && !disableCustomFontSizes) {
    options.push({
      slug: CUSTOM_FONT_SIZE,
      name: __('Custom')
    });
  }

  return options.map(function (option) {
    var fontSize = typeof option.size === 'number' ? createUnitValue(option.size, 'px') : option.size;
    return _objectSpread(_objectSpread({}, option), {}, {
      key: option.slug,
      style: {
        fontSize: "min( ".concat(fontSize, ", ").concat(MAX_FONT_SIZE_DISPLAY, " )")
      }
    });
  });
}
export function getInputValue() {
  var _fontSizes$;

  var fontSizes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var value = arguments.length > 1 ? arguments[1] : undefined;
  var hasUnits = hasUnit(value || ((_fontSizes$ = fontSizes[0]) === null || _fontSizes$ === void 0 ? void 0 : _fontSizes$.size));
  var noUnitsValue;

  if (!hasUnits) {
    noUnitsValue = value;
  } else {
    noUnitsValue = parseInt(value);
  }

  var isPixelValue = typeof value === 'number' || typeof value === 'string' && value.endsWith('px');
  var inputValue = isPixelValue && noUnitsValue || '';
  return inputValue;
}
export function getSelectTemplateColumns(withNumberInput) {
  return withNumberInput ? "minmax(0, 1fr) minmax(auto, ".concat(ui.value.px(ASIDE_CONTROL_WIDTH * 2), ")") : "minmax(0, 2fr) minmax(auto, ".concat(ui.value.px(ASIDE_CONTROL_WIDTH), ")");
}
export function getSliderTemplateColumns() {
  return "2fr minmax(auto, ".concat(ui.value.px(ASIDE_CONTROL_WIDTH), ")");
}
//# sourceMappingURL=utils.js.map