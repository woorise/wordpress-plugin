import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import { createUnitValue, is, noop } from '@wp-g2/utils';
/**
 * WordPress dependencies
 */

import { useCallback, useMemo } from '@wordpress/element';
/**
 * Internal dependencies
 */

import * as styles from './styles';
import { getInputValue, getSelectOptions, getSelectValueFromFontSize, hasUnit, isCustomSelectedItem, isCustomValue } from './utils';
export default function useFontSizeControl(props) {
  var _fontSizes$;

  var _useContextSystem = useContextSystem(props, 'FontSizeControl'),
      disableCustomFontSizes = _useContextSystem.disableCustomFontSizes,
      _useContextSystem$fon = _useContextSystem.fontSizes,
      fontSizes = _useContextSystem$fon === void 0 ? [] : _useContextSystem$fon,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      value = _useContextSystem.value,
      _useContextSystem$wit = _useContextSystem.withSlider,
      withSlider = _useContextSystem$wit === void 0 ? false : _useContextSystem$wit,
      className = _useContextSystem.className,
      otherProps = _objectWithoutProperties(_useContextSystem, ["disableCustomFontSizes", "fontSizes", "onChange", "value", "withSlider", "className"]);

  var hasUnits = hasUnit(value || ((_fontSizes$ = fontSizes[0]) === null || _fontSizes$ === void 0 ? void 0 : _fontSizes$.size));
  var hasCustomValue = isCustomValue(fontSizes, value);
  var options = useMemo(function () {
    return getSelectOptions({
      options: fontSizes,
      disableCustomFontSizes: disableCustomFontSizes,
      hasCustomValue: hasCustomValue
    });
  }, [fontSizes, disableCustomFontSizes, hasCustomValue]);
  var handleOnReset = useCallback(function () {
    onChange(undefined);
  }, [onChange]);
  var handleOnChange = useCallback(function (_ref) {
    var selectedItem = _ref.selectedItem;
    if (isCustomSelectedItem(selectedItem)) return;

    if (hasUnits) {
      onChange(selectedItem.size);
    } else if (is.defined(selectedItem.size)) {
      onChange(Number(selectedItem.size));
    } else {
      handleOnReset();
    }
  }, [handleOnReset, hasUnits, onChange]);
  var handleOnInputChange = useCallback(function (next) {
    if (!next && next !== 0) {
      handleOnReset();
      return;
    }

    if (hasUnits) {
      onChange(createUnitValue(next, 'px'));
    } else {
      onChange(Number(next));
    }
  }, [handleOnReset, hasUnits, onChange]);
  var inputValue = getInputValue(fontSizes, value);
  var selectedFontSizeSlug = getSelectValueFromFontSize(fontSizes, value);
  var currentValue = options.find(function (option) {
    return option.key === selectedFontSizeSlug;
  });
  var isDefaultValue = !is.defined(value, className);
  var classes = cx(styles.FontSizeControl);
  var withSelect = fontSizes.length > 0;
  var withNumberInput = !withSlider && !disableCustomFontSizes;
  return _objectSpread(_objectSpread({}, otherProps), {}, {
    className: classes,
    inputValue: inputValue,
    isDefaultValue: isDefaultValue,
    onChange: handleOnChange,
    onInputChange: handleOnInputChange,
    onReset: handleOnReset,
    options: options,
    value: currentValue,
    withNumberInput: withNumberInput,
    withSelect: withSelect,
    withSlider: withSlider
  });
}
//# sourceMappingURL=use-font-size-control.js.map