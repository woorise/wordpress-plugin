import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { contextConnect } from '@wp-g2/context';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import { VisuallyHidden } from '../visually-hidden';
import { VStack } from '../v-stack';
import FontSizeControlSelect from './select';
import FontSizeControlSlider from './slider';
import useFontSizeControl from './use-font-size-control';
import { View } from '../view';

function FontSizeControl(props, forwardedRef) {
  var _useFontSizeControl = useFontSizeControl(props),
      options = _useFontSizeControl.options,
      inputValue = _useFontSizeControl.inputValue,
      isDefaultValue = _useFontSizeControl.isDefaultValue,
      value = _useFontSizeControl.value,
      onChange = _useFontSizeControl.onChange,
      onReset = _useFontSizeControl.onReset,
      onInputChange = _useFontSizeControl.onInputChange,
      size = _useFontSizeControl.size,
      withSlider = _useFontSizeControl.withSlider,
      withNumberInput = _useFontSizeControl.withNumberInput,
      withSelect = _useFontSizeControl.withSelect,
      otherProps = _objectWithoutProperties(_useFontSizeControl, ["options", "inputValue", "isDefaultValue", "value", "onChange", "onReset", "onInputChange", "size", "withSlider", "withNumberInput", "withSelect"]);

  if (!options) return null;

  var label = __('Font size');

  var customLabel = __('Custom');

  var max = 100;
  var min = 1;
  return createElement(View, _extends({
    as: "fieldset"
  }, otherProps), createElement(VisuallyHidden, {
    as: "legend"
  }, label), createElement(VStack, {
    spacing: 3
  }, createElement(FontSizeControlSelect, {
    customLabel: customLabel,
    inputValue: inputValue,
    isDefaultValue: isDefaultValue,
    label: label,
    max: max,
    min: min,
    onChange: onChange,
    onInputChange: onInputChange,
    onReset: onReset,
    options: options,
    ref: forwardedRef,
    size: size,
    value: value,
    withNumberInput: withNumberInput,
    withSelect: withSelect
  }), createElement(FontSizeControlSlider, {
    max: max,
    min: min,
    onChange: onInputChange,
    size: size,
    value: inputValue,
    withSlider: withSlider
  })));
}

export default contextConnect(FontSizeControl, 'FontSizeControl');
//# sourceMappingURL=font-size-control.js.map