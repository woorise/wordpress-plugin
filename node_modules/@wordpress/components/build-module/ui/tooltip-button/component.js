import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports
import { useContextSystem, contextConnect } from '@wp-g2/context';
/**
 * Internal dependencies
 */

import { Button } from '../button';
import { Tooltip } from '../tooltip';

function TooltipButton(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'TooltipButton'),
      tooltip = _useContextSystem.tooltip,
      _useContextSystem$dis = _useContextSystem.disabled,
      disabled = _useContextSystem$dis === void 0 ? false : _useContextSystem$dis,
      _useContextSystem$isF = _useContextSystem.isFocusable,
      isFocusable = _useContextSystem$isF === void 0 ? true : _useContextSystem$isF,
      children = _useContextSystem.children,
      buttonProps = _objectWithoutProperties(_useContextSystem, ["tooltip", "disabled", "isFocusable", "children"]);

  var trulyDisabled = disabled && !isFocusable; // Should show the tooltip if...

  var shouldShowTooltip = tooltip && !trulyDisabled && ( // an explicit tooltip is passed or...
  tooltip.content || // there's a shortcut or...
  tooltip.shortcut || // there's a label and...
  !!buttonProps['aria-label'] && ( // the children are empty
  !children || Array.isArray(children) && !children.length));

  if (!shouldShowTooltip) {
    return createElement(Button, _extends({
      disabled: disabled,
      isFocusable: isFocusable
    }, buttonProps, {
      ref: forwardedRef
    }), children);
  }

  return createElement(Tooltip, tooltip, createElement(Button, _extends({
    disabled: disabled,
    isFocusable: isFocusable
  }, buttonProps, {
    ref: forwardedRef
  }), children));
}
/**
 * `TooltipButton` is a simple component that composes `Button` with a `Tooltip`.
 * It mostly exists as an adaptive layer between the `Button` it uses and the original `Button`.
 *
 * ```jsx
 * import { TooltipButton } from `@wordpress/components/ui`;
 *
 * function Example() {
 * 	return (
 * 		<TooltipButton
 * 			variant="secondary"
 * 			tooltip={ { content: 'WordPress.org' } }
 * 		>
 * 			Code is Poetry
 * 		</TooltipButton>
 * 	);
 * }
 * ```
 */


export default contextConnect(TooltipButton, 'TooltipButton');
//# sourceMappingURL=component.js.map