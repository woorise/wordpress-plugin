import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { hasNamespace, useContextSystem } from '@wp-g2/context';
import { ui } from '@wp-g2/styles';
import { getValidChildren } from '@wp-g2/utils';
/**
 * Internal dependencies
 */

import { FlexItem, useFlex } from '../flex';
import { getAlignmentProps } from './utils';
/**
 *
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'div'>} props
 */

export function useHStack(props) {
  var _useContextSystem = useContextSystem(props, 'HStack'),
      _useContextSystem$ali = _useContextSystem.alignment,
      alignment = _useContextSystem$ali === void 0 ? 'edge' : _useContextSystem$ali,
      children = _useContextSystem.children,
      direction = _useContextSystem.direction,
      _useContextSystem$spa = _useContextSystem.spacing,
      spacing = _useContextSystem$spa === void 0 ? 2 : _useContextSystem$spa,
      otherProps = _objectWithoutProperties(_useContextSystem, ["alignment", "children", "direction", "spacing"]);

  var align = getAlignmentProps(alignment, direction);
  var validChildren = getValidChildren(children);
  var clonedChildren = validChildren.map( // @ts-ignore
  function (
  /** @type {import('react').ReactElement} */
  child, index) {
    var _key = child.key || "hstack-".concat(index);

    var _isSpacer = hasNamespace(child, ['Spacer']);

    if (_isSpacer) {
      return createElement(FlexItem, _extends({
        isBlock: true,
        key: _key
      }, child.props, ui.$('Spacer')));
    }

    return child;
  });

  var propsForFlex = _objectSpread(_objectSpread(_objectSpread({
    children: clonedChildren,
    direction: direction,
    justify: 'center'
  }, align), otherProps), {}, {
    gap: spacing
  });

  var flexProps = useFlex(propsForFlex);
  return flexProps;
}
//# sourceMappingURL=hook.js.map