import _extends from "@babel/runtime/helpers/esm/extends";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

var _templateObject, _templateObject2, _templateObject3;

import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { css, cx, ui } from '@wp-g2/styles'; // eslint-disable-next-line no-restricted-imports

import { Separator } from 'reakit'; // eslint-disable-next-line no-restricted-imports, no-duplicate-imports

/**
 * WordPress dependencies
 */
import { useMemo } from '@wordpress/element';
/**
 * Internal dependencies
 */

import * as styles from './styles';

function Divider(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'Divider'),
      className = _useContextSystem.className,
      m = _useContextSystem.m,
      mb = _useContextSystem.mb,
      mt = _useContextSystem.mt,
      otherProps = _objectWithoutProperties(_useContextSystem, ["className", "m", "mb", "mt"]);

  var classes = useMemo(function () {
    var sx = {};

    if (typeof m !== 'undefined') {
      sx.m = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\t\t\t\tmargin-bottom: ", ";\n\t\t\t\tmargin-top: ", ";\n\t\t\t"])), ui.space(m), ui.space(m));
    } else {
      if (typeof mt !== 'undefined') {
        sx.mt = css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n\t\t\t\t\tmargin-top: ", ";\n\t\t\t\t"])), ui.space(mt));
      }

      if (typeof mb !== 'undefined') {
        sx.mb = css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n\t\t\t\t\tmargin-bottom: ", ";\n\t\t\t\t"])), ui.space(mb));
      }
    }

    return cx(styles.Divider, sx.mb, sx.mt, sx.m, className);
  }, [className, m, mb, mt]);
  return createElement(Separator, _extends({
    as: "hr"
  }, otherProps, {
    className: classes,
    ref: forwardedRef
  }));
}
/**
 * `Divider` is a layout component that separates groups of related content.
 *
 * @example
 * ```js
 * import { Divider, FormGroup, ListGroup } from `@wordpress/components/ui`;
 *
 * function Example() {
 * 	return (
 * 		<ListGroup>
 * 			<FormGroup>...</FormGroup>
 * 			<Divider />
 * 			<FormGroup>...</FormGroup>
 * 		</ListGroup>
 * 	);
 * }
 * ```
 */


var ConnectedDivider = contextConnect(Divider, 'Divider');
export default ConnectedDivider;
//# sourceMappingURL=component.js.map