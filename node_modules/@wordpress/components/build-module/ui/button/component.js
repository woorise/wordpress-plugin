import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { cx } from '@wp-g2/styles';
import { noop, uniqueId } from 'lodash';
/**
 * WordPress dependencies
 */

import { useCallback } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { BaseButton } from '../base-button';
import { useButtonGroupContext } from '../button-group';
import { VisuallyHidden } from '../visually-hidden';
import * as styles from './styles';
/**
 * @typedef {'primary' | 'secondary' | 'tertiary' | 'plain' | 'link'} ButtonVariant
 */

/**
 * @typedef OwnProps
 * @property {ButtonVariant} [variant='secondary'] Determinds the `Button` variant to render.
 * @property {string} [describedBy] Text for element pointed to by aria-describedby (id is auto-generated if aria-describedby is not provided).
 */

/**
 * @typedef {import('../base-button/types').Props & OwnProps} Props
 */

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<Props, 'button'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */

function Button(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'Button'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      currentColor = _useContextSystem.currentColor,
      icon = _useContextSystem.icon,
      _useContextSystem$isA = _useContextSystem.isActive,
      isActiveProp = _useContextSystem$isA === void 0 ? false : _useContextSystem$isA,
      _useContextSystem$isC = _useContextSystem.isControl,
      isControl = _useContextSystem$isC === void 0 ? false : _useContextSystem$isC,
      _useContextSystem$isS = _useContextSystem.isSubtle,
      isSubtle = _useContextSystem$isS === void 0 ? false : _useContextSystem$isS,
      _useContextSystem$onC = _useContextSystem.onClick,
      onClick = _useContextSystem$onC === void 0 ? noop : _useContextSystem$onC,
      _useContextSystem$siz = _useContextSystem.size,
      size = _useContextSystem$siz === void 0 ? 'medium' : _useContextSystem$siz,
      _useContextSystem$typ = _useContextSystem.type,
      type = _useContextSystem$typ === void 0 ? 'button' : _useContextSystem$typ,
      _useContextSystem$var = _useContextSystem.variant,
      variant = _useContextSystem$var === void 0 ? 'secondary' : _useContextSystem$var,
      describedBy = _useContextSystem.describedBy,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "className", "currentColor", "icon", "isActive", "isControl", "isSubtle", "onClick", "size", "type", "variant", "describedBy"]);

  var _useButtonGroupContex = useButtonGroupContext(),
      buttonGroup = _useButtonGroupContex.buttonGroup,
      enableSelectNone = _useButtonGroupContex.enableSelectNone;

  var isWithinButtonGroup = !!buttonGroup;
  var isButtonGroupActive = isWithinButtonGroup && (buttonGroup === null || buttonGroup === void 0 ? void 0 : buttonGroup.state) === otherProps.value;
  var isActive = isActiveProp || isButtonGroupActive;
  var isIconOnly = !!icon && !children;
  var descriptionId = describedBy ? uniqueId() : undefined;
  var describedById = otherProps['aria-describedby'] || descriptionId;
  var handleOnClickWithinButtonGroup = useCallback(function (event) {
    if (isWithinButtonGroup && enableSelectNone && isButtonGroupActive && buttonGroup) {
      event.preventDefault();
      event.stopPropagation();
      buttonGroup.setState(undefined);
    }
  }, [buttonGroup, enableSelectNone, isButtonGroupActive, isWithinButtonGroup]);
  var handleOnClick = useCallback(function (event) {
    onClick(event);
    handleOnClickWithinButtonGroup(event);
  }, [handleOnClickWithinButtonGroup, onClick]);
  var classes = cx(styles.Button, styles[variant], styles[size], isControl && styles.control, isSubtle && styles.subtle, isSubtle && isControl && styles.subtleControl, isButtonGroupActive && styles.subtleControlActive, isIconOnly && styles.icon, currentColor && styles.currentColor, className);
  return createElement(Fragment, null, createElement(BaseButton, _extends({
    className: classes,
    icon: icon,
    isActive: isActive,
    onClick: handleOnClick,
    ref: forwardedRef,
    "aria-describedby": describedById,
    type: type
  }, otherProps), children), describedBy && createElement(VisuallyHidden, null, createElement("span", {
    id: descriptionId
  }, describedBy)));
}
/**
 * `Button` is a component used to trigger an action or event, such as submitting a Form, opening a Dialog, canceling an action, or performing a delete operation.
 *
 * @example
 * ```jsx
 * import { Button } from `@wordpress/components/ui`;
 *
 * function Example() {
 *   return <Button variant="secondary">Code is Poetry</Button>;
 * }
 * ```
 */


var ConnectedButton = contextConnect(Button, 'Button');
export default ConnectedButton;
//# sourceMappingURL=component.js.map