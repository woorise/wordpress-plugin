import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { hasNamespace, useContextSystem } from '@wp-g2/context';
import { css, cx, getFontSize, ui } from '@wp-g2/styles';
import { isPlainObject, isNil } from 'lodash';
/**
 * WordPress dependencies
 */

import { useMemo, Children, cloneElement } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { useTruncate } from '../truncate';
import { getOptimalTextShade } from '../utils';
import * as styles from './styles';
import { createHighlighterText } from './utils';
/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'span'>} props
 */

export default function useText(props) {
  var _useContextSystem = useContextSystem(props, 'Text'),
      adjustLineHeightForInnerControls = _useContextSystem.adjustLineHeightForInnerControls,
      align = _useContextSystem.align,
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      color = _useContextSystem.color,
      ellipsizeMode = _useContextSystem.ellipsizeMode,
      _useContextSystem$isD = _useContextSystem.isDestructive,
      isDestructive = _useContextSystem$isD === void 0 ? false : _useContextSystem$isD,
      display = _useContextSystem.display,
      _useContextSystem$hig = _useContextSystem.highlightEscape,
      highlightEscape = _useContextSystem$hig === void 0 ? false : _useContextSystem$hig,
      _useContextSystem$hig2 = _useContextSystem.highlightCaseSensitive,
      highlightCaseSensitive = _useContextSystem$hig2 === void 0 ? false : _useContextSystem$hig2,
      highlightWords = _useContextSystem.highlightWords,
      highlightSanitize = _useContextSystem.highlightSanitize,
      _useContextSystem$isB = _useContextSystem.isBlock,
      isBlock = _useContextSystem$isB === void 0 ? false : _useContextSystem$isB,
      letterSpacing = _useContextSystem.letterSpacing,
      lineHeightProp = _useContextSystem.lineHeight,
      optimizeReadabilityFor = _useContextSystem.optimizeReadabilityFor,
      size = _useContextSystem.size,
      _useContextSystem$tru = _useContextSystem.truncate,
      truncate = _useContextSystem$tru === void 0 ? false : _useContextSystem$tru,
      _useContextSystem$upp = _useContextSystem.upperCase,
      upperCase = _useContextSystem$upp === void 0 ? false : _useContextSystem$upp,
      variant = _useContextSystem.variant,
      _useContextSystem$wei = _useContextSystem.weight,
      weight = _useContextSystem$wei === void 0 ? ui.get('fontWeight') : _useContextSystem$wei,
      otherProps = _objectWithoutProperties(_useContextSystem, ["adjustLineHeightForInnerControls", "align", "children", "className", "color", "ellipsizeMode", "isDestructive", "display", "highlightEscape", "highlightCaseSensitive", "highlightWords", "highlightSanitize", "isBlock", "letterSpacing", "lineHeight", "optimizeReadabilityFor", "size", "truncate", "upperCase", "variant", "weight"]);
  /** @type {import('react').ReactNode} */


  var content = children;
  var isHighlighter = Array.isArray(highlightWords);
  var isCaption = size === 'caption';

  if (isHighlighter) {
    if (typeof children !== 'string') {
      throw new TypeError('`children` of `Text` must only be `string` types when `highlightWords` is defined');
    }

    content = createHighlighterText({
      autoEscape: highlightEscape,
      // Disable reason: We need to disable this otherwise it erases the cast
      // eslint-disable-next-line object-shorthand
      children:
      /** @type {string} */
      children,
      caseSensitive: highlightCaseSensitive,
      searchWords: highlightWords,
      sanitize: highlightSanitize
    });
  }

  var classes = useMemo(function () {
    var sx = {};
    var lineHeight = getLineHeight({
      lineHeight: lineHeightProp,
      adjustLineHeightForInnerControls: adjustLineHeightForInnerControls
    });
    sx.Base = css({
      color: color,
      display: display,
      fontSize: getFontSize(size),

      /* eslint-disable jsdoc/valid-types */
      fontWeight:
      /** @type {import('react').CSSProperties['fontWeight']} */
      weight,

      /* eslint-enable jsdoc/valid-types */
      lineHeight: lineHeight,
      letterSpacing: letterSpacing,
      textAlign: align
    });
    sx.upperCase = css({
      textTransform: 'uppercase'
    });
    sx.optimalTextColor = null;

    if (optimizeReadabilityFor) {
      var isOptimalTextColorDark = getOptimalTextShade(optimizeReadabilityFor) === 'dark';
      sx.optimalTextColor = isOptimalTextColorDark ? css({
        color: ui.get('black')
      }) : css({
        color: ui.get('white')
      });
    }

    return cx(styles.Text, sx.Base, sx.optimalTextColor, isDestructive && styles.destructive, !!isHighlighter && styles.highlighterText, isBlock && styles.block, isCaption && styles.muted, variant && styles[variant], upperCase && sx.upperCase, className);
  }, [adjustLineHeightForInnerControls, align, className, color, display, isBlock, isCaption, isDestructive, isHighlighter, letterSpacing, lineHeightProp, optimizeReadabilityFor, size, upperCase, variant, weight]);
  /** @type {undefined | 'auto' | 'none'} */

  var finalEllipsizeMode;

  if (truncate === true) {
    finalEllipsizeMode = 'auto';
  }

  if (truncate === false) {
    finalEllipsizeMode = 'none';
  }

  var finalComponentProps = _objectSpread(_objectSpread({}, otherProps), {}, {
    className: classes,
    children: children,
    ellipsizeMode: ellipsizeMode || finalEllipsizeMode
  });

  var truncateProps = useTruncate(finalComponentProps);
  /**
   * Enhance child `<Link />` components to inherit font size.
   */

  if (!truncate && Array.isArray(children)) {
    content = Children.map(children, function (child) {
      // @ts-ignore
      if (!isPlainObject(child) || !('props' in child)) {
        return child;
      }

      var isLink = hasNamespace(child, ['Link']);

      if (isLink) {
        return cloneElement(child, {
          size: child.props.size || 'inherit'
        });
      }

      return child;
    });
  }

  return _objectSpread(_objectSpread({}, truncateProps), {}, {
    children: truncate ? truncateProps.children : content
  });
}
/* eslint-disable jsdoc/valid-types */

/**
 * @param {Object} props
 * @param {import('./types').Props['adjustLineHeightForInnerControls']} [props.adjustLineHeightForInnerControls]
 * @param {import('react').CSSProperties['lineHeight']} [props.lineHeight]
 */

/* eslint-enable jsdoc/valid-types */

function getLineHeight(_ref) {
  var adjustLineHeightForInnerControls = _ref.adjustLineHeightForInnerControls,
      lineHeight = _ref.lineHeight;
  if (!isNil(lineHeight)) return lineHeight;
  if (!adjustLineHeightForInnerControls) return;
  var value = "calc(".concat(ui.get('controlHeight'), " + ").concat(ui.space(2), ")");

  switch (adjustLineHeightForInnerControls) {
    case 'large':
      value = "calc(".concat(ui.get('controlHeightLarge'), " + ").concat(ui.space(2), ")");
      break;

    case 'small':
      value = "calc(".concat(ui.get('controlHeightSmall'), " + ").concat(ui.space(2), ")");
      break;

    case 'xSmall':
      value = "calc(".concat(ui.get('controlHeightXSmall'), " + ").concat(ui.space(2), ")");
      break;

    default:
      break;
  }

  return value;
}
//# sourceMappingURL=hook.js.map