import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { contextConnect, useContextSystem } from '@wp-g2/context';
import { css, cx } from '@wp-g2/styles'; // eslint-disable-next-line no-restricted-imports

import { Popover as ReakitPopover } from 'reakit';
/**
 * Internal dependencies
 */

import { Card } from '../card';
import { View } from '../view';
import { usePopoverContext } from './context';
import * as styles from './styles';
/**
 *
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').ContentProps, 'div'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */

function PopoverContent(props, forwardedRef) {
  var _useContextSystem = useContextSystem(props, 'PopoverContent'),
      children = _useContextSystem.children,
      className = _useContextSystem.className,
      _useContextSystem$ele = _useContextSystem.elevation,
      elevation = _useContextSystem$ele === void 0 ? 5 : _useContextSystem$ele,
      _useContextSystem$max = _useContextSystem.maxWidth,
      maxWidth = _useContextSystem$max === void 0 ? 360 : _useContextSystem$max,
      otherProps = _objectWithoutProperties(_useContextSystem, ["children", "className", "elevation", "maxWidth"]);

  var _usePopoverContext = usePopoverContext(),
      label = _usePopoverContext.label,
      popover = _usePopoverContext.popover;

  var classes = cx(styles.PopoverContent, css({
    maxWidth: maxWidth
  }), className);

  if (!popover) {
    throw new Error('`PopoverContent` must only be used inside a `Popover`.');
  }

  var showContent = popover.visible || popover.animating;
  return createElement(ReakitPopover, _extends({
    "aria-label": label,
    as: View,
    className: classes
  }, otherProps, popover), showContent && createElement(Card, {
    className: styles.cardStyle,
    elevation: elevation,
    ref: forwardedRef
  }, children));
}

export default contextConnect(PopoverContent, 'PopoverContent');
//# sourceMappingURL=content.js.map