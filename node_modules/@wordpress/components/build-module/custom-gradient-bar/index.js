import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { some } from 'lodash';
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useRef, useReducer } from '@wordpress/element';
/**
 * Internal dependencies
 */

import ControlPoints from './control-points';
import { getHorizontalRelativeGradientPosition } from './utils';
import { INSERT_POINT_WIDTH, MINIMUM_DISTANCE_BETWEEN_INSERTER_AND_POINT } from './constants';

function customGradientBarReducer(state, action) {
  switch (action.type) {
    case 'MOVE_INSERTER':
      if (state.id === 'IDLE' || state.id === 'MOVING_INSERTER') {
        return {
          id: 'MOVING_INSERTER',
          insertPosition: action.insertPosition
        };
      }

      break;

    case 'STOP_INSERTER_MOVE':
      if (state.id === 'MOVING_INSERTER') {
        return {
          id: 'IDLE'
        };
      }

      break;

    case 'OPEN_INSERTER':
      if (state.id === 'MOVING_INSERTER') {
        return {
          id: 'INSERTING_CONTROL_POINT',
          insertPosition: state.insertPosition
        };
      }

      break;

    case 'CLOSE_INSERTER':
      if (state.id === 'INSERTING_CONTROL_POINT') {
        return {
          id: 'IDLE'
        };
      }

      break;

    case 'START_CONTROL_CHANGE':
      if (state.id === 'IDLE') {
        return {
          id: 'MOVING_CONTROL_POINT'
        };
      }

      break;

    case 'STOP_CONTROL_CHANGE':
      if (state.id === 'MOVING_CONTROL_POINT') {
        return {
          id: 'IDLE'
        };
      }

      break;
  }

  return state;
}

var customGradientBarReducerInitialState = {
  id: 'IDLE'
};
export default function CustomGradientBar(_ref) {
  var background = _ref.background,
      hasGradient = _ref.hasGradient,
      controlPoints = _ref.value,
      onChange = _ref.onChange;
  var gradientPickerDomRef = useRef();

  var _useReducer = useReducer(customGradientBarReducer, customGradientBarReducerInitialState),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      gradientBarState = _useReducer2[0],
      gradientBarStateDispatch = _useReducer2[1];

  var onMouseEnterAndMove = function onMouseEnterAndMove(event) {
    var insertPosition = getHorizontalRelativeGradientPosition(event.clientX, gradientPickerDomRef.current, INSERT_POINT_WIDTH); // If the insert point is close to an existing control point don't show it.

    if (some(controlPoints, function (_ref2) {
      var position = _ref2.position;
      return Math.abs(insertPosition - position) < MINIMUM_DISTANCE_BETWEEN_INSERTER_AND_POINT;
    })) {
      if (gradientBarState.id === 'MOVING_INSERTER') {
        gradientBarStateDispatch({
          type: 'STOP_INSERTER_MOVE'
        });
      }

      return;
    }

    gradientBarStateDispatch({
      type: 'MOVE_INSERTER',
      insertPosition: insertPosition
    });
  };

  var onMouseLeave = function onMouseLeave() {
    gradientBarStateDispatch({
      type: 'STOP_INSERTER_MOVE'
    });
  };

  var isMovingInserter = gradientBarState.id === 'MOVING_INSERTER';
  var isInsertingControlPoint = gradientBarState.id === 'INSERTING_CONTROL_POINT';
  return createElement("div", {
    ref: gradientPickerDomRef,
    className: classnames('components-custom-gradient-picker__gradient-bar', {
      'has-gradient': hasGradient
    }),
    onMouseEnter: onMouseEnterAndMove,
    onMouseMove: onMouseEnterAndMove,
    style: {
      background: background
    },
    onMouseLeave: onMouseLeave
  }, createElement("div", {
    className: "components-custom-gradient-picker__markers-container"
  }, (isMovingInserter || isInsertingControlPoint) && createElement(ControlPoints.InsertPoint, {
    insertPosition: gradientBarState.insertPosition,
    value: controlPoints,
    onChange: onChange,
    onOpenInserter: function onOpenInserter() {
      gradientBarStateDispatch({
        type: 'OPEN_INSERTER'
      });
    },
    onCloseInserter: function onCloseInserter() {
      gradientBarStateDispatch({
        type: 'CLOSE_INSERTER'
      });
    }
  }), createElement(ControlPoints, {
    gradientPickerDomRef: gradientPickerDomRef,
    ignoreMarkerPosition: isInsertingControlPoint ? gradientBarState.insertPosition : undefined,
    value: controlPoints,
    onChange: onChange,
    onStartControlPointChange: function onStartControlPointChange() {
      gradientBarStateDispatch({
        type: 'START_CONTROL_CHANGE'
      });
    },
    onStopControlPointChange: function onStopControlPointChange() {
      gradientBarStateDispatch({
        type: 'STOP_CONTROL_CHANGE'
      });
    }
  })));
}
//# sourceMappingURL=index.js.map