import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import { createElement } from "@wordpress/element";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { ESCAPE } from '@wordpress/keycodes';
import { useFocusReturn, useFocusOnMount, useConstrainedTabbing, useMergeRefs } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import withFocusOutside from '../higher-order/with-focus-outside';

function ModalFrameContent(_ref) {
  var overlayClassName = _ref.overlayClassName,
      contentLabel = _ref.contentLabel,
      _ref$aria = _ref.aria,
      describedby = _ref$aria.describedby,
      labelledby = _ref$aria.labelledby,
      children = _ref.children,
      className = _ref.className,
      role = _ref.role,
      style = _ref.style,
      focusOnMount = _ref.focusOnMount,
      shouldCloseOnEsc = _ref.shouldCloseOnEsc,
      onRequestClose = _ref.onRequestClose;

  function handleEscapeKeyDown(event) {
    if (shouldCloseOnEsc && event.keyCode === ESCAPE) {
      event.stopPropagation();

      if (onRequestClose) {
        onRequestClose(event);
      }
    }
  }

  var focusOnMountRef = useFocusOnMount(focusOnMount);
  var constrainedTabbingRef = useConstrainedTabbing();
  var focusReturnRef = useFocusReturn();
  return (// eslint-disable-next-line jsx-a11y/no-static-element-interactions
    createElement("div", {
      className: classnames('components-modal__screen-overlay', overlayClassName),
      onKeyDown: handleEscapeKeyDown
    }, createElement("div", {
      className: classnames('components-modal__frame', className),
      style: style,
      ref: useMergeRefs([constrainedTabbingRef, focusReturnRef, focusOnMountRef]),
      role: role,
      "aria-label": contentLabel,
      "aria-labelledby": contentLabel ? null : labelledby,
      "aria-describedby": describedby,
      tabIndex: "-1"
    }, children))
  );
}

var ModalFrame = /*#__PURE__*/function (_Component) {
  _inherits(ModalFrame, _Component);

  var _super = _createSuper(ModalFrame);

  function ModalFrame() {
    var _this;

    _classCallCheck(this, ModalFrame);

    _this = _super.apply(this, arguments);
    _this.handleFocusOutside = _this.handleFocusOutside.bind(_assertThisInitialized(_this));
    return _this;
  }
  /**
   * Callback function called when clicked outside the modal.
   *
   * @param {Object} event Mouse click event.
   */


  _createClass(ModalFrame, [{
    key: "handleFocusOutside",
    value: function handleFocusOutside(event) {
      if (this.props.shouldCloseOnClickOutside && this.props.onRequestClose) {
        this.props.onRequestClose(event);
      }
    }
    /**
     * Renders the modal frame element.
     *
     * @return {WPElement} The modal frame element.
     */

  }, {
    key: "render",
    value: function render() {
      return createElement(ModalFrameContent, this.props);
    }
  }]);

  return ModalFrame;
}(Component);

export default withFocusOutside(ModalFrame);
//# sourceMappingURL=frame.js.map