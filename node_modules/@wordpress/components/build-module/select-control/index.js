import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { isEmpty, noop } from 'lodash';
import classNames from 'classnames';
/**
 * WordPress dependencies
 */

import { useInstanceId } from '@wordpress/compose';
import { useState, forwardRef } from '@wordpress/element';
import { Icon, chevronDown } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import BaseControl from '../base-control';
import InputBase from '../input-control/input-base';
import { Select, DownArrowWrapper } from './styles/select-control-styles';

function useUniqueId(idProp) {
  var instanceId = useInstanceId(SelectControl);
  var id = "inspector-select-control-".concat(instanceId);
  return idProp || id;
}

function SelectControl(_ref, ref) {
  var className = _ref.className,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      help = _ref.help,
      hideLabelFromVision = _ref.hideLabelFromVision,
      idProp = _ref.id,
      label = _ref.label,
      _ref$multiple = _ref.multiple,
      multiple = _ref$multiple === void 0 ? false : _ref$multiple,
      _ref$onBlur = _ref.onBlur,
      onBlur = _ref$onBlur === void 0 ? noop : _ref$onBlur,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$onFocus = _ref.onFocus,
      onFocus = _ref$onFocus === void 0 ? noop : _ref$onFocus,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'default' : _ref$size,
      valueProp = _ref.value,
      _ref$labelPosition = _ref.labelPosition,
      labelPosition = _ref$labelPosition === void 0 ? 'top' : _ref$labelPosition,
      props = _objectWithoutProperties(_ref, ["className", "disabled", "help", "hideLabelFromVision", "id", "label", "multiple", "onBlur", "onChange", "onFocus", "options", "size", "value", "labelPosition"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var id = useUniqueId(idProp);
  var helpId = help ? "".concat(id, "__help") : undefined; // Disable reason: A select with an onchange throws a warning

  if (isEmpty(options)) return null;

  var handleOnBlur = function handleOnBlur(event) {
    onBlur(event);
    setIsFocused(false);
  };

  var handleOnFocus = function handleOnFocus(event) {
    onFocus(event);
    setIsFocused(true);
  };

  var handleOnChange = function handleOnChange(event) {
    if (multiple) {
      var selectedOptions = _toConsumableArray(event.target.options).filter(function (_ref2) {
        var selected = _ref2.selected;
        return selected;
      });

      var newValues = selectedOptions.map(function (_ref3) {
        var value = _ref3.value;
        return value;
      });
      onChange(newValues);
      return;
    }

    onChange(event.target.value, {
      event: event
    });
  };

  var classes = classNames('components-select-control', className);
  /* eslint-disable jsx-a11y/no-onchange */

  return createElement(BaseControl, {
    help: help
  }, createElement(InputBase, _extends({
    className: classes,
    disabled: disabled,
    hideLabelFromVision: hideLabelFromVision,
    id: id,
    isFocused: isFocused,
    label: label,
    size: size,
    suffix: createElement(DownArrowWrapper, null, createElement(Icon, {
      icon: chevronDown,
      size: 18
    })),
    labelPosition: labelPosition
  }, props), createElement(Select, _extends({}, props, {
    "aria-describedby": helpId,
    className: "components-select-control__input",
    disabled: disabled,
    id: id,
    multiple: multiple,
    onBlur: handleOnBlur,
    onChange: handleOnChange,
    onFocus: handleOnFocus,
    ref: ref,
    size: size,
    value: valueProp
  }), options.map(function (option, index) {
    var key = option.id || "".concat(option.label, "-").concat(option.value, "-").concat(index);
    return createElement("option", {
      key: key,
      value: option.value,
      disabled: option.disabled
    }, option.label);
  }))));
  /* eslint-enable jsx-a11y/no-onchange */
}

var ForwardedComponent = forwardRef(SelectControl);
export default ForwardedComponent;
//# sourceMappingURL=index.js.map