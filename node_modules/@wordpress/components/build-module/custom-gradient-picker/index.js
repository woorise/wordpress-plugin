import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { get, omit } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import AnglePickerControl from '../angle-picker-control';
import CustomGradientBar from '../custom-gradient-bar';
import { Flex } from '../flex';
import SelectControl from '../select-control';
import { getGradientAstWithDefault, getLinearGradientRepresentationOfARadial, getGradientAstWithControlPoints, getStopCssColor } from './utils';
import { serializeGradient } from './serializer';
import { DEFAULT_LINEAR_GRADIENT_ANGLE, HORIZONTAL_GRADIENT_ORIENTATION, GRADIENT_OPTIONS, DEFAULT_GRADIENT } from './constants';
import { AccessoryWrapper, SelectWrapper } from './styles/custom-gradient-picker-styles';

var GradientAnglePicker = function GradientAnglePicker(_ref) {
  var gradientAST = _ref.gradientAST,
      hasGradient = _ref.hasGradient,
      onChange = _ref.onChange;
  var angle = get(gradientAST, ['orientation', 'value'], DEFAULT_LINEAR_GRADIENT_ANGLE);

  var onAngleChange = function onAngleChange(newAngle) {
    onChange(serializeGradient(_objectSpread(_objectSpread({}, gradientAST), {}, {
      orientation: {
        type: 'angular',
        value: newAngle
      }
    })));
  };

  return createElement(AnglePickerControl, {
    hideLabelFromVision: true,
    onChange: onAngleChange,
    value: hasGradient ? angle : ''
  });
};

var GradientTypePicker = function GradientTypePicker(_ref2) {
  var gradientAST = _ref2.gradientAST,
      hasGradient = _ref2.hasGradient,
      onChange = _ref2.onChange;
  var type = gradientAST.type;

  var onSetLinearGradient = function onSetLinearGradient() {
    onChange(serializeGradient(_objectSpread(_objectSpread(_objectSpread({}, gradientAST), gradientAST.orientation ? {} : {
      orientation: HORIZONTAL_GRADIENT_ORIENTATION
    }), {}, {
      type: 'linear-gradient'
    })));
  };

  var onSetRadialGradient = function onSetRadialGradient() {
    onChange(serializeGradient(_objectSpread(_objectSpread({}, omit(gradientAST, ['orientation'])), {}, {
      type: 'radial-gradient'
    })));
  };

  var handleOnChange = function handleOnChange(next) {
    if (next === 'linear-gradient') {
      onSetLinearGradient();
    }

    if (next === 'radial-gradient') {
      onSetRadialGradient();
    }
  };

  return createElement(SelectControl, {
    className: "components-custom-gradient-picker__type-picker",
    label: __('Type'),
    labelPosition: 'side',
    onChange: handleOnChange,
    options: GRADIENT_OPTIONS,
    value: hasGradient && type
  });
};

export default function CustomGradientPicker(_ref3) {
  var value = _ref3.value,
      _onChange = _ref3.onChange;
  var gradientAST = getGradientAstWithDefault(value); // On radial gradients the bar should display a linear gradient.
  // On radial gradients the bar represents a slice of the gradient from the center until the outside.

  var background = gradientAST.type === 'radial-gradient' ? getLinearGradientRepresentationOfARadial(gradientAST) : gradientAST.value;
  var hasGradient = gradientAST.value !== DEFAULT_GRADIENT; // Control points color option may be hex from presets, custom colors will be rgb.
  // The position should always be a percentage.

  var controlPoints = gradientAST.colorStops.map(function (colorStop) {
    return {
      color: getStopCssColor(colorStop),
      position: parseInt(colorStop.length.value)
    };
  });
  return createElement("div", {
    className: "components-custom-gradient-picker"
  }, createElement(CustomGradientBar, {
    background: background,
    hasGradient: hasGradient,
    value: controlPoints,
    onChange: function onChange(newControlPoints) {
      _onChange(serializeGradient(getGradientAstWithControlPoints(gradientAST, newControlPoints)));
    }
  }), createElement(Flex, {
    gap: 3,
    className: "components-custom-gradient-picker__ui-line"
  }, createElement(SelectWrapper, null, createElement(GradientTypePicker, {
    gradientAST: gradientAST,
    hasGradient: hasGradient,
    onChange: _onChange
  })), createElement(AccessoryWrapper, null, gradientAST.type === 'linear-gradient' && createElement(GradientAnglePicker, {
    gradientAST: gradientAST,
    hasGradient: hasGradient,
    onChange: _onChange
  }))));
}
//# sourceMappingURL=index.js.map