import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { get, omit } from 'lodash';
/**
 * WordPress dependencies
 */

import { PanelBody, RadioControl, RangeControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useState } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { colorsUtils } from '../mobile/color-settings/utils';
import { getGradientAstWithDefault } from './utils';
import { serializeGradient } from './serializer';
import { DEFAULT_LINEAR_GRADIENT_ANGLE, HORIZONTAL_GRADIENT_ORIENTATION } from './constants';
import styles from './style.scss';

function CustomGradientPicker(_ref) {
  var setColor = _ref.setColor,
      currentValue = _ref.currentValue,
      isGradientColor = _ref.isGradientColor;

  var _useState = useState(HORIZONTAL_GRADIENT_ORIENTATION),
      _useState2 = _slicedToArray(_useState, 2),
      gradientOrientation = _useState2[0],
      setGradientOrientation = _useState2[1];

  var _useState3 = useState(currentValue),
      _useState4 = _slicedToArray(_useState3, 2),
      currentColor = _useState4[0],
      setCurrentColor = _useState4[1];

  var getGradientType = colorsUtils.getGradientType,
      gradients = colorsUtils.gradients,
      gradientOptions = colorsUtils.gradientOptions;
  var gradientAST = getGradientAstWithDefault(currentColor);
  var gradientType = getGradientType(currentColor);

  function isLinearGradient(type) {
    return type === gradients.linear;
  }

  function getGradientColor(type) {
    var orientation = get(gradientAST, ['orientation']);

    if (orientation) {
      setGradientOrientation(orientation);
    }

    return serializeGradient(isLinearGradient(type) ? _objectSpread(_objectSpread(_objectSpread({}, gradientAST), gradientAST.orientation ? {} : {
      orientation: gradientOrientation
    }), {}, {
      type: type
    }) : _objectSpread(_objectSpread({}, omit(gradientAST, ['orientation'])), {}, {
      type: type
    }));
  }

  function onGradientTypeChange(type) {
    var gradientColor = getGradientColor(type);
    setCurrentColor(gradientColor);
    setColor(gradientColor);
  }

  function setGradientAngle(value) {
    var gradientColor = serializeGradient(_objectSpread(_objectSpread({}, gradientAST), {}, {
      orientation: {
        type: 'angular',
        value: value
      }
    }));

    if (isGradientColor && gradientColor !== currentColor) {
      setCurrentColor(gradientColor);
      setColor(gradientColor);
    }
  }

  function getGradientAngle() {
    return get(gradientAST, ['orientation', 'value'], DEFAULT_LINEAR_GRADIENT_ANGLE);
  }

  return createElement(Fragment, null, createElement(PanelBody, {
    title: __('Gradient Type')
  }, createElement(RadioControl, {
    selected: gradientType,
    options: gradientOptions,
    onChange: onGradientTypeChange
  })), isLinearGradient(gradientType) && createElement(PanelBody, {
    style: styles.angleControl
  }, createElement(RangeControl, {
    label: __('Angle'),
    minimumValue: 0,
    maximumValue: 360,
    value: getGradientAngle(),
    onChange: setGradientAngle
  })));
}

export default CustomGradientPicker;
//# sourceMappingURL=index.native.js.map