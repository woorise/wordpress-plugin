import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { Component, createRef } from '@wordpress/element';
import { withInstanceId } from '@wordpress/compose';
import { UP, DOWN, LEFT, RIGHT } from '@wordpress/keycodes';
/**
 * Internal dependencies
 */

import BaseControl from '../base-control';
import Controls from './controls';
import FocalPoint from './focal-point';
import Grid from './grid';
import Media from './media';
import { MediaWrapper, MediaContainer } from './styles/focal-point-picker-style';
import { roundClamp } from '../utils/math';
import { INITIAL_BOUNDS } from './utils';
export var FocalPointPicker = /*#__PURE__*/function (_Component) {
  _inherits(FocalPointPicker, _Component);

  var _super = _createSuper(FocalPointPicker);

  function FocalPointPicker(props) {
    var _this;

    _classCallCheck(this, FocalPointPicker);

    _this = _super.apply(this, arguments);
    _this.state = {
      isDragging: false,
      bounds: INITIAL_BOUNDS,
      percentages: props.value
    };
    _this.containerRef = createRef();
    _this.mediaRef = createRef();
    _this.onMouseDown = _this.startDrag.bind(_assertThisInitialized(_this));
    _this.onMouseUp = _this.stopDrag.bind(_assertThisInitialized(_this));
    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));
    _this.onMouseMove = _this.doDrag.bind(_assertThisInitialized(_this));

    _this.ifDraggingStop = function () {
      if (_this.state.isDragging) {
        _this.stopDrag();
      }
    };

    _this.onChangeAtControls = function (value) {
      _this.updateValue(value);

      _this.props.onChange(value);
    };

    _this.updateBounds = _this.updateBounds.bind(_assertThisInitialized(_this));
    _this.updateValue = _this.updateValue.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(FocalPointPicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var defaultView = this.containerRef.current.ownerDocument.defaultView;
      defaultView.addEventListener('resize', this.updateBounds);
      /*
       * Set initial bound values.
       *
       * This is necessary for Safari:
       * https://github.com/WordPress/gutenberg/issues/25814
       */

      this.updateBounds();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.url !== this.props.url) {
        this.ifDraggingStop();
      }
      /*
       * Handles cases where the incoming value changes.
       * An example is the values resetting based on an UNDO action.
       */


      var _this$state = this.state,
          isDragging = _this$state.isDragging,
          _this$state$percentag = _this$state.percentages,
          x = _this$state$percentag.x,
          y = _this$state$percentag.y;
      var value = this.props.value;

      if (!isDragging && (value.x !== x || value.y !== y)) {
        this.setState({
          percentages: this.props.value
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var defaultView = this.containerRef.current.ownerDocument.defaultView;
      defaultView.removeEventListener('resize', this.updateBounds);
      this.ifDraggingStop();
    }
  }, {
    key: "calculateBounds",
    value: function calculateBounds() {
      var bounds = INITIAL_BOUNDS;

      if (!this.mediaRef.current) {
        return bounds;
      } // Prevent division by zero when updateBounds runs in componentDidMount


      if (this.mediaRef.current.clientWidth === 0 || this.mediaRef.current.clientHeight === 0) {
        return bounds;
      }

      var dimensions = {
        width: this.mediaRef.current.clientWidth,
        height: this.mediaRef.current.clientHeight
      };
      var pickerDimensions = this.pickerDimensions();
      var widthRatio = pickerDimensions.width / dimensions.width;
      var heightRatio = pickerDimensions.height / dimensions.height;

      if (heightRatio >= widthRatio) {
        bounds.width = bounds.right = pickerDimensions.width;
        bounds.height = dimensions.height * widthRatio;
        bounds.top = (pickerDimensions.height - bounds.height) / 2;
        bounds.bottom = bounds.top + bounds.height;
      } else {
        bounds.height = bounds.bottom = pickerDimensions.height;
        bounds.width = dimensions.width * heightRatio;
        bounds.left = (pickerDimensions.width - bounds.width) / 2;
        bounds.right = bounds.left + bounds.width;
      }

      return bounds;
    }
  }, {
    key: "updateValue",
    value: function updateValue() {
      var nextValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var x = nextValue.x,
          y = nextValue.y;
      var nextPercentage = {
        x: parseFloat(x).toFixed(2),
        y: parseFloat(y).toFixed(2)
      };
      this.setState({
        percentages: nextPercentage
      });
    }
  }, {
    key: "updateBounds",
    value: function updateBounds() {
      this.setState({
        bounds: this.calculateBounds()
      });
    }
  }, {
    key: "startDrag",
    value: function startDrag(event) {
      var _this$props$onDragSta, _this$props;

      event.persist();
      this.containerRef.current.focus();
      this.setState({
        isDragging: true
      });
      var ownerDocument = this.containerRef.current.ownerDocument;
      ownerDocument.addEventListener('mouseup', this.onMouseUp);
      ownerDocument.addEventListener('mousemove', this.onMouseMove);
      var value = this.getValueFromPoint({
        x: event.pageX,
        y: event.pageY
      }, event.shiftKey);
      this.updateValue(value);
      (_this$props$onDragSta = (_this$props = this.props).onDragStart) === null || _this$props$onDragSta === void 0 ? void 0 : _this$props$onDragSta.call(_this$props, value, event);
    }
  }, {
    key: "stopDrag",
    value: function stopDrag(event) {
      var _this2 = this,
          _this$props$onDragEnd,
          _this$props2;

      var ownerDocument = this.containerRef.current.ownerDocument;
      ownerDocument.removeEventListener('mouseup', this.onMouseUp);
      ownerDocument.removeEventListener('mousemove', this.onMouseMove);
      this.setState({
        isDragging: false
      }, function () {
        _this2.props.onChange(_this2.state.percentages);
      });
      (_this$props$onDragEnd = (_this$props2 = this.props).onDragEnd) === null || _this$props$onDragEnd === void 0 ? void 0 : _this$props$onDragEnd.call(_this$props2, event);
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      var keyCode = event.keyCode,
          shiftKey = event.shiftKey;
      if (![UP, DOWN, LEFT, RIGHT].includes(keyCode)) return;
      event.preventDefault();

      var next = _objectSpread({}, this.state.percentages);

      var step = shiftKey ? 0.1 : 0.01;
      var delta = keyCode === UP || keyCode === LEFT ? -1 * step : step;
      var axis = keyCode === UP || keyCode === DOWN ? 'y' : 'x';
      var value = parseFloat(next[axis]) + delta;
      next[axis] = roundClamp(value, 0, 1, step);
      this.updateValue(next);
      this.props.onChange(next);
    }
  }, {
    key: "doDrag",
    value: function doDrag(event) {
      var _this$props$onDrag, _this$props3;

      // Prevents text-selection when dragging.
      event.preventDefault();
      var value = this.getValueFromPoint({
        x: event.pageX,
        y: event.pageY
      }, event.shiftKey);
      this.updateValue(value);
      (_this$props$onDrag = (_this$props3 = this.props).onDrag) === null || _this$props$onDrag === void 0 ? void 0 : _this$props$onDrag.call(_this$props3, value, event);
    }
  }, {
    key: "getValueFromPoint",
    value: function getValueFromPoint(point, byTenths) {
      var bounds = this.state.bounds;
      var pickerDimensions = this.pickerDimensions();
      var relativePoint = {
        left: point.x - pickerDimensions.left,
        top: point.y - pickerDimensions.top
      };
      var left = Math.max(bounds.left, Math.min(relativePoint.left, bounds.right));
      var top = Math.max(bounds.top, Math.min(relativePoint.top, bounds.bottom));
      var nextX = (left - bounds.left) / (pickerDimensions.width - bounds.left * 2);
      var nextY = (top - bounds.top) / (pickerDimensions.height - bounds.top * 2); // Enables holding shift to jump values by 10%

      var step = byTenths ? 0.1 : 0.01;
      nextX = roundClamp(nextX, 0, 1, step);
      nextY = roundClamp(nextY, 0, 1, step);
      return {
        x: nextX,
        y: nextY
      };
    }
  }, {
    key: "pickerDimensions",
    value: function pickerDimensions() {
      var containerNode = this.containerRef.current;

      if (!containerNode) {
        return {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        };
      }

      var clientHeight = containerNode.clientHeight,
          clientWidth = containerNode.clientWidth;

      var _containerNode$getBou = containerNode.getBoundingClientRect(),
          top = _containerNode$getBou.top,
          left = _containerNode$getBou.left;

      return {
        width: clientWidth,
        height: clientHeight,
        top: top + document.body.scrollTop,
        left: left
      };
    }
  }, {
    key: "iconCoordinates",
    value: function iconCoordinates() {
      var _this$state2 = this.state,
          bounds = _this$state2.bounds,
          _this$state2$percenta = _this$state2.percentages,
          x = _this$state2$percenta.x,
          y = _this$state2$percenta.y;

      if (bounds.left === undefined || bounds.top === undefined) {
        return {
          left: '50%',
          top: '50%'
        };
      }

      var _this$pickerDimension = this.pickerDimensions(),
          width = _this$pickerDimension.width,
          height = _this$pickerDimension.height;

      return {
        left: x * (width - bounds.left * 2) + bounds.left,
        top: y * (height - bounds.top * 2) + bounds.top
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          autoPlay = _this$props4.autoPlay,
          className = _this$props4.className,
          help = _this$props4.help,
          instanceId = _this$props4.instanceId,
          label = _this$props4.label,
          url = _this$props4.url;
      var _this$state3 = this.state,
          bounds = _this$state3.bounds,
          isDragging = _this$state3.isDragging,
          percentages = _this$state3.percentages;
      var iconCoordinates = this.iconCoordinates();
      var classes = classnames('components-focal-point-picker-control', className);
      var id = "inspector-focal-point-picker-control-".concat(instanceId);
      return createElement(BaseControl, {
        label: label,
        id: id,
        help: help,
        className: classes
      }, createElement(MediaWrapper, {
        className: "components-focal-point-picker-wrapper"
      }, createElement(MediaContainer, {
        className: "components-focal-point-picker",
        onKeyDown: this.onKeyDown,
        onMouseDown: this.onMouseDown,
        onBlur: this.ifDraggingStop,
        ref: this.containerRef,
        role: "button",
        tabIndex: "-1"
      }, createElement(Grid, {
        bounds: bounds,
        value: percentages.x + percentages.y
      }), createElement(Media, {
        alt: __('Media preview'),
        autoPlay: autoPlay,
        mediaRef: this.mediaRef,
        onLoad: this.updateBounds,
        src: url
      }), createElement(FocalPoint, {
        coordinates: iconCoordinates,
        isDragging: isDragging
      }))), createElement(Controls, {
        percentages: percentages,
        onChange: this.onChangeAtControls
      }));
    }
  }]);

  return FocalPointPicker;
}(Component);
FocalPointPicker.defaultProps = {
  autoPlay: true,
  value: {
    x: 0.5,
    y: 0.5
  },
  url: null
};
export default withInstanceId(FocalPointPicker);
//# sourceMappingURL=index.js.map