import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { useRef, useLayoutEffect } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { MediaPlaceholder } from './styles/focal-point-picker-style';
import { isVideoType } from './utils';
export default function Media(_ref) {
  var alt = _ref.alt,
      autoPlay = _ref.autoPlay,
      src = _ref.src,
      _ref$onLoad = _ref.onLoad,
      onLoad = _ref$onLoad === void 0 ? noop : _ref$onLoad,
      mediaRef = _ref.mediaRef,
      _ref$muted = _ref.muted,
      muted = _ref$muted === void 0 ? true : _ref$muted,
      props = _objectWithoutProperties(_ref, ["alt", "autoPlay", "src", "onLoad", "mediaRef", "muted"]);

  if (!src) {
    return createElement(MediaPlaceholderElement, {
      className: "components-focal-point-picker__media components-focal-point-picker__media--placeholder",
      onLoad: onLoad,
      mediaRef: mediaRef
    });
  }

  var isVideo = isVideoType(src);
  return isVideo ? createElement("video", _extends({}, props, {
    autoPlay: autoPlay,
    className: "components-focal-point-picker__media components-focal-point-picker__media--video",
    loop: true,
    muted: muted,
    onLoadedData: onLoad,
    ref: mediaRef,
    src: src
  })) : createElement("img", _extends({}, props, {
    alt: alt,
    className: "components-focal-point-picker__media components-focal-point-picker__media--image",
    onLoad: onLoad,
    ref: mediaRef,
    src: src
  }));
}

function MediaPlaceholderElement(_ref2) {
  var mediaRef = _ref2.mediaRef,
      _ref2$onLoad = _ref2.onLoad,
      onLoad = _ref2$onLoad === void 0 ? noop : _ref2$onLoad,
      props = _objectWithoutProperties(_ref2, ["mediaRef", "onLoad"]);

  var onLoadRef = useRef(onLoad);
  /**
   * This async callback mimics the onLoad (img) / onLoadedData (video) callback
   * for media elements. It is used in the main <FocalPointPicker /> component
   * to calculate the dimensions + boundaries for positioning.
   */

  useLayoutEffect(function () {
    window.requestAnimationFrame(function () {
      onLoadRef.current();
    });
  }, []);
  return createElement(MediaPlaceholder, _extends({
    ref: mediaRef
  }, props));
}
//# sourceMappingURL=media.js.map