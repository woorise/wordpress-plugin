import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useCallback, useState, useRef, useEffect } from '@wordpress/element';
import { createHigherOrderComponent, useKeyboardShortcut } from '@wordpress/compose';
import { rawShortcut } from '@wordpress/keycodes';
var defaultShortcuts = {
  previous: ['ctrl+shift+`', rawShortcut.access('p')],
  next: ['ctrl+`', rawShortcut.access('n')]
};
export function useNavigateRegions(ref) {
  var shortcuts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultShortcuts;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocusingRegions = _useState2[0],
      setIsFocusingRegions = _useState2[1];

  function focusRegion(offset) {
    var regions = Array.from(ref.current.querySelectorAll('[role="region"]'));

    if (!regions.length) {
      return;
    }

    var nextRegion = regions[0];
    var selectedIndex = regions.indexOf(ref.current.ownerDocument.activeElement);

    if (selectedIndex !== -1) {
      var nextIndex = selectedIndex + offset;
      nextIndex = nextIndex === -1 ? regions.length - 1 : nextIndex;
      nextIndex = nextIndex === regions.length ? 0 : nextIndex;
      nextRegion = regions[nextIndex];
    }

    nextRegion.focus();
    setIsFocusingRegions(true);
  }

  var focusPrevious = useCallback(function () {
    return focusRegion(-1);
  }, []);
  var focusNext = useCallback(function () {
    return focusRegion(1);
  }, []);
  useKeyboardShortcut(shortcuts.previous, focusPrevious, {
    bindGlobal: true
  });
  useKeyboardShortcut(shortcuts.next, focusNext, {
    bindGlobal: true
  });
  useEffect(function () {
    function onClick() {
      setIsFocusingRegions(false);
    }

    ref.current.addEventListener('click', onClick);
    return function () {
      ref.current.removeEventListener('click', onClick);
    };
  }, [setIsFocusingRegions]);

  if (!isFocusingRegions) {
    return;
  }

  return 'is-focusing-regions';
}
export default createHigherOrderComponent(function (Component) {
  return function (_ref) {
    var shortcuts = _ref.shortcuts,
        props = _objectWithoutProperties(_ref, ["shortcuts"]);

    var ref = useRef();
    var className = useNavigateRegions(ref, shortcuts);
    return createElement("div", {
      ref: ref,
      className: className
    }, createElement(Component, props));
  };
}, 'navigateRegions');
//# sourceMappingURL=index.js.map