import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useEffect, useRef } from '@wordpress/element';
import { __experimentalUseDragging as useDragging } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import { CircleRoot, CircleIndicatorWrapper, CircleIndicator } from './styles/angle-picker-control-styles';

function AngleCircle(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      props = _objectWithoutProperties(_ref, ["value", "onChange"]);

  var angleCircleRef = useRef();
  var angleCircleCenter = useRef();
  var previousCursorValue = useRef();

  var setAngleCircleCenter = function setAngleCircleCenter() {
    var rect = angleCircleRef.current.getBoundingClientRect();
    angleCircleCenter.current = {
      x: rect.x + rect.width / 2,
      y: rect.y + rect.height / 2
    };
  };

  var changeAngleToPosition = function changeAngleToPosition(event) {
    var _angleCircleCenter$cu = angleCircleCenter.current,
        centerX = _angleCircleCenter$cu.x,
        centerY = _angleCircleCenter$cu.y;
    var ownerDocument = angleCircleRef.current.ownerDocument; // Prevent (drag) mouse events from selecting and accidentally
    // triggering actions from other elements.

    event.preventDefault(); // Ensure the input isn't focused as preventDefault would leave it

    ownerDocument.activeElement.blur();
    onChange(getAngle(centerX, centerY, event.clientX, event.clientY));
  };

  var _useDragging = useDragging({
    onDragStart: function onDragStart(event) {
      setAngleCircleCenter();
      changeAngleToPosition(event);
    },
    onDragMove: changeAngleToPosition,
    onDragEnd: changeAngleToPosition
  }),
      startDrag = _useDragging.startDrag,
      isDragging = _useDragging.isDragging;

  useEffect(function () {
    if (isDragging) {
      if (previousCursorValue.current === undefined) {
        previousCursorValue.current = document.body.style.cursor;
      }

      document.body.style.cursor = 'grabbing';
    } else {
      document.body.style.cursor = previousCursorValue.current || null;
      previousCursorValue.current = undefined;
    }
  }, [isDragging]);
  return (
    /* eslint-disable jsx-a11y/no-static-element-interactions */
    createElement(CircleRoot, _extends({
      ref: angleCircleRef,
      onMouseDown: startDrag,
      className: "components-angle-picker-control__angle-circle",
      style: isDragging ? {
        cursor: 'grabbing'
      } : undefined
    }, props), createElement(CircleIndicatorWrapper, {
      style: value ? {
        transform: "rotate(".concat(value, "deg)")
      } : undefined,
      className: "components-angle-picker-control__angle-circle-indicator-wrapper"
    }, createElement(CircleIndicator, {
      className: "components-angle-picker-control__angle-circle-indicator"
    })))
    /* eslint-enable jsx-a11y/no-static-element-interactions */

  );
}

function getAngle(centerX, centerY, pointX, pointY) {
  var y = pointY - centerY;
  var x = pointX - centerX;
  var angleInRadians = Math.atan2(y, x);
  var angleInDeg = Math.round(angleInRadians * (180 / Math.PI)) + 90;

  if (angleInDeg < 0) {
    return 360 + angleInDeg;
  }

  return angleInDeg;
}

export default AngleCircle;
//# sourceMappingURL=angle-circle.js.map