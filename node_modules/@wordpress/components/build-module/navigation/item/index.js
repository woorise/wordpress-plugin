import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import classnames from 'classnames';
import { noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { Icon, chevronLeft, chevronRight } from '@wordpress/icons';
import { isRTL } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import Button from '../../button';
import { useNavigationContext } from '../context';
import { ItemUI } from '../styles/navigation-styles';
import NavigationItemBaseContent from './base-content';
import NavigationItemBase from './base';
export default function NavigationItem(props) {
  var badge = props.badge,
      children = props.children,
      className = props.className,
      href = props.href,
      item = props.item,
      navigateToMenu = props.navigateToMenu,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? noop : _props$onClick,
      title = props.title,
      hideIfTargetMenuEmpty = props.hideIfTargetMenuEmpty,
      isText = props.isText,
      restProps = _objectWithoutProperties(props, ["badge", "children", "className", "href", "item", "navigateToMenu", "onClick", "title", "hideIfTargetMenuEmpty", "isText"]);

  var _useNavigationContext = useNavigationContext(),
      activeItem = _useNavigationContext.activeItem,
      setActiveMenu = _useNavigationContext.setActiveMenu,
      isMenuEmpty = _useNavigationContext.navigationTree.isMenuEmpty; // If hideIfTargetMenuEmpty prop is true
  // And the menu we are supposed to navigate to
  // Is marked as empty, then we skip rendering the item


  if (hideIfTargetMenuEmpty && navigateToMenu && isMenuEmpty(navigateToMenu)) {
    return null;
  }

  var classes = classnames(className, {
    'is-active': item && activeItem === item
  });

  var onItemClick = function onItemClick(event) {
    if (navigateToMenu) {
      setActiveMenu(navigateToMenu);
    }

    onClick(event);
  };

  var icon = isRTL() ? chevronLeft : chevronRight;
  var baseProps = isText ? restProps : _objectSpread({
    as: Button,
    href: href,
    onClick: onItemClick
  }, restProps);
  return createElement(NavigationItemBase, _extends({}, props, {
    className: classes
  }), children || createElement(ItemUI, baseProps, createElement(NavigationItemBaseContent, {
    title: title,
    badge: badge
  }), navigateToMenu && createElement(Icon, {
    icon: icon
  })));
}
//# sourceMappingURL=index.js.map