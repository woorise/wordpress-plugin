import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useState } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { ROOT_MENU } from '../constants';
import { NavigationMenuContext } from './context';
import { useNavigationContext } from '../context';
import { useNavigationTreeMenu } from './use-navigation-tree-menu';
import NavigationBackButton from '../back-button';
import NavigationMenuTitle from './menu-title';
import NavigationSearchNoResultsFound from './search-no-results-found';
import { NavigableMenu } from '../../navigable-container';
import { MenuUI } from '../styles/navigation-styles';
export default function NavigationMenu(props) {
  var backButtonLabel = props.backButtonLabel,
      children = props.children,
      className = props.className,
      hasSearch = props.hasSearch,
      _props$menu = props.menu,
      menu = _props$menu === void 0 ? ROOT_MENU : _props$menu,
      onBackButtonClick = props.onBackButtonClick,
      setControlledSearch = props.onSearch,
      parentMenu = props.parentMenu,
      controlledSearch = props.search,
      isSearchDebouncing = props.isSearchDebouncing,
      title = props.title,
      titleAction = props.titleAction;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      uncontrolledSearch = _useState2[0],
      setUncontrolledSearch = _useState2[1];

  useNavigationTreeMenu(props);

  var _useNavigationContext = useNavigationContext(),
      activeMenu = _useNavigationContext.activeMenu;

  var context = {
    menu: menu,
    search: uncontrolledSearch
  }; // Keep the children rendered to make sure invisible items are included in the navigation tree

  if (activeMenu !== menu) {
    return createElement(NavigationMenuContext.Provider, {
      value: context
    }, children);
  }

  var isControlledSearch = !!setControlledSearch;
  var search = isControlledSearch ? controlledSearch : uncontrolledSearch;
  var onSearch = isControlledSearch ? setControlledSearch : setUncontrolledSearch;
  var menuTitleId = "components-navigation__menu-title-".concat(menu);
  var classes = classnames('components-navigation__menu', className);
  return createElement(NavigationMenuContext.Provider, {
    value: context
  }, createElement(MenuUI, {
    className: classes
  }, (parentMenu || onBackButtonClick) && createElement(NavigationBackButton, {
    backButtonLabel: backButtonLabel,
    parentMenu: parentMenu,
    onClick: onBackButtonClick
  }), createElement(NavigationMenuTitle, {
    hasSearch: hasSearch,
    onSearch: onSearch,
    search: search,
    title: title,
    titleAction: titleAction
  }), createElement(NavigableMenu, null, createElement("ul", {
    "aria-labelledby": menuTitleId
  }, children, search && !isSearchDebouncing && createElement(NavigationSearchNoResultsFound, {
    search: search
  })))));
}
//# sourceMappingURL=index.js.map