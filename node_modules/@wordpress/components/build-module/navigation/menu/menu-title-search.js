import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { filter } from 'lodash';
/**
 * WordPress dependencies
 */

import { useEffect, useRef } from '@wordpress/element';
import { Icon, closeSmall, search as searchIcon } from '@wordpress/icons';
import { __, _n, sprintf } from '@wordpress/i18n';
import { ESCAPE } from '@wordpress/keycodes';
/**
 * Internal dependencies
 */

import Button from '../../button';
import VisuallyHidden from '../../visually-hidden';
import withSpokenMessages from '../../higher-order/with-spoken-messages';
import { useNavigationMenuContext } from './context';
import { useNavigationContext } from '../context';
import { MenuTitleSearchUI } from '../styles/navigation-styles';
import { SEARCH_FOCUS_DELAY } from '../constants';

function MenuTitleSearch(_ref) {
  var debouncedSpeak = _ref.debouncedSpeak,
      onCloseSearch = _ref.onCloseSearch,
      onSearch = _ref.onSearch,
      search = _ref.search,
      title = _ref.title;

  var _useNavigationContext = useNavigationContext(),
      items = _useNavigationContext.navigationTree.items;

  var _useNavigationMenuCon = useNavigationMenuContext(),
      menu = _useNavigationMenuCon.menu;

  var inputRef = useRef(); // Wait for the slide-in animation to complete before autofocusing the input.
  // This prevents scrolling to the input during the animation.

  useEffect(function () {
    var delayedFocus = setTimeout(function () {
      inputRef.current.focus();
    }, SEARCH_FOCUS_DELAY);
    return function () {
      clearTimeout(delayedFocus);
    };
  }, []);
  useEffect(function () {
    if (!search) {
      return;
    }

    var count = filter(items, '_isVisible').length;
    var resultsFoundMessage = sprintf(
    /* translators: %d: number of results. */
    _n('%d result found.', '%d results found.', count), count);
    debouncedSpeak(resultsFoundMessage);
  }, [items, search]);

  var onClose = function onClose() {
    onSearch('');
    onCloseSearch();
  };

  function onKeyDown(event) {
    if (event.keyCode === ESCAPE) {
      event.stopPropagation();
      onClose();
    }
  }

  var menuTitleId = "components-navigation__menu-title-".concat(menu);
  var inputId = "components-navigation__menu-title-search-".concat(menu);
  /* translators: placeholder for menu search box. %s: menu title */

  var placeholder = sprintf(__('Search in %s'), title);
  return createElement(MenuTitleSearchUI, {
    className: "components-navigation__menu-title-search"
  }, createElement(Icon, {
    icon: searchIcon
  }), createElement(VisuallyHidden, {
    as: "label",
    htmlFor: inputId,
    id: menuTitleId
  }, placeholder), createElement("input", {
    autoComplete: "off",
    className: "components-text-control__input",
    id: inputId,
    onChange: function onChange(event) {
      return onSearch(event.target.value);
    },
    onKeyDown: onKeyDown,
    placeholder: placeholder,
    ref: inputRef,
    type: "search",
    value: search
  }), createElement(Button, {
    isSmall: true,
    isTertiary: true,
    label: __('Close search'),
    onClick: onClose
  }, createElement(Icon, {
    icon: closeSmall
  })));
}

export default withSpokenMessages(MenuTitleSearch);
//# sourceMappingURL=menu-title-search.js.map