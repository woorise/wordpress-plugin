import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useRef, useState } from '@wordpress/element';
import { __, sprintf } from '@wordpress/i18n';
import { Icon, search as searchIcon } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import { getAnimateClassName } from '../../animate';
import Button from '../../button';
import MenuTitleSearch from './menu-title-search';
import { MenuTitleActionsUI, MenuTitleHeadingUI, MenuTitleUI } from '../styles/navigation-styles';
import { useNavigationMenuContext } from './context';
import { SEARCH_FOCUS_DELAY } from '../constants';
export default function NavigationMenuTitle(_ref) {
  var hasSearch = _ref.hasSearch,
      onSearch = _ref.onSearch,
      search = _ref.search,
      title = _ref.title,
      titleAction = _ref.titleAction;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isSearching = _useState2[0],
      setIsSearching = _useState2[1];

  var _useNavigationMenuCon = useNavigationMenuContext(),
      menu = _useNavigationMenuCon.menu;

  var searchButtonRef = useRef();

  if (!title) {
    return null;
  }

  var onCloseSearch = function onCloseSearch() {
    setIsSearching(false); // Wait for the slide-in animation to complete before focusing the search button.
    // eslint-disable-next-line @wordpress/react-no-unsafe-timeout

    setTimeout(function () {
      searchButtonRef.current.focus();
    }, SEARCH_FOCUS_DELAY);
  };

  var menuTitleId = "components-navigation__menu-title-".concat(menu);
  /* translators: search button label for menu search box. %s: menu title */

  var searchButtonLabel = sprintf(__('Search in %s'), title);
  return createElement(MenuTitleUI, {
    className: "components-navigation__menu-title"
  }, !isSearching && createElement(MenuTitleHeadingUI, {
    as: "h2",
    className: "components-navigation__menu-title-heading",
    variant: "title.small"
  }, createElement("span", {
    id: menuTitleId
  }, title), (hasSearch || titleAction) && createElement(MenuTitleActionsUI, null, titleAction, hasSearch && createElement(Button, {
    isSmall: true,
    isTertiary: true,
    label: searchButtonLabel,
    onClick: function onClick() {
      return setIsSearching(true);
    },
    ref: searchButtonRef
  }, createElement(Icon, {
    icon: searchIcon
  })))), isSearching && createElement("div", {
    className: getAnimateClassName({
      type: 'slide-in',
      origin: 'left'
    })
  }, createElement(MenuTitleSearch, {
    onCloseSearch: onCloseSearch,
    onSearch: onSearch,
    search: search,
    title: title
  })));
}
//# sourceMappingURL=menu-title.js.map