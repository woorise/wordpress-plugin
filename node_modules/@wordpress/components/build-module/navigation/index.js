import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
import { noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { useEffect, useRef, useState } from '@wordpress/element';
import { isRTL } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import { getAnimateClassName } from '../animate';
import { ROOT_MENU } from './constants';
import { NavigationContext } from './context';
import { NavigationUI } from './styles/navigation-styles';
import { useCreateNavigationTree } from './use-create-navigation-tree';
export default function Navigation(_ref) {
  var activeItem = _ref.activeItem,
      _ref$activeMenu = _ref.activeMenu,
      activeMenu = _ref$activeMenu === void 0 ? ROOT_MENU : _ref$activeMenu,
      children = _ref.children,
      className = _ref.className,
      _ref$onActivateMenu = _ref.onActivateMenu,
      onActivateMenu = _ref$onActivateMenu === void 0 ? noop : _ref$onActivateMenu;

  var _useState = useState(activeMenu),
      _useState2 = _slicedToArray(_useState, 2),
      menu = _useState2[0],
      setMenu = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      slideOrigin = _useState4[0],
      setSlideOrigin = _useState4[1];

  var navigationTree = useCreateNavigationTree();
  var defaultSlideOrigin = isRTL() ? 'right' : 'left';

  var setActiveMenu = function setActiveMenu(menuId) {
    var slideInOrigin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSlideOrigin;

    if (!navigationTree.getMenu(menuId)) {
      return;
    }

    setSlideOrigin(slideInOrigin);
    setMenu(menuId);
    onActivateMenu(menuId);
  }; // Used to prevent the sliding animation on mount


  var isMounted = useRef(false);
  useEffect(function () {
    if (!isMounted.current) {
      isMounted.current = true;
    }
  }, []);
  useEffect(function () {
    if (activeMenu !== menu) {
      setActiveMenu(activeMenu);
    }
  }, [activeMenu]);
  var context = {
    activeItem: activeItem,
    activeMenu: menu,
    setActiveMenu: setActiveMenu,
    navigationTree: navigationTree
  };
  var classes = classnames('components-navigation', className);
  var animateClassName = getAnimateClassName({
    type: 'slide-in',
    origin: slideOrigin
  });
  return createElement(NavigationUI, {
    className: classes
  }, createElement("div", {
    key: menu,
    className: classnames(_defineProperty({}, animateClassName, isMounted.current && slideOrigin))
  }, createElement(NavigationContext.Provider, {
    value: context
  }, children)));
}
//# sourceMappingURL=index.js.map