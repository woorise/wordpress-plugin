import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { omit } from 'lodash';
/**
 * WordPress dependencies
 */

import { useState } from '@wordpress/element';
export var useNavigationTreeNodes = function useNavigationTreeNodes() {
  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      nodes = _useState2[0],
      setNodes = _useState2[1];

  var getNode = function getNode(key) {
    return nodes[key];
  };

  var addNode = function addNode(key, value) {
    return setNodes(function (original) {
      return _objectSpread(_objectSpread({}, original), {}, _defineProperty({}, key, omit(value, 'children')));
    });
  };

  var removeNode = function removeNode(key) {
    return setNodes(function (original) {
      return omit(original, key);
    });
  };

  return {
    nodes: nodes,
    getNode: getNode,
    addNode: addNode,
    removeNode: removeNode
  };
};
//# sourceMappingURL=use-navigation-tree-nodes.js.map