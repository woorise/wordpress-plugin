import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
import { find, uniqueId } from 'lodash';
/**
 * WordPress dependencies
 */

import { useState } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { NavigationGroupContext } from './context';
import { GroupTitleUI } from '../styles/navigation-styles';
import { useNavigationContext } from '../context';
export default function NavigationGroup(_ref) {
  var children = _ref.children,
      className = _ref.className,
      title = _ref.title;

  var _useState = useState(uniqueId('group-')),
      _useState2 = _slicedToArray(_useState, 1),
      groupId = _useState2[0];

  var _useNavigationContext = useNavigationContext(),
      items = _useNavigationContext.navigationTree.items;

  var context = {
    group: groupId
  }; // Keep the children rendered to make sure invisible items are included in the navigation tree.

  if (!find(items, {
    group: groupId,
    _isVisible: true
  })) {
    return createElement(NavigationGroupContext.Provider, {
      value: context
    }, children);
  }

  var groupTitleId = "components-navigation__group-title-".concat(groupId);
  var classes = classnames('components-navigation__group', className);
  return createElement(NavigationGroupContext.Provider, {
    value: context
  }, createElement("li", {
    className: classes
  }, title && createElement(GroupTitleUI, {
    as: "h3",
    className: "components-navigation__group-title",
    id: groupTitleId,
    variant: "caption"
  }, title), createElement("ul", {
    "aria-labelledby": groupTitleId,
    role: "group"
  }, children)));
}
//# sourceMappingURL=index.js.map