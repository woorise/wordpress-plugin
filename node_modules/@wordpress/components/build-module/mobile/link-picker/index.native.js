import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { SafeAreaView, TouchableOpacity, View } from 'react-native';
import { lowerCase, startsWith } from 'lodash';
/**
 * WordPress dependencies
 */

import { useState } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { BottomSheet, Icon } from '@wordpress/components';
import { getProtocol, prependHTTP } from '@wordpress/url';
import { link, cancelCircleFilled } from '@wordpress/icons';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import LinkPickerResults from './link-picker-results';
import NavigationHeader from '../bottom-sheet/navigation-header';
import styles from './styles.scss'; // this creates a search suggestion for adding a url directly

export var createDirectEntry = function createDirectEntry(value) {
  var type = 'URL';
  var protocol = lowerCase(getProtocol(value)) || '';

  if (protocol.includes('mailto')) {
    type = 'mailto';
  }

  if (protocol.includes('tel')) {
    type = 'tel';
  }

  if (startsWith(value, '#')) {
    type = 'internal';
  }

  return {
    isDirectEntry: true,
    title: value,
    url: type === 'URL' ? prependHTTP(value) : value,
    type: type
  };
};
export var LinkPicker = function LinkPicker(_ref) {
  var initialValue = _ref.value,
      onLinkPicked = _ref.onLinkPicked,
      cancel = _ref.onCancel;

  var _useState = useState(initialValue),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var directEntry = createDirectEntry(value); // the title of a direct entry is displayed as the raw input value, but if we
  // are replacing empty text, we want to use the generated url

  var pickLink = function pickLink(_ref2) {
    var title = _ref2.title,
        url = _ref2.url,
        isDirectEntry = _ref2.isDirectEntry;
    onLinkPicked({
      title: isDirectEntry ? url : title,
      url: url
    });
  };

  var onSubmit = function onSubmit() {
    pickLink(directEntry);
  };

  var clear = function clear() {
    setValue('');
  };

  var omniCellStyle = usePreferredColorSchemeStyle(styles.omniCell, styles.omniCellDark);
  var iconStyle = usePreferredColorSchemeStyle(styles.icon, styles.iconDark);
  return createElement(SafeAreaView, {
    style: styles.safeArea
  }, createElement(NavigationHeader, {
    screen: __('Link to'),
    leftButtonOnPress: cancel,
    applyButtonOnPress: onSubmit,
    isFullscreen: true
  }), createElement(View, {
    style: styles.contentContainer
  }, createElement(BottomSheet.Cell, {
    icon: link,
    style: omniCellStyle,
    valueStyle: styles.omniInput,
    value: value,
    placeholder: __('Search or type URL'),
    autoCapitalize: "none",
    autoCorrect: false,
    keyboardType: "url",
    onChangeValue: setValue,
    onSubmit: onSubmit
    /* eslint-disable-next-line jsx-a11y/no-autofocus */
    ,
    autoFocus: true,
    separatorType: "none"
  }, value !== '' && createElement(TouchableOpacity, {
    onPress: clear,
    style: styles.clearIcon
  }, createElement(Icon, {
    icon: cancelCircleFilled,
    fill: iconStyle.color,
    size: 24
  }))), !!value && createElement(LinkPickerResults, {
    query: value,
    onLinkPicked: pickLink,
    directEntry: directEntry
  })));
};
//# sourceMappingURL=index.native.js.map