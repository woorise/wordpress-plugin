import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { Image, Text, View } from 'react-native';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { Icon } from '@wordpress/components';
import { image as icon } from '@wordpress/icons';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
import { useEffect, useState } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { getImageWithFocalPointStyles } from './utils';
import styles from './style.scss';
import SvgIconRetry from './icon-retry';
import ImageEditingButton from './image-editing-button';
var ICON_TYPE = {
  PLACEHOLDER: 'placeholder',
  RETRY: 'retry',
  UPLOAD: 'upload'
};
export var IMAGE_DEFAULT_FOCAL_POINT = {
  x: 0.5,
  y: 0.5
};

var ImageComponent = function ImageComponent(_ref) {
  var align = _ref.align,
      alt = _ref.alt,
      _ref$editButton = _ref.editButton,
      editButton = _ref$editButton === void 0 ? true : _ref$editButton,
      focalPoint = _ref.focalPoint,
      imageHeight = _ref.height,
      _ref$highlightSelecte = _ref.highlightSelected,
      highlightSelected = _ref$highlightSelecte === void 0 ? true : _ref$highlightSelecte,
      isSelected = _ref.isSelected,
      isUploadFailed = _ref.isUploadFailed,
      isUploadInProgress = _ref.isUploadInProgress,
      mediaPickerOptions = _ref.mediaPickerOptions,
      onImageDataLoad = _ref.onImageDataLoad,
      onSelectMediaUploadOption = _ref.onSelectMediaUploadOption,
      openMediaOptions = _ref.openMediaOptions,
      resizeMode = _ref.resizeMode,
      retryMessage = _ref.retryMessage,
      retryIcon = _ref.retryIcon,
      url = _ref.url,
      shapeStyle = _ref.shapeStyle,
      style = _ref.style,
      imageWidth = _ref.width;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      imageData = _useState2[0],
      setImageData = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      containerSize = _useState4[0],
      setContainerSize = _useState4[1];

  useEffect(function () {
    if (url) {
      Image.getSize(url, function (imgWidth, imgHeight) {
        var metaData = {
          aspectRatio: imgWidth / imgHeight,
          width: imgWidth,
          height: imgHeight
        };
        setImageData(metaData);

        if (onImageDataLoad) {
          onImageDataLoad(metaData);
        }
      });
    }
  }, [url]);

  var onContainerLayout = function onContainerLayout(event) {
    var _event$nativeEvent$la = event.nativeEvent.layout,
        height = _event$nativeEvent$la.height,
        width = _event$nativeEvent$la.width;

    if (width !== 0 && height !== 0 && ((containerSize === null || containerSize === void 0 ? void 0 : containerSize.width) !== width || (containerSize === null || containerSize === void 0 ? void 0 : containerSize.height) !== height)) {
      setContainerSize({
        width: width,
        height: height
      });
    }
  };

  var getIcon = function getIcon(iconType) {
    var iconStyle;

    switch (iconType) {
      case ICON_TYPE.RETRY:
        return createElement(Icon, _extends({
          icon: retryIcon || SvgIconRetry
        }, styles.iconRetry));

      case ICON_TYPE.PLACEHOLDER:
        iconStyle = iconPlaceholderStyles;
        break;

      case ICON_TYPE.UPLOAD:
        iconStyle = iconUploadStyles;
        break;
    }

    return createElement(Icon, _extends({
      icon: icon
    }, iconStyle));
  };

  var iconPlaceholderStyles = usePreferredColorSchemeStyle(styles.iconPlaceholder, styles.iconPlaceholderDark);
  var iconUploadStyles = usePreferredColorSchemeStyle(styles.iconUpload, styles.iconUploadDark);
  var placeholderStyles = [usePreferredColorSchemeStyle(styles.imageContainerUpload, styles.imageContainerUploadDark), focalPoint && styles.imageContainerUploadWithFocalpoint, imageHeight && {
    height: imageHeight
  }];
  var customWidth = (imageData === null || imageData === void 0 ? void 0 : imageData.width) < (containerSize === null || containerSize === void 0 ? void 0 : containerSize.width) ? imageData === null || imageData === void 0 ? void 0 : imageData.width : styles.wide.width;
  var imageContainerStyles = [styles.imageContent, {
    width: imageWidth === styles.wide.width || imageData && imageWidth > 0 && imageWidth < (containerSize === null || containerSize === void 0 ? void 0 : containerSize.width) ? imageWidth : customWidth
  }, resizeMode && {
    width: styles.wide.width
  }, focalPoint && styles.focalPointContainer];
  var imageStyles = [{
    opacity: isUploadInProgress ? 0.3 : 1,
    height: containerSize === null || containerSize === void 0 ? void 0 : containerSize.height
  }, focalPoint && styles.focalPoint, focalPoint && getImageWithFocalPointStyles(focalPoint, containerSize, imageData), !focalPoint && imageData && containerSize && {
    height: (imageData === null || imageData === void 0 ? void 0 : imageData.width) > (containerSize === null || containerSize === void 0 ? void 0 : containerSize.width) ? (containerSize === null || containerSize === void 0 ? void 0 : containerSize.width) / (imageData === null || imageData === void 0 ? void 0 : imageData.aspectRatio) : undefined
  }, imageHeight && {
    height: imageHeight
  }, shapeStyle];
  return createElement(View, {
    style: [styles.container, // only set alignItems if an image exists because alignItems causes the placeholder
    // to disappear when an aligned image can't be downloaded
    // https://github.com/wordpress-mobile/gutenberg-mobile/issues/1592
    imageData && align && {
      alignItems: align
    }, style],
    onLayout: onContainerLayout
  }, createElement(View, {
    accessible: true,
    disabled: !isSelected,
    accessibilityLabel: alt,
    accessibilityHint: __('Double tap and hold to edit'),
    accessibilityRole: 'imagebutton',
    key: url,
    style: imageContainerStyles
  }, isSelected && highlightSelected && !(isUploadInProgress || isUploadFailed) && createElement(View, {
    style: [styles.imageBorder, {
      height: containerSize === null || containerSize === void 0 ? void 0 : containerSize.height
    }]
  }), !imageData ? createElement(View, {
    style: placeholderStyles
  }, createElement(View, {
    style: styles.imageUploadingIconContainer
  }, getIcon(ICON_TYPE.UPLOAD))) : createElement(View, {
    style: focalPoint && styles.focalPointContent
  }, createElement(Image, _extends({}, !resizeMode && {
    aspectRatio: imageData === null || imageData === void 0 ? void 0 : imageData.aspectRatio
  }, {
    style: imageStyles,
    source: {
      uri: url
    }
  }, !focalPoint && {
    resizeMethod: 'scale'
  }, {
    resizeMode: resizeMode
  }))), isUploadFailed && retryMessage && createElement(View, {
    style: [styles.imageContainer, styles.retryContainer]
  }, createElement(View, {
    style: [styles.retryIcon, retryIcon && styles.customRetryIcon]
  }, getIcon(ICON_TYPE.RETRY)), createElement(Text, {
    style: styles.uploadFailedText
  }, retryMessage))), editButton && isSelected && !isUploadInProgress && createElement(ImageEditingButton, {
    onSelectMediaUploadOption: onSelectMediaUploadOption,
    openMediaOptions: openMediaOptions,
    url: !isUploadFailed && imageData && url,
    pickerOptions: mediaPickerOptions
  }));
};

export default ImageComponent;
//# sourceMappingURL=index.native.js.map