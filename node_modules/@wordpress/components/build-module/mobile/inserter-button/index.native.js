import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import { createElement } from "@wordpress/element";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * External dependencies
 */
import { View, TouchableHighlight, Text } from 'react-native';
/**
 * WordPress dependencies
 */

import { Component } from '@wordpress/element';
import { Icon } from '@wordpress/components';
import { withPreferredColorScheme } from '@wordpress/compose';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import styles from './style.scss';

var MenuItem = /*#__PURE__*/function (_Component) {
  _inherits(MenuItem, _Component);

  var _super = _createSuper(MenuItem);

  function MenuItem() {
    var _this;

    _classCallCheck(this, MenuItem);

    _this = _super.apply(this, arguments);
    _this.onPress = _this.onPress.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(MenuItem, [{
    key: "onPress",
    value: function onPress() {
      var _this$props = this.props,
          onSelect = _this$props.onSelect,
          item = _this$props.item;
      onSelect(item);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          getStylesFromColorScheme = _this$props2.getStylesFromColorScheme,
          item = _this$props2.item,
          itemWidth = _this$props2.itemWidth,
          maxWidth = _this$props2.maxWidth;
      var modalIconWrapperStyle = getStylesFromColorScheme(styles.modalIconWrapper, styles.modalIconWrapperDark);
      var modalIconStyle = getStylesFromColorScheme(styles.modalIcon, styles.modalIconDark);
      var modalItemLabelStyle = getStylesFromColorScheme(styles.modalItemLabel, styles.modalItemLabelDark);
      var clipboardBlockStyles = getStylesFromColorScheme(styles.clipboardBlock, styles.clipboardBlockDark);
      var isClipboardBlock = item.id === 'clipboard';
      var blockTitle = isClipboardBlock ? __('Copied block') : item.title;
      return createElement(TouchableHighlight, {
        style: [styles.touchableArea, item.isDisabled ? styles.disabled : null],
        underlayColor: "transparent",
        activeOpacity: 0.5,
        accessibilityRole: "button",
        accessibilityLabel: "".concat(item.title, " block"),
        onPress: this.onPress,
        disabled: item.isDisabled
      }, createElement(View, {
        style: [styles.modalItem, {
          width: maxWidth
        }]
      }, createElement(View, {
        style: [modalIconWrapperStyle, itemWidth && {
          width: itemWidth
        }, isClipboardBlock && clipboardBlockStyles]
      }, createElement(View, {
        style: modalIconStyle
      }, createElement(Icon, {
        icon: item.icon.src || item.icon,
        fill: modalIconStyle.fill,
        size: modalIconStyle.width
      }))), createElement(Text, {
        style: modalItemLabelStyle
      }, blockTitle)));
    }
  }]);

  return MenuItem;
}(Component);

var InserterButton = withPreferredColorScheme(MenuItem);
InserterButton.Styles = {
  modalItem: styles.modalItem,
  modalIconWrapper: styles.modalIconWrapper
};
export default InserterButton;
//# sourceMappingURL=index.native.js.map