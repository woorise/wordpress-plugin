import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { SafeAreaView } from 'react-native';
import { useRoute, useNavigation } from '@react-navigation/native';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { memo, useContext, useState } from '@wordpress/element';
import { BottomSheetContext, FocalPointPicker } from '@wordpress/components';
/**
 * Internal dependencies
 */

import NavigationHeader from '../bottom-sheet/navigation-header';
import styles from './styles.scss';
var FocalPointSettingsPanelMemo = memo(function (_ref) {
  var focalPoint = _ref.focalPoint,
      onFocalPointChange = _ref.onFocalPointChange,
      shouldEnableBottomSheetScroll = _ref.shouldEnableBottomSheetScroll,
      url = _ref.url;
  var navigation = useNavigation();

  function onButtonPress(action) {
    navigation.goBack();

    if (action === 'apply') {
      onFocalPointChange(draftFocalPoint);
    }
  }

  var _useState = useState(focalPoint),
      _useState2 = _slicedToArray(_useState, 2),
      draftFocalPoint = _useState2[0],
      setDraftFocalPoint = _useState2[1];

  function setPosition(coordinates) {
    setDraftFocalPoint(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), coordinates);
    });
  }

  return createElement(SafeAreaView, {
    style: styles.safearea
  }, createElement(NavigationHeader, {
    screen: __('Edit focal point'),
    leftButtonOnPress: function leftButtonOnPress() {
      return onButtonPress('cancel');
    },
    applyButtonOnPress: function applyButtonOnPress() {
      return onButtonPress('apply');
    },
    isFullscreen: true
  }), createElement(FocalPointPicker, {
    focalPoint: draftFocalPoint,
    onChange: setPosition,
    shouldEnableBottomSheetScroll: shouldEnableBottomSheetScroll,
    url: url
  }));
});

function FocalPointSettingsPanel(props) {
  var route = useRoute();

  var _useContext = useContext(BottomSheetContext),
      shouldEnableBottomSheetScroll = _useContext.shouldEnableBottomSheetScroll;

  return createElement(FocalPointSettingsPanelMemo, _extends({
    shouldEnableBottomSheetScroll: shouldEnableBottomSheetScroll
  }, props, route.params));
}

export default FocalPointSettingsPanel;
//# sourceMappingURL=index.native.js.map