import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { View, Easing } from 'react-native';
import { NavigationContainer, DefaultTheme } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
/**
 * WordPress dependencies
 */

import { useState, useContext, useMemo, useCallback, Children, useRef, cloneElement } from '@wordpress/element';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import { performLayoutAnimation } from '../../layout-animation';
import { BottomSheetNavigationContext, BottomSheetNavigationProvider } from './bottom-sheet-navigation-context';
import styles from './styles.scss';
var AnimationSpec = {
  animation: 'timing',
  config: {
    duration: 200,
    easing: Easing.ease
  }
};

var fadeConfig = function fadeConfig(_ref) {
  var current = _ref.current;
  return {
    cardStyle: {
      opacity: current.progress
    }
  };
};

var options = {
  transitionSpec: {
    open: AnimationSpec,
    close: AnimationSpec
  },
  headerShown: false,
  gestureEnabled: false,
  cardStyleInterpolator: fadeConfig
};
var ANIMATION_DURATION = 190;

function BottomSheetNavigationContainer(_ref2) {
  var children = _ref2.children,
      animate = _ref2.animate,
      main = _ref2.main,
      theme = _ref2.theme;
  var Stack = useRef(createStackNavigator()).current;
  var context = useContext(BottomSheetNavigationContext);

  var _useState = useState(context.currentHeight || 1),
      _useState2 = _slicedToArray(_useState, 2),
      currentHeight = _useState2[0],
      setCurrentHeight = _useState2[1];

  var backgroundStyle = usePreferredColorSchemeStyle(styles.background, styles.backgroundDark);

  var _theme = theme || _objectSpread(_objectSpread({}, DefaultTheme), {}, {
    colors: _objectSpread(_objectSpread({}, DefaultTheme.colors), {}, {
      background: backgroundStyle.backgroundColor
    })
  });

  var setHeight = useCallback(function (height) {
    // The screen is fullHeight or changing from fullScreen to the default mode
    if (typeof currentHeight === 'string' && typeof height !== 'string' || typeof height === 'string') {
      performLayoutAnimation(ANIMATION_DURATION);
      setCurrentHeight(height);
      return;
    }

    if (height > 1) {
      if (currentHeight === 1) {
        setCurrentHeight(height);
      } else if (animate) {
        performLayoutAnimation(ANIMATION_DURATION);
        setCurrentHeight(height);
      } else {
        setCurrentHeight(height);
      }
    }
  }, [currentHeight]);
  var screens = useMemo(function () {
    return Children.map(children, function (child) {
      var screen = child;

      var _child$props = child.props,
          name = _child$props.name,
          otherProps = _objectWithoutProperties(_child$props, ["name"]);

      if (!main) {
        screen = cloneElement(child, _objectSpread(_objectSpread({}, child.props), {}, {
          isNested: true
        }));
      }

      return createElement(Stack.Screen, _extends({
        name: name
      }, otherProps, {
        children: function children() {
          return screen;
        }
      }));
    });
  }, [children]);
  return useMemo(function () {
    return createElement(View, {
      style: {
        height: currentHeight
      }
    }, createElement(BottomSheetNavigationProvider, {
      value: {
        setHeight: setHeight,
        currentHeight: currentHeight
      }
    }, main ? createElement(NavigationContainer, {
      theme: _theme
    }, createElement(Stack.Navigator, {
      screenOptions: options
    }, screens)) : createElement(Stack.Navigator, {
      screenOptions: options
    }, screens)));
  }, [currentHeight, _theme]);
}

export default BottomSheetNavigationContainer;
//# sourceMappingURL=navigation-container.native.js.map