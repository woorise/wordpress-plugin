import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import { createElement, Fragment } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * External dependencies
 */
import { Text, View, Platform, PanResponder, Dimensions, Keyboard, StatusBar, ScrollView, TouchableHighlight } from 'react-native';
import Modal from 'react-native-modal';
import SafeArea from 'react-native-safe-area';
/**
 * WordPress dependencies
 */

import { subscribeAndroidModalClosed } from '@wordpress/react-native-bridge';
import { Component } from '@wordpress/element';
import { withPreferredColorScheme } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import styles from './styles.scss';
import Button from './button';
import Cell from './cell';
import CyclePickerCell from './cycle-picker-cell';
import PickerCell from './picker-cell';
import SwitchCell from './switch-cell';
import RangeCell from './range-cell';
import ColorCell from './color-cell';
import LinkCell from './link-cell';
import LinkSuggestionItemCell from './link-suggestion-item-cell';
import RadioCell from './radio-cell';
import NavigationScreen from './bottom-sheet-navigation/navigation-screen';
import NavigationContainer from './bottom-sheet-navigation/navigation-container';
import KeyboardAvoidingView from './keyboard-avoiding-view';
import BottomSheetSubSheet from './sub-sheet';
import NavigationHeader from './navigation-header';
import { BottomSheetProvider } from './bottom-sheet-context';

var BottomSheet = /*#__PURE__*/function (_Component) {
  _inherits(BottomSheet, _Component);

  var _super = _createSuper(BottomSheet);

  function BottomSheet() {
    var _this;

    _classCallCheck(this, BottomSheet);

    _this = _super.apply(this, arguments);
    _this.onSafeAreaInsetsUpdate = _this.onSafeAreaInsetsUpdate.bind(_assertThisInitialized(_this));
    _this.onScroll = _this.onScroll.bind(_assertThisInitialized(_this));
    _this.isScrolling = _this.isScrolling.bind(_assertThisInitialized(_this));
    _this.onShouldEnableScroll = _this.onShouldEnableScroll.bind(_assertThisInitialized(_this));
    _this.onDismiss = _this.onDismiss.bind(_assertThisInitialized(_this));
    _this.onShouldSetBottomSheetMaxHeight = _this.onShouldSetBottomSheetMaxHeight.bind(_assertThisInitialized(_this));
    _this.setIsFullScreen = _this.setIsFullScreen.bind(_assertThisInitialized(_this));
    _this.onDimensionsChange = _this.onDimensionsChange.bind(_assertThisInitialized(_this));
    _this.onCloseBottomSheet = _this.onCloseBottomSheet.bind(_assertThisInitialized(_this));
    _this.onHandleClosingBottomSheet = _this.onHandleClosingBottomSheet.bind(_assertThisInitialized(_this));
    _this.onHardwareButtonPress = _this.onHardwareButtonPress.bind(_assertThisInitialized(_this));
    _this.onHandleHardwareButtonPress = _this.onHandleHardwareButtonPress.bind(_assertThisInitialized(_this));
    _this.keyboardWillShow = _this.keyboardWillShow.bind(_assertThisInitialized(_this));
    _this.keyboardDidHide = _this.keyboardDidHide.bind(_assertThisInitialized(_this));
    _this.state = {
      safeAreaBottomInset: 0,
      safeAreaTopInset: 0,
      bounces: false,
      maxHeight: 0,
      keyboardHeight: 0,
      scrollEnabled: true,
      isScrolling: false,
      handleClosingBottomSheet: null,
      handleHardwareButtonPress: null,
      isMaxHeightSet: true,
      isFullScreen: _this.props.isFullScreen || false
    };
    SafeArea.getSafeAreaInsetsForRootView().then(_this.onSafeAreaInsetsUpdate);
    Dimensions.addEventListener('change', _this.onDimensionsChange);
    return _this;
  }

  _createClass(BottomSheet, [{
    key: "keyboardWillShow",
    value: function keyboardWillShow(e) {
      var _this2 = this;

      var height = e.endCoordinates.height;
      this.setState({
        keyboardHeight: height
      }, function () {
        return _this2.onSetMaxHeight();
      });
    }
  }, {
    key: "keyboardDidHide",
    value: function keyboardDidHide() {
      var _this3 = this;

      this.setState({
        keyboardHeight: 0
      }, function () {
        return _this3.onSetMaxHeight();
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this4 = this;

      if (Platform.OS === 'android') {
        this.androidModalClosedSubscription = subscribeAndroidModalClosed(function () {
          _this4.props.onClose();
        });
      }

      this.keyboardWillShowListener = Keyboard.addListener('keyboardWillShow', this.keyboardWillShow);
      this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);
      this.safeAreaEventSubscription = SafeArea.addEventListener('safeAreaInsetsForRootViewDidChange', this.onSafeAreaInsetsUpdate);
      this.onSetMaxHeight();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.keyboardWillShowListener.remove();
      this.keyboardDidHideListener.remove();

      if (this.androidModalClosedSubscription) {
        this.androidModalClosedSubscription.remove();
      }

      if (this.safeAreaEventSubscription === null) {
        return;
      }

      this.safeAreaEventSubscription.remove();
      this.safeAreaEventSubscription = null;
      SafeArea.removeEventListener('safeAreaInsetsForRootViewDidChange', this.onSafeAreaInsetsUpdate);
    }
  }, {
    key: "onSafeAreaInsetsUpdate",
    value: function onSafeAreaInsetsUpdate(result) {
      var _this$state = this.state,
          safeAreaBottomInset = _this$state.safeAreaBottomInset,
          safeAreaTopInset = _this$state.safeAreaTopInset;

      if (this.safeAreaEventSubscription === null) {
        return;
      }

      var safeAreaInsets = result.safeAreaInsets;

      if (safeAreaBottomInset !== safeAreaInsets.bottom || safeAreaTopInset !== safeAreaInsets.top) {
        this.setState({
          safeAreaBottomInset: safeAreaInsets.bottom,
          safeAreaTopInset: safeAreaInsets.top
        });
      }
    }
  }, {
    key: "onSetMaxHeight",
    value: function onSetMaxHeight() {
      var _Dimensions$get = Dimensions.get('window'),
          height = _Dimensions$get.height,
          width = _Dimensions$get.width;

      var _this$state2 = this.state,
          safeAreaBottomInset = _this$state2.safeAreaBottomInset,
          keyboardHeight = _this$state2.keyboardHeight;
      var statusBarHeight = Platform.OS === 'android' ? StatusBar.currentHeight : 0; // `maxHeight` when modal is opened along with a keyboard

      var maxHeightWithOpenKeyboard = 0.95 * (Dimensions.get('window').height - keyboardHeight - statusBarHeight); // On horizontal mode `maxHeight` has to be set on 90% of width

      if (width > height) {
        this.setState({
          maxHeight: Math.min(0.9 * height, maxHeightWithOpenKeyboard)
        }); //	On vertical mode `maxHeight` has to be set on 50% of width
      } else {
        this.setState({
          maxHeight: Math.min(height / 2 - safeAreaBottomInset, maxHeightWithOpenKeyboard)
        });
      }
    }
  }, {
    key: "onDimensionsChange",
    value: function onDimensionsChange() {
      this.onSetMaxHeight();
      this.setState({
        bounces: false
      });
    }
  }, {
    key: "isCloseToBottom",
    value: function isCloseToBottom(_ref) {
      var layoutMeasurement = _ref.layoutMeasurement,
          contentOffset = _ref.contentOffset,
          contentSize = _ref.contentSize;
      return layoutMeasurement.height + contentOffset.y >= contentSize.height - contentOffset.y;
    }
  }, {
    key: "isCloseToTop",
    value: function isCloseToTop(_ref2) {
      var contentOffset = _ref2.contentOffset;
      return contentOffset.y < 10;
    }
  }, {
    key: "onScroll",
    value: function onScroll(_ref3) {
      var nativeEvent = _ref3.nativeEvent;

      if (this.isCloseToTop(nativeEvent)) {
        this.setState({
          bounces: false
        });
      } else if (this.isCloseToBottom(nativeEvent)) {
        this.setState({
          bounces: true
        });
      }
    }
  }, {
    key: "onDismiss",
    value: function onDismiss() {
      var onDismiss = this.props.onDismiss;

      if (onDismiss) {
        onDismiss();
      }

      this.onCloseBottomSheet();
    }
  }, {
    key: "onShouldEnableScroll",
    value: function onShouldEnableScroll(value) {
      this.setState({
        scrollEnabled: value
      });
    }
  }, {
    key: "onShouldSetBottomSheetMaxHeight",
    value: function onShouldSetBottomSheetMaxHeight(value) {
      this.setState({
        isMaxHeightSet: value
      });
    }
  }, {
    key: "isScrolling",
    value: function isScrolling(value) {
      this.setState({
        isScrolling: value
      });
    }
  }, {
    key: "onHandleClosingBottomSheet",
    value: function onHandleClosingBottomSheet(action) {
      this.setState({
        handleClosingBottomSheet: action
      });
    }
  }, {
    key: "onHandleHardwareButtonPress",
    value: function onHandleHardwareButtonPress(action) {
      this.setState({
        handleHardwareButtonPress: action
      });
    }
  }, {
    key: "onCloseBottomSheet",
    value: function onCloseBottomSheet() {
      var onClose = this.props.onClose;
      var handleClosingBottomSheet = this.state.handleClosingBottomSheet;

      if (handleClosingBottomSheet) {
        handleClosingBottomSheet();
        this.onHandleClosingBottomSheet(null);
      }

      if (onClose) {
        onClose();
      }

      this.onShouldSetBottomSheetMaxHeight(true);
    }
  }, {
    key: "setIsFullScreen",
    value: function setIsFullScreen(isFullScreen) {
      if (isFullScreen !== this.state.isFullScreen) {
        if (isFullScreen) {
          this.setState({
            isFullScreen: isFullScreen,
            isMaxHeightSet: false
          });
        } else {
          this.setState({
            isFullScreen: isFullScreen,
            isMaxHeightSet: true
          });
        }
      }
    }
  }, {
    key: "onHardwareButtonPress",
    value: function onHardwareButtonPress() {
      var onClose = this.props.onClose;
      var handleHardwareButtonPress = this.state.handleHardwareButtonPress;

      if (handleHardwareButtonPress && handleHardwareButtonPress()) {
        return;
      }

      if (onClose) {
        return onClose();
      }
    }
  }, {
    key: "getContentStyle",
    value: function getContentStyle() {
      var safeAreaBottomInset = this.state.safeAreaBottomInset;
      return {
        paddingBottom: (safeAreaBottomInset || 0) + styles.scrollableContent.paddingBottom
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$title = _this$props.title,
          title = _this$props$title === void 0 ? '' : _this$props$title,
          isVisible = _this$props.isVisible,
          leftButton = _this$props.leftButton,
          rightButton = _this$props.rightButton,
          hideHeader = _this$props.hideHeader,
          _this$props$style = _this$props.style,
          style = _this$props$style === void 0 ? {} : _this$props$style,
          _this$props$contentSt = _this$props.contentStyle,
          contentStyle = _this$props$contentSt === void 0 ? {} : _this$props$contentSt,
          getStylesFromColorScheme = _this$props.getStylesFromColorScheme,
          children = _this$props.children,
          _this$props$withHeade = _this$props.withHeaderSeparator,
          withHeaderSeparator = _this$props$withHeade === void 0 ? false : _this$props$withHeade,
          hasNavigation = _this$props.hasNavigation,
          rest = _objectWithoutProperties(_this$props, ["title", "isVisible", "leftButton", "rightButton", "hideHeader", "style", "contentStyle", "getStylesFromColorScheme", "children", "withHeaderSeparator", "hasNavigation"]);

      var _this$state3 = this.state,
          maxHeight = _this$state3.maxHeight,
          bounces = _this$state3.bounces,
          safeAreaBottomInset = _this$state3.safeAreaBottomInset,
          safeAreaTopInset = _this$state3.safeAreaTopInset,
          isScrolling = _this$state3.isScrolling,
          scrollEnabled = _this$state3.scrollEnabled,
          isMaxHeightSet = _this$state3.isMaxHeightSet,
          isFullScreen = _this$state3.isFullScreen;
      var panResponder = PanResponder.create({
        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {
          // 'swiping-to-close' option is temporarily and partially disabled
          //	on Android ( swipe / drag is still available in the top most area - near drag indicator)
          if (Platform.OS === 'ios') {
            // Activates swipe down over child Touchables if the swipe is long enough.
            // With this we can adjust sensibility on the swipe vs tap gestures.
            if (gestureState.dy > 3 && !bounces) {
              gestureState.dy = 0;
              return true;
            }
          }

          return false;
        }
      });
      var backgroundStyle = getStylesFromColorScheme(styles.background, styles.backgroundDark);
      var bottomSheetHeaderTitleStyle = getStylesFromColorScheme(styles.bottomSheetHeaderTitle, styles.bottomSheetHeaderTitleDark);
      var listStyle = {};

      if (isFullScreen) {
        listStyle = {
          flexGrow: 1
        };
      } else if (isMaxHeightSet) {
        listStyle = {
          maxHeight: maxHeight
        }; // Allow setting a "static" height of the bottom sheet
        // by settting the min height to the max height.

        if (this.props.setMinHeightToMaxHeight) {
          listStyle.minHeight = maxHeight;
        }
      }

      var listProps = {
        disableScrollViewPanResponder: true,
        bounces: bounces,
        onScroll: this.onScroll,
        onScrollBeginDrag: this.onScrollBeginDrag,
        onScrollEndDrag: this.onScrollEndDrag,
        scrollEventThrottle: 16,
        contentContainerStyle: [styles.content, hideHeader && styles.emptyHeader, contentStyle, isFullScreen && {
          flexGrow: 1
        }],
        style: listStyle,
        safeAreaBottomInset: safeAreaBottomInset,
        scrollEnabled: scrollEnabled,
        automaticallyAdjustContentInsets: false
      };
      var WrapperView = hasNavigation ? View : ScrollView;

      var getHeader = function getHeader() {
        return createElement(Fragment, null, createElement(View, {
          style: styles.bottomSheetHeader
        }, createElement(View, {
          style: styles.flex
        }, leftButton), createElement(Text, {
          style: bottomSheetHeaderTitleStyle,
          maxFontSizeMultiplier: 3
        }, title), createElement(View, {
          style: styles.flex
        }, rightButton)), withHeaderSeparator && createElement(View, {
          style: styles.separator
        }));
      };

      return createElement(Modal, _extends({
        isVisible: isVisible,
        style: styles.bottomModal,
        animationInTiming: 400,
        animationOutTiming: 300,
        backdropTransitionInTiming: 50,
        backdropTransitionOutTiming: 50,
        backdropOpacity: 0.2,
        onBackdropPress: this.onCloseBottomSheet,
        onBackButtonPress: this.onHardwareButtonPress,
        onSwipe: this.onCloseBottomSheet,
        onDismiss: Platform.OS === 'ios' ? this.onDismiss : undefined,
        onModalHide: Platform.OS === 'android' ? this.onDismiss : undefined,
        swipeDirection: "down",
        onMoveShouldSetResponder: scrollEnabled && panResponder.panHandlers.onMoveShouldSetResponder,
        onMoveShouldSetResponderCapture: scrollEnabled && panResponder.panHandlers.onMoveShouldSetResponderCapture,
        onAccessibilityEscape: this.onCloseBottomSheet
      }, rest), createElement(KeyboardAvoidingView, {
        behavior: Platform.OS === 'ios' && 'padding',
        style: _objectSpread(_objectSpread(_objectSpread({}, backgroundStyle), {}, {
          borderColor: 'rgba(0, 0, 0, 0.1)',
          marginTop: Platform.OS === 'ios' && isFullScreen ? safeAreaTopInset : 0,
          flex: isFullScreen ? 1 : undefined
        }, Platform.OS === 'android' && isFullScreen ? styles.backgroundFullScreen : {}), style),
        keyboardVerticalOffset: -safeAreaBottomInset
      }, !(Platform.OS === 'android' && isFullScreen) && createElement(View, {
        style: styles.dragIndicator
      }), !hideHeader && getHeader(), createElement(WrapperView, hasNavigation ? {
        style: listProps.style
      } : listProps, createElement(BottomSheetProvider, {
        value: {
          shouldEnableBottomSheetScroll: this.onShouldEnableScroll,
          shouldEnableBottomSheetMaxHeight: this.onShouldSetBottomSheetMaxHeight,
          isBottomSheetContentScrolling: isScrolling,
          onHandleClosingBottomSheet: this.onHandleClosingBottomSheet,
          onHandleHardwareButtonPress: this.onHandleHardwareButtonPress,
          listProps: listProps,
          setIsFullScreen: this.setIsFullScreen,
          safeAreaBottomInset: safeAreaBottomInset
        }
      }, hasNavigation ? createElement(Fragment, null, children) : createElement(TouchableHighlight, {
        accessible: false
      }, createElement(Fragment, null, children))), !hasNavigation && createElement(View, {
        style: {
          height: safeAreaBottomInset || styles.scrollableContent.paddingBottom
        }
      }))));
    }
  }]);

  return BottomSheet;
}(Component);

function getWidth() {
  return Math.min(Dimensions.get('window').width, styles.background.maxWidth);
}

var ThemedBottomSheet = withPreferredColorScheme(BottomSheet);
ThemedBottomSheet.getWidth = getWidth;
ThemedBottomSheet.Button = Button;
ThemedBottomSheet.Cell = Cell;
ThemedBottomSheet.SubSheet = BottomSheetSubSheet;
ThemedBottomSheet.NavigationHeader = NavigationHeader;
ThemedBottomSheet.CyclePickerCell = CyclePickerCell;
ThemedBottomSheet.PickerCell = PickerCell;
ThemedBottomSheet.SwitchCell = SwitchCell;
ThemedBottomSheet.RangeCell = RangeCell;
ThemedBottomSheet.ColorCell = ColorCell;
ThemedBottomSheet.LinkCell = LinkCell;
ThemedBottomSheet.LinkSuggestionItemCell = LinkSuggestionItemCell;
ThemedBottomSheet.RadioCell = RadioCell;
ThemedBottomSheet.NavigationScreen = NavigationScreen;
ThemedBottomSheet.NavigationContainer = NavigationContainer;
export default ThemedBottomSheet;
//# sourceMappingURL=index.native.js.map