import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { useRoute } from '@react-navigation/native';
/**
 * WordPress dependencies
 */

import { memo, useEffect, useContext } from '@wordpress/element';
import { BottomSheetContext, BottomSheet } from '@wordpress/components';
/**
 * Internal dependencies
 */

import PickerScreen from './picker-screen';
import GradientPickerScreen from './gradient-picker-screen';
import PaletteScreen from './palette.screen';
import { colorsUtils } from './utils';
var ColorSettingsMemo = memo(function (_ref) {
  var defaultSettings = _ref.defaultSettings,
      onHandleClosingBottomSheet = _ref.onHandleClosingBottomSheet,
      shouldEnableBottomSheetMaxHeight = _ref.shouldEnableBottomSheetMaxHeight,
      onColorChange = _ref.onColorChange,
      colorValue = _ref.colorValue,
      gradientValue = _ref.gradientValue,
      onGradientChange = _ref.onGradientChange,
      label = _ref.label;
  useEffect(function () {
    shouldEnableBottomSheetMaxHeight(true);
    onHandleClosingBottomSheet(null);
  }, []);
  return createElement(BottomSheet.NavigationContainer, null, createElement(BottomSheet.NavigationScreen, {
    name: colorsUtils.screens.palette,
    initialParams: {
      defaultSettings: defaultSettings,
      onColorChange: onColorChange,
      colorValue: colorValue,
      gradientValue: gradientValue,
      onGradientChange: onGradientChange,
      label: label
    }
  }, createElement(PaletteScreen, null)), createElement(BottomSheet.NavigationScreen, {
    name: colorsUtils.screens.picker
  }, createElement(PickerScreen, null)), createElement(BottomSheet.NavigationScreen, {
    name: colorsUtils.screens.gradientPicker
  }, createElement(GradientPickerScreen, null)));
});

function ColorSettings(props) {
  var route = useRoute();

  var _useContext = useContext(BottomSheetContext),
      onHandleClosingBottomSheet = _useContext.onHandleClosingBottomSheet,
      shouldEnableBottomSheetMaxHeight = _useContext.shouldEnableBottomSheetMaxHeight;

  return createElement(ColorSettingsMemo, _extends({
    onHandleClosingBottomSheet: onHandleClosingBottomSheet,
    shouldEnableBottomSheetMaxHeight: shouldEnableBottomSheetMaxHeight
  }, props, route.params));
}

export default ColorSettings;
//# sourceMappingURL=index.native.js.map