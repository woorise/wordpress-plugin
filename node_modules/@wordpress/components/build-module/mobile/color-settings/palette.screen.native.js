import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { View, Text } from 'react-native';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { useState, useContext } from '@wordpress/element';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
import { ColorControl, PanelBody, BottomSheetContext } from '@wordpress/components';
import { useRoute, useNavigation } from '@react-navigation/native';
/**
 * Internal dependencies
 */

import ColorPalette from '../../color-palette';
import ColorIndicator from '../../color-indicator';
import NavigationHeader from '../bottom-sheet/navigation-header';
import SegmentedControls from '../segmented-control';
import { colorsUtils } from './utils';
import styles from './style.scss';

var PaletteScreen = function PaletteScreen() {
  var route = useRoute();
  var navigation = useNavigation();

  var _useContext = useContext(BottomSheetContext),
      shouldEnableBottomSheetScroll = _useContext.shouldEnableBottomSheetScroll;

  var _ref = route.params || {},
      label = _ref.label,
      onColorChange = _ref.onColorChange,
      onGradientChange = _ref.onGradientChange,
      colorValue = _ref.colorValue,
      defaultSettings = _ref.defaultSettings;

  var segments = colorsUtils.segments,
      isGradient = colorsUtils.isGradient;

  var _useState = useState(colorValue),
      _useState2 = _slicedToArray(_useState, 2),
      currentValue = _useState2[0],
      setCurrentValue = _useState2[1];

  var isGradientColor = isGradient(currentValue);
  var selectedSegmentIndex = isGradientColor ? 1 : 0;

  var _useState3 = useState(segments[selectedSegmentIndex]),
      _useState4 = _slicedToArray(_useState3, 2),
      currentSegment = _useState4[0],
      setCurrentSegment = _useState4[1];

  var horizontalSeparatorStyle = usePreferredColorSchemeStyle(styles.horizontalSeparator, styles.horizontalSeparatorDark);
  var isSolidSegment = currentSegment === segments[0];
  var isCustomGadientShown = !isSolidSegment && isGradientColor;

  var setColor = function setColor(color) {
    setCurrentValue(color);

    if (isSolidSegment && onColorChange && onGradientChange) {
      onColorChange(color);
      onGradientChange('');
    } else if (isSolidSegment && onColorChange) {
      onColorChange(color);
    } else if (!isSolidSegment && onGradientChange) {
      onGradientChange(color);
      onColorChange('');
    }
  };

  function onCustomPress() {
    if (isSolidSegment) {
      navigation.navigate(colorsUtils.screens.picker, {
        currentValue: currentValue,
        setColor: setColor
      });
    } else {
      navigation.navigate(colorsUtils.screens.gradientPicker, {
        setColor: setColor,
        isGradientColor: isGradientColor,
        currentValue: currentValue
      });
    }
  }

  function getFooter() {
    if (onGradientChange) {
      return createElement(SegmentedControls, {
        segments: segments,
        segmentHandler: setCurrentSegment,
        selectedIndex: segments.indexOf(currentSegment),
        addonLeft: currentValue && createElement(ColorIndicator, {
          color: currentValue,
          style: styles.colorIndicator
        })
      });
    }

    return createElement(View, {
      style: styles.footer
    }, createElement(View, {
      style: styles.flex
    }, currentValue && createElement(ColorIndicator, {
      color: currentValue,
      style: styles.colorIndicator
    })), createElement(Text, {
      style: styles.selectColorText,
      maxFontSizeMultiplier: 2
    }, __('Select a color')), createElement(View, {
      style: styles.flex
    }));
  }

  return createElement(View, null, createElement(NavigationHeader, {
    screen: label,
    leftButtonOnPress: navigation.goBack
  }), createElement(ColorPalette, {
    setColor: setColor,
    activeColor: currentValue,
    isGradientColor: isGradientColor,
    currentSegment: currentSegment,
    onCustomPress: onCustomPress,
    shouldEnableBottomSheetScroll: shouldEnableBottomSheetScroll,
    defaultSettings: defaultSettings
  }), isCustomGadientShown && createElement(Fragment, null, createElement(View, {
    style: horizontalSeparatorStyle
  }), createElement(PanelBody, null, createElement(ColorControl, {
    label: __('Customize Gradient'),
    onPress: onCustomPress,
    withColorIndicator: false
  }))), createElement(View, {
    style: horizontalSeparatorStyle
  }), getFooter());
};

export default PaletteScreen;
//# sourceMappingURL=palette.screen.native.js.map