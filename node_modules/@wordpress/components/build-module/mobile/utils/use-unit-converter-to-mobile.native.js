import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

/**
 * External dependencies
 */
import { Dimensions } from 'react-native';
/**
 * WordPress dependencies
 */

import { useContext, useEffect, useState, useMemo, useCallback } from '@wordpress/element';
/**
 * Internal dependencies
 */

import GlobalStylesContext from '../global-styles-context';

var getValueAndUnit = function getValueAndUnit(value, unit) {
  var _ref, _ref$match;

  var regex = /(\d+\.?\d*)(.*)/;
  var splitValue = (_ref = "".concat(value)) === null || _ref === void 0 ? void 0 : (_ref$match = _ref.match(regex)) === null || _ref$match === void 0 ? void 0 : _ref$match.filter(function (v) {
    return v !== '';
  });

  if (splitValue) {
    return {
      valueToConvert: splitValue[1],
      valueUnit: unit || splitValue[2]
    };
  }

  return undefined;
};

var convertUnitToMobile = function convertUnitToMobile(containerSize, globalStyles, value, unit) {
  var width = containerSize.width,
      height = containerSize.height;

  var _ref2 = getValueAndUnit(value, unit) || {},
      valueToConvert = _ref2.valueToConvert,
      valueUnit = _ref2.valueUnit;

  var _ref3 = globalStyles || {},
      _ref3$fontSize = _ref3.fontSize,
      fontSize = _ref3$fontSize === void 0 ? 16 : _ref3$fontSize;

  switch (valueUnit) {
    case 'rem':
    case 'em':
      return valueToConvert * fontSize;

    case '%':
      return Number(valueToConvert / 100) * width;

    case 'px':
      return Number(valueToConvert);

    case 'vw':
      var vw = width / 100;
      return Math.round(valueToConvert * vw);

    case 'vh':
      var vh = height / 100;
      return Math.round(valueToConvert * vh);

    default:
      return Number(valueToConvert / 100) * width;
  }
};

var useConvertUnitToMobile = function useConvertUnitToMobile(value, unit) {
  var _useContext = useContext(GlobalStylesContext),
      styles = _useContext.globalStyles;

  var _useState = useState(Dimensions.get('window')),
      _useState2 = _slicedToArray(_useState, 2),
      windowSizes = _useState2[0],
      setWindowSizes = _useState2[1];

  useEffect(function () {
    Dimensions.addEventListener('change', onDimensionsChange);
    return function () {
      Dimensions.removeEventListener('change', onDimensionsChange);
    };
  }, []);
  var onDimensionsChange = useCallback(function (_ref4) {
    var window = _ref4.window;
    setWindowSizes(window);
  }, []);
  return useMemo(function () {
    var _getValueAndUnit = getValueAndUnit(value, unit),
        valueToConvert = _getValueAndUnit.valueToConvert,
        valueUnit = _getValueAndUnit.valueUnit;

    return convertUnitToMobile(windowSizes, styles, valueToConvert, valueUnit);
  }, [windowSizes, value, unit]);
};

export { convertUnitToMobile, useConvertUnitToMobile, getValueAndUnit };
//# sourceMappingURL=use-unit-converter-to-mobile.native.js.map