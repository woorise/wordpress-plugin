import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { KeyboardAvoidingView as IOSKeyboardAvoidingView, Animated, Keyboard, Dimensions, View } from 'react-native';
import SafeArea from 'react-native-safe-area';
/**
 * WordPress dependencies
 */

import { useEffect, useRef, useState } from '@wordpress/element';
import { useResizeObserver } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import styles from './styles.scss';
var AnimatedKeyboardAvoidingView = Animated.createAnimatedComponent(IOSKeyboardAvoidingView);
var MIN_HEIGHT = 44;
export var KeyboardAvoidingView = function KeyboardAvoidingView(_ref) {
  var parentHeight = _ref.parentHeight,
      style = _ref.style,
      _ref$withAnimatedHeig = _ref.withAnimatedHeight,
      withAnimatedHeight = _ref$withAnimatedHeig === void 0 ? false : _ref$withAnimatedHeig,
      otherProps = _objectWithoutProperties(_ref, ["parentHeight", "style", "withAnimatedHeight"]);

  var _useResizeObserver = useResizeObserver(),
      _useResizeObserver2 = _slicedToArray(_useResizeObserver, 2),
      resizeObserver = _useResizeObserver2[0],
      sizes = _useResizeObserver2[1];

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isKeyboardOpen = _useState2[0],
      setIsKeyboardOpen = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      safeAreaBottomInset = _useState4[0],
      setSafeAreaBottomInset = _useState4[1];

  var _ref2 = sizes || {},
      _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? 0 : _ref2$height;

  var animatedHeight = useRef(new Animated.Value(MIN_HEIGHT)).current;

  var _Dimensions$get = Dimensions.get('window'),
      fullHeight = _Dimensions$get.height;

  var keyboardVerticalOffset = fullHeight - parentHeight;
  useEffect(function () {
    SafeArea.getSafeAreaInsetsForRootView().then(function (_ref3) {
      var safeAreaInsets = _ref3.safeAreaInsets;
      setSafeAreaBottomInset(safeAreaInsets.bottom);
    });
    SafeArea.addEventListener('safeAreaInsetsForRootViewDidChange', onSafeAreaInsetsUpdate);
    Keyboard.addListener('keyboardWillShow', onKeyboardWillShow);
    Keyboard.addListener('keyboardWillHide', onKeyboardWillHide);
    return function () {
      SafeArea.removeEventListener('safeAreaInsetsForRootViewDidChange', onSafeAreaInsetsUpdate);
      Keyboard.removeListener('keyboardWillShow', onKeyboardWillShow);
      Keyboard.removeListener('keyboardWillHide', onKeyboardWillHide);
    };
  }, []);

  function onSafeAreaInsetsUpdate(_ref4) {
    var safeAreaInsets = _ref4.safeAreaInsets;
    setSafeAreaBottomInset(safeAreaInsets.bottom);
  }

  function onKeyboardWillShow(_ref5) {
    var endCoordinates = _ref5.endCoordinates;
    setIsKeyboardOpen(true);
    animatedHeight.setValue(endCoordinates.height + MIN_HEIGHT);
  }

  function onKeyboardWillHide(_ref6) {
    var duration = _ref6.duration,
        startCoordinates = _ref6.startCoordinates;
    // The startCoordinates.height is set to wrong value when we use cmd + k for hide the keyboard (Have no idea why).
    // Because of that the `setIsKeyboardOpened` is not invoked and the state of keyboard is wrong.
    // The keyboardIsOpenBreakpoint use 100 as a fallback if the startCoordinates.height is too small (cmd + k case)
    var keyboardIsOpenBreakpoint = startCoordinates.height > 100 ? startCoordinates.height / 3 : 100;
    var animatedListenerId = animatedHeight.addListener(function (_ref7) {
      var value = _ref7.value;

      if (value < keyboardIsOpenBreakpoint) {
        setIsKeyboardOpen(false);
      }
    });
    Animated.timing(animatedHeight, {
      toValue: MIN_HEIGHT,
      duration: duration,
      useNativeDriver: false
    }).start(function () {
      animatedHeight.removeListener(animatedListenerId);
    });
  }

  return createElement(AnimatedKeyboardAvoidingView, _extends({}, otherProps, {
    behavior: "padding",
    keyboardVerticalOffset: keyboardVerticalOffset,
    style: withAnimatedHeight ? [style, {
      height: animatedHeight,
      marginBottom: isKeyboardOpen ? -safeAreaBottomInset : 0
    }] : style
  }), createElement(View, {
    style: [{
      top: -height + MIN_HEIGHT
    }, styles.animatedChildStyle, !withAnimatedHeight && styles.defaultChildStyle]
  }, resizeObserver, otherProps.children));
};
export default KeyboardAvoidingView;
//# sourceMappingURL=index.ios.js.map