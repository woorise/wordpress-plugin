import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { View, Dimensions } from 'react-native';
/**
 * WordPress dependencies
 */

import { useState, useEffect } from '@wordpress/element';
import { ALIGNMENT_BREAKPOINTS, WIDE_ALIGNMENTS } from '@wordpress/components';
/**
 * Internal dependencies
 */

import styles from './style.scss';
var PIXEL_RATIO = 2;

var ReadableContentView = function ReadableContentView(_ref) {
  var align = _ref.align,
      reversed = _ref.reversed,
      children = _ref.children,
      style = _ref.style;

  var _Dimensions$get = Dimensions.get('window'),
      width = _Dimensions$get.width,
      height = _Dimensions$get.height;

  var _useState = useState(width),
      _useState2 = _slicedToArray(_useState, 2),
      windowWidth = _useState2[0],
      setWindowWidth = _useState2[1];

  var _useState3 = useState(width / height),
      _useState4 = _slicedToArray(_useState3, 2),
      windowRatio = _useState4[0],
      setWindowRatio = _useState4[1];

  function onDimensionsChange(_ref2) {
    var window = _ref2.window;
    setWindowWidth(window.width);
    setWindowRatio(window.width / window.height);
  }

  useEffect(function () {
    Dimensions.addEventListener('change', onDimensionsChange);
    return function () {
      Dimensions.removeEventListener('change', onDimensionsChange);
    };
  }, []);

  function getWideStyles() {
    if (windowRatio >= PIXEL_RATIO && windowWidth < ALIGNMENT_BREAKPOINTS.large) {
      return styles.wideLandscape;
    }

    if (windowWidth <= ALIGNMENT_BREAKPOINTS.small) {
      return {
        maxWidth: windowWidth
      };
    }

    if (windowWidth >= ALIGNMENT_BREAKPOINTS.medium && windowWidth < ALIGNMENT_BREAKPOINTS.wide) {
      return styles.wideMedium;
    }
  }

  return createElement(View, {
    style: styles.container
  }, createElement(View, {
    style: [reversed ? styles.reversedCenteredContent : styles.centeredContent, style, styles[align], align === WIDE_ALIGNMENTS.alignments.wide && getWideStyles()]
  }, children));
};

var isContentMaxWidth = function isContentMaxWidth() {
  var _Dimensions$get2 = Dimensions.get('window'),
      width = _Dimensions$get2.width;

  return width > styles.centeredContent.maxWidth;
};

ReadableContentView.isContentMaxWidth = isContentMaxWidth;
export default ReadableContentView;
//# sourceMappingURL=index.native.js.map