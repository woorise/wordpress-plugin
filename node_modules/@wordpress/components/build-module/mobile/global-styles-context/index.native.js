import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { pick } from 'lodash';
/**
 * WordPress dependencies
 */

import { createContext, useContext } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { BLOCK_STYLE_ATTRIBUTES, getBlockPaddings, getBlockColors } from './utils';
var GlobalStylesContext = createContext({
  style: {}
});
GlobalStylesContext.BLOCK_STYLE_ATTRIBUTES = BLOCK_STYLE_ATTRIBUTES;
export var getMergedGlobalStyles = function getMergedGlobalStyles(globalStyle, wrapperPropsStyle, blockAttributes, defaultColors) {
  var blockStyleAttributes = pick(blockAttributes, BLOCK_STYLE_ATTRIBUTES);

  var mergedStyle = _objectSpread(_objectSpread({}, globalStyle), wrapperPropsStyle);

  var blockPaddings = getBlockPaddings(mergedStyle, wrapperPropsStyle, blockStyleAttributes);
  var blockColors = getBlockColors(blockStyleAttributes, defaultColors);
  return _objectSpread(_objectSpread(_objectSpread({}, mergedStyle), blockPaddings), blockColors);
};
export var useGlobalStyles = function useGlobalStyles() {
  var globalStyles = useContext(GlobalStylesContext);
  return globalStyles;
};
export var withGlobalStyles = function withGlobalStyles(WrappedComponent) {
  return function (props) {
    return createElement(GlobalStylesContext.Consumer, null, function (globalStyles) {
      return createElement(WrappedComponent, _extends({}, props, {
        globalStyles: globalStyles
      }));
    });
  };
};
export default GlobalStylesContext;
//# sourceMappingURL=index.native.js.map