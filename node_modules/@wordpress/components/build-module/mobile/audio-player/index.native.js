import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { Text, TouchableWithoutFeedback, Linking, Alert, Platform } from 'react-native';
import { default as VideoPlayer } from 'react-native-video';
/**
 * WordPress dependencies
 */

import { View } from '@wordpress/primitives';
import { Icon } from '@wordpress/components';
import { withPreferredColorScheme } from '@wordpress/compose';
import { __ } from '@wordpress/i18n';
import { audio, warning } from '@wordpress/icons';
import { requestImageFailedRetryDialog, requestImageUploadCancelDialog } from '@wordpress/react-native-bridge';
import { getProtocol, safeDecodeURI } from '@wordpress/url';
import { useState } from '@wordpress/element';
/**
 * Internal dependencies
 */

import styles from './styles.scss';
var isIOS = Platform.OS === 'ios';

function Player(_ref) {
  var _this = this;

  var getStylesFromColorScheme = _ref.getStylesFromColorScheme,
      isUploadInProgress = _ref.isUploadInProgress,
      isUploadFailed = _ref.isUploadFailed,
      attributes = _ref.attributes,
      isSelected = _ref.isSelected;
  var id = attributes.id,
      src = attributes.src;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      paused = _useState2[0],
      setPaused = _useState2[1];

  var onPressListen = function onPressListen() {
    if (src) {
      if (isIOS && _this.player) {
        _this.player.presentFullscreenPlayer();

        return;
      }

      Linking.canOpenURL(src).then(function (supported) {
        if (!supported) {
          Alert.alert(__('Problem opening the audio'), __('No application can handle this request.'));
        } else {
          return Linking.openURL(src);
        }
      }).catch(function () {
        Alert.alert(__('Problem opening the audio'), __('An unknown error occurred. Please try again.'));
      });
    }
  };

  var containerStyle = getStylesFromColorScheme(styles.container, styles.containerDark);
  var iconStyle = getStylesFromColorScheme(styles.icon, styles.iconDark);
  var iconDisabledStyle = getStylesFromColorScheme(styles.iconDisabled, styles.iconDisabledDark);
  var isDisabled = isUploadFailed || isUploadInProgress;

  var finalIconStyle = _objectSpread(_objectSpread({}, iconStyle), isDisabled && iconDisabledStyle);

  var iconContainerStyle = getStylesFromColorScheme(styles.iconContainer, styles.iconContainerDark);

  var titleContainerStyle = _objectSpread(_objectSpread({}, styles.titleContainer), isIOS ? styles.titleContainerIOS : styles.titleContainerAndroid);

  var titleStyle = getStylesFromColorScheme(styles.title, styles.titleDark);
  var uploadFailedStyle = getStylesFromColorScheme(styles.uploadFailed, styles.uploadFailedDark);
  var subtitleStyle = getStylesFromColorScheme(styles.subtitle, styles.subtitleDark);

  var finalSubtitleStyle = _objectSpread(_objectSpread({}, subtitleStyle), isUploadFailed && uploadFailedStyle);

  var buttonBackgroundStyle = getStylesFromColorScheme(styles.buttonBackground, styles.buttonBackgroundDark);
  var title = '';
  var extension = '';

  if (src) {
    var decodedURI = safeDecodeURI(src);
    var fileName = decodedURI.split('/').pop();
    var parts = fileName.split('.');
    extension = parts.pop().toUpperCase();
    title = parts.join('.');
  }

  var getSubtitleValue = function getSubtitleValue() {
    if (isUploadInProgress) {
      return __('Uploadingâ€¦');
    }

    if (isUploadFailed) {
      return __('Failed to insert audio file. Please tap for options.');
    }

    return extension + // translators: displays audio file extension. e.g. MP3 audio file
    __(' audio file');
  };

  function onAudioUploadCancelDialog() {
    if (isUploadInProgress) {
      requestImageUploadCancelDialog(id);
    } else if (id && getProtocol(src) === 'file:') {
      requestImageFailedRetryDialog(id);
    }
  }

  return createElement(TouchableWithoutFeedback, {
    accessible: !isSelected,
    disabled: !isSelected,
    onPress: onAudioUploadCancelDialog
  }, createElement(View, {
    style: containerStyle
  }, createElement(View, {
    style: iconContainerStyle
  }, createElement(Icon, {
    icon: audio,
    style: finalIconStyle,
    size: 24
  })), createElement(View, {
    style: titleContainerStyle
  }, createElement(Text, {
    style: titleStyle
  }, title), createElement(View, {
    style: styles.subtitleContainer
  }, isUploadFailed && createElement(Icon, {
    icon: warning,
    style: _objectSpread(_objectSpread({}, styles.errorIcon), uploadFailedStyle),
    size: 16
  }), createElement(Text, {
    style: finalSubtitleStyle
  }, getSubtitleValue()))), !isDisabled && createElement(TouchableWithoutFeedback, {
    accessibilityLabel: __('Audio Player'),
    accessibilityRole: 'button',
    accessibilityHint: __('Double tap to listen the audio file'),
    onPress: onPressListen
  }, createElement(View, {
    style: buttonBackgroundStyle
  }, createElement(Text, {
    style: styles.buttonText
  }, __('OPEN')))), isIOS && createElement(VideoPlayer, {
    source: {
      uri: src
    },
    paused: paused,
    ref: function ref(_ref2) {
      _this.player = _ref2;
    },
    controls: false,
    ignoreSilentSwitch: 'ignore',
    onFullscreenPlayerWillPresent: function onFullscreenPlayerWillPresent() {
      setPaused(false);
    },
    onFullscreenPlayerDidDismiss: function onFullscreenPlayerDidDismiss() {
      setPaused(true);
    }
  })));
}

export default withPreferredColorScheme(Player);
//# sourceMappingURL=index.native.js.map