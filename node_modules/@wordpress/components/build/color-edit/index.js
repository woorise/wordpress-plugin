"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ColorEdit;

var _element = require("@wordpress/element");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _dropdown = _interopRequireDefault(require("../dropdown"));

var _circularOptionPicker = _interopRequireDefault(require("../circular-option-picker"));

var _colorPicker = _interopRequireDefault(require("../color-picker"));

var _button = _interopRequireDefault(require("../button"));

var _textControl = _interopRequireDefault(require("../text-control"));

var _baseControl = _interopRequireDefault(require("../base-control"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function DropdownOpenOnMount(_ref) {
  var shouldOpen = _ref.shouldOpen,
      isOpen = _ref.isOpen,
      onToggle = _ref.onToggle;
  (0, _element.useEffect)(function () {
    if (shouldOpen && !isOpen) {
      onToggle();
    }
  }, []);
  return null;
}

function ColorOption(_ref2) {
  var color = _ref2.color,
      name = _ref2.name,
      slug = _ref2.slug,
      _onChange = _ref2.onChange,
      onRemove = _ref2.onRemove,
      onConfirm = _ref2.onConfirm,
      _ref2$confirmLabel = _ref2.confirmLabel,
      confirmLabel = _ref2$confirmLabel === void 0 ? (0, _i18n.__)('OK') : _ref2$confirmLabel,
      _ref2$isEditingNameOn = _ref2.isEditingNameOnMount,
      isEditingNameOnMount = _ref2$isEditingNameOn === void 0 ? false : _ref2$isEditingNameOn,
      _ref2$isEditingColorO = _ref2.isEditingColorOnMount,
      isEditingColorOnMount = _ref2$isEditingColorO === void 0 ? false : _ref2$isEditingColorO,
      onCancel = _ref2.onCancel,
      _ref2$immutableColorS = _ref2.immutableColorSlugs,
      immutableColorSlugs = _ref2$immutableColorS === void 0 ? [] : _ref2$immutableColorS;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isHover = _useState2[0],
      setIsHover = _useState2[1];

  var _useState3 = (0, _element.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isFocused = _useState4[0],
      setIsFocused = _useState4[1];

  var _useState5 = (0, _element.useState)(isEditingNameOnMount),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      isEditingName = _useState6[0],
      setIsEditingName = _useState6[1];

  var _useState7 = (0, _element.useState)(false),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      isShowingAdvancedPanel = _useState8[0],
      setIsShowingAdvancedPanel = _useState8[1];

  var isShowingControls = (isHover || isFocused || isEditingName || isShowingAdvancedPanel) && !immutableColorSlugs.includes(slug);
  return (0, _element.createElement)("div", {
    tabIndex: 0,
    className: (0, _classnames.default)('components-color-edit__color-option', {
      'is-hover': isHover && !isEditingName && !isShowingAdvancedPanel
    }),
    onMouseEnter: function onMouseEnter() {
      return setIsHover(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setIsHover(false);
    },
    onFocus: function onFocus() {
      return setIsFocused(true);
    },
    onBlur: function onBlur() {
      return setIsFocused(false);
    },
    "aria-label": name ? // translators: %s: The name of the color e.g: "vivid red".
    (0, _i18n.sprintf)((0, _i18n.__)('Color: %s'), name) : // translators: %s: color hex code e.g: "#f00".
    (0, _i18n.sprintf)((0, _i18n.__)('Color code: %s'), color)
  }, (0, _element.createElement)("div", {
    className: "components-color-edit__color-option-main-area"
  }, (0, _element.createElement)(_dropdown.default, {
    renderToggle: function renderToggle(_ref3) {
      var isOpen = _ref3.isOpen,
          onToggle = _ref3.onToggle;
      return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(DropdownOpenOnMount, {
        shouldOpen: isEditingColorOnMount,
        isOpen: isOpen,
        onToggle: onToggle
      }), (0, _element.createElement)(_circularOptionPicker.default.Option, {
        style: {
          backgroundColor: color,
          color: color
        },
        "aria-expanded": isOpen,
        "aria-haspopup": "true",
        onClick: onToggle,
        "aria-label": (0, _i18n.__)('Edit color value')
      }));
    },
    renderContent: function renderContent() {
      return (0, _element.createElement)(_colorPicker.default, {
        color: color,
        onChangeComplete: function onChangeComplete(newColor) {
          return _onChange({
            color: newColor.hex,
            slug: slug,
            name: name
          });
        },
        disableAlpha: true
      });
    }
  }), !isEditingName && (0, _element.createElement)("div", {
    className: "components-color-edit__color-option-color-name"
  }, name), isEditingName && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_textControl.default, {
    className: "components-color-edit__color-option-color-name-input",
    hideLabelFromVision: true,
    onChange: function onChange(newColorName) {
      return _onChange({
        color: color,
        slug: (0, _lodash.kebabCase)(newColorName),
        name: newColorName
      });
    },
    label: (0, _i18n.__)('Color name'),
    placeholder: (0, _i18n.__)('Name'),
    value: name
  }), (0, _element.createElement)(_button.default, {
    onClick: function onClick() {
      setIsEditingName(false);
      setIsFocused(false);

      if (onConfirm) {
        onConfirm();
      }
    },
    isPrimary: true
  }, confirmLabel)), !isEditingName && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_button.default, {
    className: (0, _classnames.default)({
      'components-color-edit__hidden-control': !isShowingControls
    }),
    icon: _icons.edit,
    label: (0, _i18n.__)('Edit color name'),
    onClick: function onClick() {
      return setIsEditingName(true);
    }
  }), (0, _element.createElement)(_button.default, {
    className: (0, _classnames.default)({
      'components-color-edit__hidden-control': !isShowingControls
    }),
    icon: _icons.close,
    label: (0, _i18n.__)('Remove color'),
    onClick: onRemove
  })), (0, _element.createElement)(_button.default, {
    className: (0, _classnames.default)({
      'components-color-edit__hidden-control': !isShowingControls
    }),
    icon: isShowingAdvancedPanel ? _icons.chevronUp : _icons.chevronDown,
    label: (0, _i18n.__)('Additional color settings'),
    onClick: function onClick() {
      if (isShowingAdvancedPanel) {
        setIsFocused(false);
      }

      setIsShowingAdvancedPanel(!isShowingAdvancedPanel);
    },
    "aria-expanded": isShowingAdvancedPanel
  })), onCancel && (0, _element.createElement)(_button.default, {
    className: "components-color-edit__cancel-button",
    onClick: onCancel
  }, (0, _i18n.__)('Cancel')), isShowingAdvancedPanel && (0, _element.createElement)(_textControl.default, {
    className: "components-color-edit__slug-input",
    onChange: function onChange(newSlug) {
      return _onChange({
        color: color,
        slug: newSlug,
        name: name
      });
    },
    label: (0, _i18n.__)('Slug'),
    value: slug
  }));
}

function ColorInserter(_ref4) {
  var onInsert = _ref4.onInsert,
      onCancel = _ref4.onCancel;

  var _useState9 = (0, _element.useState)({
    color: '#fff',
    name: '',
    slug: ''
  }),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      color = _useState10[0],
      setColor = _useState10[1];

  return (0, _element.createElement)(ColorOption, {
    color: color.color,
    name: color.name,
    slug: color.slug,
    onChange: setColor,
    confirmLabel: (0, _i18n.__)('Save'),
    onConfirm: function onConfirm() {
      return onInsert(color);
    },
    isEditingNameOnMount: true,
    isEditingColorOnMount: true,
    onCancel: onCancel
  });
}

function ColorEdit(_ref5) {
  var colors = _ref5.colors,
      _onChange2 = _ref5.onChange,
      emptyUI = _ref5.emptyUI,
      immutableColorSlugs = _ref5.immutableColorSlugs,
      _ref5$canReset = _ref5.canReset,
      canReset = _ref5$canReset === void 0 ? true : _ref5$canReset;

  var _useState11 = (0, _element.useState)(false),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      isInsertingColor = _useState12[0],
      setIsInsertingColor = _useState12[1];

  return (0, _element.createElement)(_baseControl.default, null, (0, _element.createElement)("fieldset", null, (0, _element.createElement)("div", {
    className: "components-color-edit__label-and-insert-container"
  }, (0, _element.createElement)("legend", null, (0, _element.createElement)("div", null, (0, _element.createElement)(_baseControl.default.VisualLabel, null, (0, _i18n.__)('Color palette')))), !isInsertingColor && (0, _element.createElement)(_button.default, {
    onClick: function onClick() {
      setIsInsertingColor(true);
    },
    className: "components-color-edit__insert-button",
    icon: _icons.plus
  })), (0, _element.createElement)("div", null, !(0, _lodash.isEmpty)(colors) && colors.map(function (color, index) {
    return (0, _element.createElement)(ColorOption, {
      key: index,
      color: color.color,
      name: color.name,
      slug: color.slug,
      immutableColorSlugs: immutableColorSlugs,
      onChange: function onChange(newColor) {
        _onChange2(colors.map(function (currentColor, currentIndex) {
          if (currentIndex === index) {
            return newColor;
          }

          return currentColor;
        }));
      },
      onRemove: function onRemove() {
        _onChange2(colors.filter(function (_currentColor, currentIndex) {
          if (currentIndex === index) {
            return false;
          }

          return true;
        }));
      }
    });
  }), isInsertingColor && (0, _element.createElement)(ColorInserter, {
    onInsert: function onInsert(newColor) {
      setIsInsertingColor(false);

      _onChange2([].concat((0, _toConsumableArray2.default)(colors || []), [newColor]));
    },
    onCancel: function onCancel() {
      return setIsInsertingColor(false);
    }
  }), !isInsertingColor && (0, _lodash.isEmpty)(colors) && emptyUI), !!canReset && (0, _element.createElement)(_button.default, {
    isSmall: true,
    isSecondary: true,
    className: "components-color-edit__reset-button",
    onClick: function onClick() {
      return _onChange2();
    }
  }, (0, _i18n.__)('Reset'))));
}
//# sourceMappingURL=index.js.map