"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NavigationMenu;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("../constants");

var _context = require("./context");

var _context2 = require("../context");

var _useNavigationTreeMenu = require("./use-navigation-tree-menu");

var _backButton = _interopRequireDefault(require("../back-button"));

var _menuTitle = _interopRequireDefault(require("./menu-title"));

var _searchNoResultsFound = _interopRequireDefault(require("./search-no-results-found"));

var _navigableContainer = require("../../navigable-container");

var _navigationStyles = require("../styles/navigation-styles");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function NavigationMenu(props) {
  var backButtonLabel = props.backButtonLabel,
      children = props.children,
      className = props.className,
      hasSearch = props.hasSearch,
      _props$menu = props.menu,
      menu = _props$menu === void 0 ? _constants.ROOT_MENU : _props$menu,
      onBackButtonClick = props.onBackButtonClick,
      setControlledSearch = props.onSearch,
      parentMenu = props.parentMenu,
      controlledSearch = props.search,
      isSearchDebouncing = props.isSearchDebouncing,
      title = props.title,
      titleAction = props.titleAction;

  var _useState = (0, _element.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      uncontrolledSearch = _useState2[0],
      setUncontrolledSearch = _useState2[1];

  (0, _useNavigationTreeMenu.useNavigationTreeMenu)(props);

  var _useNavigationContext = (0, _context2.useNavigationContext)(),
      activeMenu = _useNavigationContext.activeMenu;

  var context = {
    menu: menu,
    search: uncontrolledSearch
  }; // Keep the children rendered to make sure invisible items are included in the navigation tree

  if (activeMenu !== menu) {
    return (0, _element.createElement)(_context.NavigationMenuContext.Provider, {
      value: context
    }, children);
  }

  var isControlledSearch = !!setControlledSearch;
  var search = isControlledSearch ? controlledSearch : uncontrolledSearch;
  var onSearch = isControlledSearch ? setControlledSearch : setUncontrolledSearch;
  var menuTitleId = "components-navigation__menu-title-".concat(menu);
  var classes = (0, _classnames.default)('components-navigation__menu', className);
  return (0, _element.createElement)(_context.NavigationMenuContext.Provider, {
    value: context
  }, (0, _element.createElement)(_navigationStyles.MenuUI, {
    className: classes
  }, (parentMenu || onBackButtonClick) && (0, _element.createElement)(_backButton.default, {
    backButtonLabel: backButtonLabel,
    parentMenu: parentMenu,
    onClick: onBackButtonClick
  }), (0, _element.createElement)(_menuTitle.default, {
    hasSearch: hasSearch,
    onSearch: onSearch,
    search: search,
    title: title,
    titleAction: titleAction
  }), (0, _element.createElement)(_navigableContainer.NavigableMenu, null, (0, _element.createElement)("ul", {
    "aria-labelledby": menuTitleId
  }, children, search && !isSearchDebouncing && (0, _element.createElement)(_searchNoResultsFound.default, {
    search: search
  })))));
}
//# sourceMappingURL=index.js.map