"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NavigationItem;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

var _button = _interopRequireDefault(require("../../button"));

var _context = require("../context");

var _navigationStyles = require("../styles/navigation-styles");

var _baseContent = _interopRequireDefault(require("./base-content"));

var _base = _interopRequireDefault(require("./base"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function NavigationItem(props) {
  var badge = props.badge,
      children = props.children,
      className = props.className,
      href = props.href,
      item = props.item,
      navigateToMenu = props.navigateToMenu,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? _lodash.noop : _props$onClick,
      title = props.title,
      hideIfTargetMenuEmpty = props.hideIfTargetMenuEmpty,
      isText = props.isText,
      restProps = (0, _objectWithoutProperties2.default)(props, ["badge", "children", "className", "href", "item", "navigateToMenu", "onClick", "title", "hideIfTargetMenuEmpty", "isText"]);

  var _useNavigationContext = (0, _context.useNavigationContext)(),
      activeItem = _useNavigationContext.activeItem,
      setActiveMenu = _useNavigationContext.setActiveMenu,
      isMenuEmpty = _useNavigationContext.navigationTree.isMenuEmpty; // If hideIfTargetMenuEmpty prop is true
  // And the menu we are supposed to navigate to
  // Is marked as empty, then we skip rendering the item


  if (hideIfTargetMenuEmpty && navigateToMenu && isMenuEmpty(navigateToMenu)) {
    return null;
  }

  var classes = (0, _classnames.default)(className, {
    'is-active': item && activeItem === item
  });

  var onItemClick = function onItemClick(event) {
    if (navigateToMenu) {
      setActiveMenu(navigateToMenu);
    }

    onClick(event);
  };

  var icon = (0, _i18n.isRTL)() ? _icons.chevronLeft : _icons.chevronRight;
  var baseProps = isText ? restProps : _objectSpread({
    as: _button.default,
    href: href,
    onClick: onItemClick
  }, restProps);
  return (0, _element.createElement)(_base.default, (0, _extends2.default)({}, props, {
    className: classes
  }), children || (0, _element.createElement)(_navigationStyles.ItemUI, baseProps, (0, _element.createElement)(_baseContent.default, {
    title: title,
    badge: badge
  }), navigateToMenu && (0, _element.createElement)(_icons.Icon, {
    icon: icon
  })));
}
//# sourceMappingURL=index.js.map