"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNavigationTreeNodes = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _element = require("@wordpress/element");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useNavigationTreeNodes = function useNavigationTreeNodes() {
  var _useState = (0, _element.useState)({}),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      nodes = _useState2[0],
      setNodes = _useState2[1];

  var getNode = function getNode(key) {
    return nodes[key];
  };

  var addNode = function addNode(key, value) {
    return setNodes(function (original) {
      return _objectSpread(_objectSpread({}, original), {}, (0, _defineProperty2.default)({}, key, (0, _lodash.omit)(value, 'children')));
    });
  };

  var removeNode = function removeNode(key) {
    return setNodes(function (original) {
      return (0, _lodash.omit)(original, key);
    });
  };

  return {
    nodes: nodes,
    getNode: getNode,
    addNode: addNode,
    removeNode: removeNode
  };
};

exports.useNavigationTreeNodes = useNavigationTreeNodes;
//# sourceMappingURL=use-navigation-tree-nodes.js.map