"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCreateNavigationTree = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _element = require("@wordpress/element");

var _useNavigationTreeNodes = require("./use-navigation-tree-nodes");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useCreateNavigationTree = function useCreateNavigationTree() {
  var _useNavigationTreeNod = (0, _useNavigationTreeNodes.useNavigationTreeNodes)(),
      items = _useNavigationTreeNod.nodes,
      getItem = _useNavigationTreeNod.getNode,
      addItem = _useNavigationTreeNod.addNode,
      removeItem = _useNavigationTreeNod.removeNode;

  var _useNavigationTreeNod2 = (0, _useNavigationTreeNodes.useNavigationTreeNodes)(),
      menus = _useNavigationTreeNod2.nodes,
      getMenu = _useNavigationTreeNod2.getNode,
      _addMenu = _useNavigationTreeNod2.addNode,
      removeMenu = _useNavigationTreeNod2.removeNode;
  /**
   * Stores direct nested menus of menus
   * This makes it easy to traverse menu tree
   *
   * Key is the menu prop of the menu
   * Value is an array of menu keys
   */


  var _useState = (0, _element.useState)({}),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      childMenu = _useState2[0],
      setChildMenu = _useState2[1];

  var getChildMenu = function getChildMenu(menu) {
    return childMenu[menu] || [];
  };

  var traverseMenu = function traverseMenu(startMenu, callback) {
    var visited = [];
    var queue = [startMenu];
    var current;

    while (queue.length > 0) {
      current = getMenu(queue.shift());

      if (!current || visited.includes(current.menu)) {
        continue;
      }

      visited.push(current.menu);
      queue = [].concat((0, _toConsumableArray2.default)(queue), (0, _toConsumableArray2.default)(getChildMenu(current.menu)));

      if (callback(current) === false) {
        break;
      }
    }
  };

  var isMenuEmpty = function isMenuEmpty(menuToCheck) {
    var isEmpty = true;
    traverseMenu(menuToCheck, function (current) {
      if (!current.isEmpty) {
        isEmpty = false;
        return false;
      }
    });
    return isEmpty;
  };

  return {
    items: items,
    getItem: getItem,
    addItem: addItem,
    removeItem: removeItem,
    menus: menus,
    getMenu: getMenu,
    addMenu: function addMenu(key, value) {
      setChildMenu(function (state) {
        var newState = _objectSpread({}, state);

        if (!newState[value.parentMenu]) {
          newState[value.parentMenu] = [];
        }

        newState[value.parentMenu].push(key);
        return newState;
      });

      _addMenu(key, value);
    },
    removeMenu: removeMenu,
    childMenu: childMenu,
    traverseMenu: traverseMenu,
    isMenuEmpty: isMenuEmpty
  };
};

exports.useCreateNavigationTree = useCreateNavigationTree;
//# sourceMappingURL=use-create-navigation-tree.js.map