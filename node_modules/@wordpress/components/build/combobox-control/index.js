"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _keycodes = require("@wordpress/keycodes");

var _a11y = require("@wordpress/a11y");

var _icons = require("@wordpress/icons");

var _tokenInput = _interopRequireDefault(require("../form-token-field/token-input"));

var _suggestionsList = _interopRequireDefault(require("../form-token-field/suggestions-list"));

var _baseControl = _interopRequireDefault(require("../base-control"));

var _button = _interopRequireDefault(require("../button"));

var _flex = require("../flex");

var _withFocusOutside = _interopRequireDefault(require("../higher-order/with-focus-outside"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var DetectOutside = (0, _withFocusOutside.default)( /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(_class, _Component);

  var _super = _createSuper(_class);

  function _class() {
    (0, _classCallCheck2.default)(this, _class);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(_class, [{
    key: "handleFocusOutside",
    value: function handleFocusOutside(event) {
      this.props.onFocusOutside(event);
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);
  return _class;
}(_element.Component));

function ComboboxControl(_ref) {
  var _currentOption$label;

  var value = _ref.value,
      label = _ref.label,
      options = _ref.options,
      onChange = _ref.onChange,
      _ref$onFilterValueCha = _ref.onFilterValueChange,
      onFilterValueChange = _ref$onFilterValueCha === void 0 ? _lodash.noop : _ref$onFilterValueCha,
      hideLabelFromVision = _ref.hideLabelFromVision,
      help = _ref.help,
      _ref$allowReset = _ref.allowReset,
      allowReset = _ref$allowReset === void 0 ? true : _ref$allowReset,
      className = _ref.className,
      _ref$messages = _ref.messages,
      messages = _ref$messages === void 0 ? {
    selected: (0, _i18n.__)('Item selected.')
  } : _ref$messages;
  var instanceId = (0, _compose.useInstanceId)(ComboboxControl);

  var _useState = (0, _element.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      selectedSuggestion = _useState2[0],
      setSelectedSuggestion = _useState2[1];

  var _useState3 = (0, _element.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isExpanded = _useState4[0],
      setIsExpanded = _useState4[1];

  var _useState5 = (0, _element.useState)(''),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      inputValue = _useState6[0],
      setInputValue = _useState6[1];

  var inputContainer = (0, _element.useRef)();
  var currentOption = options.find(function (option) {
    return option.value === value;
  });
  var currentLabel = (_currentOption$label = currentOption === null || currentOption === void 0 ? void 0 : currentOption.label) !== null && _currentOption$label !== void 0 ? _currentOption$label : '';
  var matchingSuggestions = (0, _element.useMemo)(function () {
    var startsWithMatch = [];
    var containsMatch = [];
    var match = (0, _lodash.deburr)(inputValue.toLocaleLowerCase());
    options.forEach(function (option) {
      var index = (0, _lodash.deburr)(option.label).toLocaleLowerCase().indexOf(match);

      if (index === 0) {
        startsWithMatch.push(option);
      } else if (index > 0) {
        containsMatch.push(option);
      }
    });
    return startsWithMatch.concat(containsMatch);
  }, [inputValue, options, value]);

  var onSuggestionSelected = function onSuggestionSelected(newSelectedSuggestion) {
    onChange(newSelectedSuggestion.value);
    (0, _a11y.speak)(messages.selected, 'assertive');
    setSelectedSuggestion(newSelectedSuggestion);
    setInputValue('');
    setIsExpanded(false);
  };

  var handleArrowNavigation = function handleArrowNavigation() {
    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var index = matchingSuggestions.indexOf(selectedSuggestion);
    var nextIndex = index + offset;

    if (nextIndex < 0) {
      nextIndex = matchingSuggestions.length - 1;
    } else if (nextIndex >= matchingSuggestions.length) {
      nextIndex = 0;
    }

    setSelectedSuggestion(matchingSuggestions[nextIndex]);
    setIsExpanded(true);
  };

  var onKeyDown = function onKeyDown(event) {
    var preventDefault = false;

    switch (event.keyCode) {
      case _keycodes.ENTER:
        if (selectedSuggestion) {
          onSuggestionSelected(selectedSuggestion);
          preventDefault = true;
        }

        break;

      case _keycodes.UP:
        handleArrowNavigation(-1);
        preventDefault = true;
        break;

      case _keycodes.DOWN:
        handleArrowNavigation(1);
        preventDefault = true;
        break;

      case _keycodes.ESCAPE:
        setIsExpanded(false);
        setSelectedSuggestion(null);
        preventDefault = true;
        event.stopPropagation();
        break;

      default:
        break;
    }

    if (preventDefault) {
      event.preventDefault();
    }
  };

  var onFocus = function onFocus() {
    setIsExpanded(true);
    onFilterValueChange('');
    setInputValue('');
  };

  var onFocusOutside = function onFocusOutside() {
    setIsExpanded(false);
  };

  var onInputChange = function onInputChange(event) {
    var text = event.value;
    setInputValue(text);
    onFilterValueChange(text);
    setIsExpanded(true);
  };

  var handleOnReset = function handleOnReset() {
    onChange(null);
    inputContainer.current.input.focus();
  }; // Announcements


  (0, _element.useEffect)(function () {
    var hasMatchingSuggestions = matchingSuggestions.length > 0;

    if (isExpanded) {
      var message = hasMatchingSuggestions ? (0, _i18n.sprintf)(
      /* translators: %d: number of results. */
      (0, _i18n._n)('%d result found, use up and down arrow keys to navigate.', '%d results found, use up and down arrow keys to navigate.', matchingSuggestions.length), matchingSuggestions.length) : (0, _i18n.__)('No results.');
      (0, _a11y.speak)(message, 'polite');
    }
  }, [matchingSuggestions, isExpanded]); // Disable reason: There is no appropriate role which describes the
  // input container intended accessible usability.
  // TODO: Refactor click detection to use blur to stop propagation.

  /* eslint-disable jsx-a11y/no-static-element-interactions */

  return (0, _element.createElement)(DetectOutside, {
    onFocusOutside: onFocusOutside
  }, (0, _element.createElement)(_baseControl.default, {
    className: (0, _classnames.default)(className, 'components-combobox-control'),
    tabIndex: "-1",
    label: label,
    id: "components-form-token-input-".concat(instanceId),
    hideLabelFromVision: hideLabelFromVision,
    help: help
  }, (0, _element.createElement)("div", {
    className: "components-combobox-control__suggestions-container",
    tabIndex: "-1",
    onKeyDown: onKeyDown
  }, (0, _element.createElement)(_flex.Flex, null, (0, _element.createElement)(_flex.FlexBlock, null, (0, _element.createElement)(_tokenInput.default, {
    className: "components-combobox-control__input",
    instanceId: instanceId,
    ref: inputContainer,
    value: isExpanded ? inputValue : currentLabel,
    "aria-label": currentLabel ? "".concat(currentLabel, ", ").concat(label) : null,
    onFocus: onFocus,
    isExpanded: isExpanded,
    selectedSuggestionIndex: matchingSuggestions.indexOf(selectedSuggestion),
    onChange: onInputChange
  })), allowReset && (0, _element.createElement)(_flex.FlexItem, null, (0, _element.createElement)(_button.default, {
    className: "components-combobox-control__reset",
    icon: _icons.closeSmall,
    disabled: !value,
    onClick: handleOnReset,
    label: (0, _i18n.__)('Reset')
  }))), isExpanded && (0, _element.createElement)(_suggestionsList.default, {
    instanceId: instanceId,
    match: {
      label: inputValue
    },
    displayTransform: function displayTransform(suggestion) {
      return suggestion.label;
    },
    suggestions: matchingSuggestions,
    selectedIndex: matchingSuggestions.indexOf(selectedSuggestion),
    onHover: setSelectedSuggestion,
    onSelect: onSuggestionSelected,
    scrollIntoView: true
  }))));
  /* eslint-enable jsx-a11y/no-static-element-interactions */
}

var _default = ComboboxControl;
exports.default = _default;
//# sourceMappingURL=index.js.map