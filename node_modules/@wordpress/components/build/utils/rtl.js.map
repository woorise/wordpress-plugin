{"version":3,"sources":["@wordpress/components/src/utils/rtl.js"],"names":["LOWER_LEFT_REGEXP","RegExp","LOWER_RIGHT_REGEXP","UPPER_LEFT_REGEXP","UPPER_RIGHT_REGEXP","getConvertedKey","key","test","replace","convertLTRToRTL","ltrStyles","_value","rtl","rtlStyles"],"mappings":";;;;;;;;AAGA;;AACA;;AAKA;;AATA;AACA;AACA;;AAIA;AACA;AACA;AAGA,IAAMA,iBAAiB,GAAG,IAAIC,MAAJ,CAAY,QAAZ,CAA1B;AACA,IAAMC,kBAAkB,GAAG,IAAID,MAAJ,CAAY,SAAZ,CAA3B;AACA,IAAME,iBAAiB,GAAG,IAAIF,MAAJ,CAAY,OAAZ,CAA1B;AACA,IAAMG,kBAAkB,GAAG,IAAIH,MAAJ,CAAY,QAAZ,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,eAAT,CAA0BC,GAA1B,EAAgC;AAC/B,MAAKA,GAAG,KAAK,MAAb,EAAsB;AACrB,WAAO,OAAP;AACA;;AAED,MAAKA,GAAG,KAAK,OAAb,EAAuB;AACtB,WAAO,MAAP;AACA;;AAED,MAAKN,iBAAiB,CAACO,IAAlB,CAAwBD,GAAxB,CAAL,EAAqC;AACpC,WAAOA,GAAG,CAACE,OAAJ,CAAaR,iBAAb,EAAgC,QAAhC,CAAP;AACA;;AAED,MAAKE,kBAAkB,CAACK,IAAnB,CAAyBD,GAAzB,CAAL,EAAsC;AACrC,WAAOA,GAAG,CAACE,OAAJ,CAAaN,kBAAb,EAAiC,OAAjC,CAAP;AACA;;AAED,MAAKC,iBAAiB,CAACI,IAAlB,CAAwBD,GAAxB,CAAL,EAAqC;AACpC,WAAOA,GAAG,CAACE,OAAJ,CAAaL,iBAAb,EAAgC,OAAhC,CAAP;AACA;;AAED,MAAKC,kBAAkB,CAACG,IAAnB,CAAyBD,GAAzB,CAAL,EAAsC;AACrC,WAAOA,GAAG,CAACE,OAAJ,CAAaJ,kBAAb,EAAiC,MAAjC,CAAP;AACA;;AAED,SAAOE,GAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAsB;AAAA,MAApBC,SAAoB,uEAAR,EAAQ;AACpD,SAAO,qBAASA,SAAT,EAAoB,UAAEC,MAAF,EAAUL,GAAV;AAAA,WAAmBD,eAAe,CAAEC,GAAF,CAAlC;AAAA,GAApB,CAAP;AACA,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,SAASM,GAAT,GAA0C;AAAA,MAA5BF,SAA4B,uEAAhB,EAAgB;AAAA,MAAZG,SAAY;AAChD,SAAO,YAAM;AACZ,QAAKA,SAAL,EAAiB;AAChB;AACA,aAAO,kCAAU,eAAKA,SAAL,69GAAV,gBAA6B,eAAKH,SAAL,69GAApC;AACA,KAJW,CAMZ;;;AACA,WAAO,kCAAU,eAAKD,eAAe,CAAEC,SAAF,CAApB,69GAAV,gBAAgD,eAAKA,SAAL,69GAAvD;AACA,GARD;AASA","sourcesContent":["/**\n * External dependencies\n */\nimport { css } from '@emotion/core';\nimport { mapKeys } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { isRTL } from '@wordpress/i18n';\n\nconst LOWER_LEFT_REGEXP = new RegExp( /-left/g );\nconst LOWER_RIGHT_REGEXP = new RegExp( /-right/g );\nconst UPPER_LEFT_REGEXP = new RegExp( /Left/g );\nconst UPPER_RIGHT_REGEXP = new RegExp( /Right/g );\n\n/**\n * Flips a CSS property from left <-> right.\n *\n * @param {string} key The CSS property name.\n *\n * @return {string} The flipped CSS property name, if applicable.\n */\nfunction getConvertedKey( key ) {\n\tif ( key === 'left' ) {\n\t\treturn 'right';\n\t}\n\n\tif ( key === 'right' ) {\n\t\treturn 'left';\n\t}\n\n\tif ( LOWER_LEFT_REGEXP.test( key ) ) {\n\t\treturn key.replace( LOWER_LEFT_REGEXP, '-right' );\n\t}\n\n\tif ( LOWER_RIGHT_REGEXP.test( key ) ) {\n\t\treturn key.replace( LOWER_RIGHT_REGEXP, '-left' );\n\t}\n\n\tif ( UPPER_LEFT_REGEXP.test( key ) ) {\n\t\treturn key.replace( UPPER_LEFT_REGEXP, 'Right' );\n\t}\n\n\tif ( UPPER_RIGHT_REGEXP.test( key ) ) {\n\t\treturn key.replace( UPPER_RIGHT_REGEXP, 'Left' );\n\t}\n\n\treturn key;\n}\n\n/**\n * An incredibly basic ltr -> rtl converter for style properties\n *\n * @param {import('react').CSSProperties} ltrStyles\n *\n * @return {import('react').CSSProperties} Converted ltr -> rtl styles\n */\nexport const convertLTRToRTL = ( ltrStyles = {} ) => {\n\treturn mapKeys( ltrStyles, ( _value, key ) => getConvertedKey( key ) );\n};\n\n/**\n * A higher-order function that create an incredibly basic ltr -> rtl style converter for CSS objects.\n *\n * @param {import('react').CSSProperties} ltrStyles   Ltr styles. Converts and renders from ltr -> rtl styles, if applicable.\n * @param {import('react').CSSProperties} [rtlStyles] Rtl styles. Renders if provided.\n *\n * @return {Function} A function to output CSS styles for Emotion's renderer\n */\nexport function rtl( ltrStyles = {}, rtlStyles ) {\n\treturn () => {\n\t\tif ( rtlStyles ) {\n\t\t\t// @ts-ignore: `css` types are wrong, it can accept an object: https://emotion.sh/docs/object-styles#with-css\n\t\t\treturn isRTL() ? css( rtlStyles ) : css( ltrStyles );\n\t\t}\n\n\t\t// @ts-ignore: `css` types are wrong, it can accept an object: https://emotion.sh/docs/object-styles#with-css\n\t\treturn isRTL() ? css( convertLTRToRTL( ltrStyles ) ) : css( ltrStyles );\n\t};\n}\n"]}