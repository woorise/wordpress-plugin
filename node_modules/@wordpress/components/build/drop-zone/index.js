"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDropZone = useDropZone;
exports.default = DropZoneComponent;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _provider = require("./provider");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function useDropZone(_ref) {
  var element = _ref.element,
      onFilesDrop = _ref.onFilesDrop,
      onHTMLDrop = _ref.onHTMLDrop,
      onDrop = _ref.onDrop,
      isDisabled = _ref.isDisabled,
      withPosition = _ref.withPosition,
      _ref$__unstableIsRela = _ref.__unstableIsRelative,
      isRelative = _ref$__unstableIsRela === void 0 ? false : _ref$__unstableIsRela;
  var dropZones = (0, _element.useContext)(_provider.Context);

  var _useState = (0, _element.useState)(_provider.INITIAL_DROP_ZONE_STATE),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  (0, _element.useEffect)(function () {
    if (!isDisabled) {
      var dropZone = {
        element: element,
        onDrop: onDrop,
        onFilesDrop: onFilesDrop,
        onHTMLDrop: onHTMLDrop,
        setState: setState,
        withPosition: withPosition,
        isRelative: isRelative
      };
      dropZones.add(dropZone);
      return function () {
        dropZones.delete(dropZone);
      };
    }
  }, [isDisabled, onDrop, onFilesDrop, onHTMLDrop, withPosition, isRelative]);
  var x = state.x,
      y = state.y,
      remainingState = (0, _objectWithoutProperties2.default)(state, ["x", "y"]);
  var position = null;

  if (x !== null && y !== null) {
    position = {
      x: x,
      y: y
    };
  }

  return _objectSpread(_objectSpread({}, remainingState), {}, {
    position: position
  });
}

function DropZoneComponent(_ref2) {
  var className = _ref2.className,
      label = _ref2.label,
      onFilesDrop = _ref2.onFilesDrop,
      onHTMLDrop = _ref2.onHTMLDrop,
      onDrop = _ref2.onDrop;
  var element = (0, _element.useRef)();

  var _useDropZone = useDropZone({
    element: element,
    onFilesDrop: onFilesDrop,
    onHTMLDrop: onHTMLDrop,
    onDrop: onDrop,
    __unstableIsRelative: true
  }),
      isDraggingOverDocument = _useDropZone.isDraggingOverDocument,
      isDraggingOverElement = _useDropZone.isDraggingOverElement,
      type = _useDropZone.type;

  var children;

  if (isDraggingOverElement) {
    children = (0, _element.createElement)("div", {
      className: "components-drop-zone__content"
    }, (0, _element.createElement)(_icons.Icon, {
      icon: _icons.upload,
      className: "components-drop-zone__content-icon"
    }), (0, _element.createElement)("span", {
      className: "components-drop-zone__content-text"
    }, label ? label : (0, _i18n.__)('Drop files to upload')));
  }

  var classes = (0, _classnames2.default)('components-drop-zone', className, (0, _defineProperty2.default)({
    'is-active': (isDraggingOverDocument || isDraggingOverElement) && (type === 'file' && onFilesDrop || type === 'html' && onHTMLDrop || type === 'default' && onDrop),
    'is-dragging-over-document': isDraggingOverDocument,
    'is-dragging-over-element': isDraggingOverElement
  }, "is-dragging-".concat(type), !!type));
  return (0, _element.createElement)("div", {
    ref: element,
    className: classes
  }, children);
}
//# sourceMappingURL=index.js.map