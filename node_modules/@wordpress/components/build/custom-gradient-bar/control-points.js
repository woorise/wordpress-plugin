"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _button = _interopRequireDefault(require("../button"));

var _colorPicker = _interopRequireDefault(require("../color-picker"));

var _dropdown = _interopRequireDefault(require("../dropdown"));

var _keyboardShortcuts = _interopRequireDefault(require("../keyboard-shortcuts"));

var _visuallyHidden = _interopRequireDefault(require("../visually-hidden"));

var _utils = require("./utils");

var _constants = require("./constants");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ControlPointKeyboardMove(_ref) {
  var position = _ref.value,
      onChange = _ref.onChange,
      children = _ref.children;
  var shortcuts = {
    right: function right(event) {
      // Stop propagation of the key press event to avoid focus moving
      // to another editor area.
      event.stopPropagation();
      var newPosition = (0, _utils.clampPercent)(position + _constants.KEYBOARD_CONTROL_POINT_VARIATION);
      onChange(newPosition);
    },
    left: function left(event) {
      // Stop propagation of the key press event to avoid focus moving
      // to another editor area.
      event.stopPropagation();
      var newPosition = (0, _utils.clampPercent)(position - _constants.KEYBOARD_CONTROL_POINT_VARIATION);
      onChange(newPosition);
    }
  };
  return (0, _element.createElement)(_keyboardShortcuts.default, {
    shortcuts: shortcuts
  }, children);
}

function ControlPointButton(_ref2) {
  var isOpen = _ref2.isOpen,
      position = _ref2.position,
      color = _ref2.color,
      onChange = _ref2.onChange,
      additionalProps = (0, _objectWithoutProperties2.default)(_ref2, ["isOpen", "position", "color", "onChange"]);
  var instanceId = (0, _compose.useInstanceId)(ControlPointButton);
  var descriptionId = "components-custom-gradient-picker__control-point-button-description-".concat(instanceId);
  return (0, _element.createElement)(ControlPointKeyboardMove, {
    value: position,
    onChange: onChange
  }, (0, _element.createElement)(_button.default, (0, _extends2.default)({
    "aria-label": (0, _i18n.sprintf)( // translators: %1$s: gradient position e.g: 70, %2$s: gradient color code e.g: rgb(52,121,151).
    (0, _i18n.__)('Gradient control point at position %1$s%% with color code %2$s.'), position, color),
    "aria-describedby": descriptionId,
    "aria-haspopup": "true",
    "aria-expanded": isOpen,
    className: (0, _classnames.default)('components-custom-gradient-picker__control-point-button', {
      'is-active': isOpen
    }),
    style: {
      left: "".concat(position, "%")
    }
  }, additionalProps)), (0, _element.createElement)(_visuallyHidden.default, {
    id: descriptionId
  }, (0, _i18n.__)('Use your left or right arrow keys or drag and drop with the mouse to change the gradient position. Press the button to change the color or remove the control point.')));
}

function ControlPoints(_ref3) {
  var gradientPickerDomRef = _ref3.gradientPickerDomRef,
      ignoreMarkerPosition = _ref3.ignoreMarkerPosition,
      controlPoints = _ref3.value,
      _onChange = _ref3.onChange,
      onStartControlPointChange = _ref3.onStartControlPointChange,
      onStopControlPointChange = _ref3.onStopControlPointChange;
  var controlPointMoveState = (0, _element.useRef)();

  var onMouseMove = function onMouseMove(event) {
    var relativePosition = (0, _utils.getHorizontalRelativeGradientPosition)(event.clientX, gradientPickerDomRef.current, _constants.GRADIENT_MARKERS_WIDTH);
    var _controlPointMoveStat = controlPointMoveState.current,
        initialPosition = _controlPointMoveStat.initialPosition,
        index = _controlPointMoveStat.index,
        significantMoveHappened = _controlPointMoveStat.significantMoveHappened;

    if (!significantMoveHappened && Math.abs(initialPosition - relativePosition) >= _constants.MINIMUM_SIGNIFICANT_MOVE) {
      controlPointMoveState.current.significantMoveHappened = true;
    }

    _onChange((0, _utils.updateControlPointPosition)(controlPoints, index, relativePosition));
  };

  var cleanEventListeners = function cleanEventListeners() {
    if (window && window.removeEventListener && controlPointMoveState.current && controlPointMoveState.current.listenersActivated) {
      window.removeEventListener('mousemove', onMouseMove);
      window.removeEventListener('mouseup', cleanEventListeners);
      onStopControlPointChange();
      controlPointMoveState.current.listenersActivated = false;
    }
  };

  (0, _element.useEffect)(function () {
    return function () {
      cleanEventListeners();
    };
  }, []);
  return controlPoints.map(function (point, index) {
    var initialPosition = point === null || point === void 0 ? void 0 : point.position;
    return ignoreMarkerPosition !== initialPosition && (0, _element.createElement)(_dropdown.default, {
      key: index,
      onClose: onStopControlPointChange,
      renderToggle: function renderToggle(_ref4) {
        var isOpen = _ref4.isOpen,
            onToggle = _ref4.onToggle;
        return (0, _element.createElement)(ControlPointButton, {
          key: index,
          onClick: function onClick() {
            if (controlPointMoveState.current && controlPointMoveState.current.significantMoveHappened) {
              return;
            }

            if (isOpen) {
              onStopControlPointChange();
            } else {
              onStartControlPointChange();
            }

            onToggle();
          },
          onMouseDown: function onMouseDown() {
            if (window && window.addEventListener) {
              controlPointMoveState.current = {
                initialPosition: initialPosition,
                index: index,
                significantMoveHappened: false,
                listenersActivated: true
              };
              onStartControlPointChange();
              window.addEventListener('mousemove', onMouseMove);
              window.addEventListener('mouseup', cleanEventListeners);
            }
          },
          isOpen: isOpen,
          position: point.position,
          color: point.color,
          onChange: function onChange(newPosition) {
            _onChange((0, _utils.updateControlPointPosition)(controlPoints, index, newPosition));
          }
        });
      },
      renderContent: function renderContent(_ref5) {
        var onClose = _ref5.onClose;
        return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_colorPicker.default, {
          color: point.color,
          onChangeComplete: function onChangeComplete(_ref6) {
            var color = _ref6.color;

            _onChange((0, _utils.updateControlPointColor)(controlPoints, index, color.toRgbString()));
          }
        }), (0, _element.createElement)(_button.default, {
          className: "components-custom-gradient-picker__remove-control-point",
          onClick: function onClick() {
            _onChange((0, _utils.removeControlPoint)(controlPoints, index));

            onClose();
          },
          isLink: true
        }, (0, _i18n.__)('Remove Control Point')));
      },
      popoverProps: _constants.COLOR_POPOVER_PROPS
    });
  });
}

function InsertPoint(_ref7) {
  var controlPoints = _ref7.value,
      onChange = _ref7.onChange,
      onOpenInserter = _ref7.onOpenInserter,
      onCloseInserter = _ref7.onCloseInserter,
      insertPosition = _ref7.insertPosition;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      alreadyInsertedPoint = _useState2[0],
      setAlreadyInsertedPoint = _useState2[1];

  return (0, _element.createElement)(_dropdown.default, {
    className: "components-custom-gradient-picker__inserter",
    onClose: function onClose() {
      onCloseInserter();
    },
    renderToggle: function renderToggle(_ref8) {
      var isOpen = _ref8.isOpen,
          onToggle = _ref8.onToggle;
      return (0, _element.createElement)(_button.default, {
        "aria-expanded": isOpen,
        "aria-haspopup": "true",
        onClick: function onClick() {
          if (isOpen) {
            onCloseInserter();
          } else {
            setAlreadyInsertedPoint(false);
            onOpenInserter();
          }

          onToggle();
        },
        className: "components-custom-gradient-picker__insert-point",
        icon: _icons.plus,
        style: {
          left: insertPosition !== null ? "".concat(insertPosition, "%") : undefined
        }
      });
    },
    renderContent: function renderContent() {
      return (0, _element.createElement)(_colorPicker.default, {
        onChangeComplete: function onChangeComplete(_ref9) {
          var color = _ref9.color;

          if (!alreadyInsertedPoint) {
            onChange((0, _utils.addControlPoint)(controlPoints, insertPosition, color.toRgbString()));
            setAlreadyInsertedPoint(true);
          } else {
            onChange((0, _utils.updateControlPointColorByPosition)(controlPoints, insertPosition, color.toRgbString()));
          }
        }
      });
    },
    popoverProps: _constants.COLOR_POPOVER_PROPS
  });
}

ControlPoints.InsertPoint = InsertPoint;
var _default = ControlPoints;
exports.default = _default;
//# sourceMappingURL=control-points.js.map