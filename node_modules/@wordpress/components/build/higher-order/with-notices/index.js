"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _uuid = require("uuid");

var _compose = require("@wordpress/compose");

var _list = _interopRequireDefault(require("../../notice/list"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Override the default edit UI to include notices if supported.
 *
 * @param  {WPComponent} OriginalComponent Original component.
 *
 * @return {WPComponent} Wrapped component.
 */
var _default = (0, _compose.createHigherOrderComponent)(function (OriginalComponent) {
  function Component(props, ref) {
    var _useState = (0, _element.useState)([]),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        noticeList = _useState2[0],
        setNoticeList = _useState2[1];

    var noticeOperations = (0, _element.useMemo)(function () {
      /**
       * Function passed down as a prop that adds a new notice.
       *
       * @param {Object} notice  Notice to add.
       */
      var createNotice = function createNotice(notice) {
        var noticeToAdd = notice.id ? notice : _objectSpread(_objectSpread({}, notice), {}, {
          id: (0, _uuid.v4)()
        });
        setNoticeList(function (current) {
          return [].concat((0, _toConsumableArray2.default)(current), [noticeToAdd]);
        });
      };

      return {
        createNotice: createNotice,

        /**
         * Function passed as a prop that adds a new error notice.
         *
         * @param {string} msg  Error message of the notice.
         */
        createErrorNotice: function createErrorNotice(msg) {
          createNotice({
            status: 'error',
            content: msg
          });
        },

        /**
         * Removes a notice by id.
         *
         * @param {string} id  Id of the notice to remove.
         */
        removeNotice: function removeNotice(id) {
          setNoticeList(function (current) {
            return current.filter(function (notice) {
              return notice.id !== id;
            });
          });
        },

        /**
         * Removes all notices
         */
        removeAllNotices: function removeAllNotices() {
          setNoticeList([]);
        }
      };
    }, []);

    var propsOut = _objectSpread(_objectSpread({}, props), {}, {
      noticeList: noticeList,
      noticeOperations: noticeOperations,
      noticeUI: noticeList.length > 0 && (0, _element.createElement)(_list.default, {
        className: "components-with-notices-ui",
        notices: noticeList,
        onRemove: noticeOperations.removeNotice
      })
    });

    return isForwardRef ? (0, _element.createElement)(OriginalComponent, (0, _extends2.default)({}, propsOut, {
      ref: ref
    })) : (0, _element.createElement)(OriginalComponent, propsOut);
  }

  var isForwardRef;
  var render = OriginalComponent.render; // Returns a forwardRef if OriginalComponent appears to be a forwardRef

  if (typeof render === 'function') {
    isForwardRef = true;
    return (0, _element.forwardRef)(Component);
  }

  return Component;
});

exports.default = _default;
//# sourceMappingURL=index.js.map