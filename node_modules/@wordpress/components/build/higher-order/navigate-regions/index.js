"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNavigateRegions = useNavigateRegions;
exports.default = void 0;

var _element = require("@wordpress/element");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _compose = require("@wordpress/compose");

var _keycodes = require("@wordpress/keycodes");

/**
 * WordPress dependencies
 */
var defaultShortcuts = {
  previous: ['ctrl+shift+`', _keycodes.rawShortcut.access('p')],
  next: ['ctrl+`', _keycodes.rawShortcut.access('n')]
};

function useNavigateRegions(ref) {
  var shortcuts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultShortcuts;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isFocusingRegions = _useState2[0],
      setIsFocusingRegions = _useState2[1];

  function focusRegion(offset) {
    var regions = Array.from(ref.current.querySelectorAll('[role="region"]'));

    if (!regions.length) {
      return;
    }

    var nextRegion = regions[0];
    var selectedIndex = regions.indexOf(ref.current.ownerDocument.activeElement);

    if (selectedIndex !== -1) {
      var nextIndex = selectedIndex + offset;
      nextIndex = nextIndex === -1 ? regions.length - 1 : nextIndex;
      nextIndex = nextIndex === regions.length ? 0 : nextIndex;
      nextRegion = regions[nextIndex];
    }

    nextRegion.focus();
    setIsFocusingRegions(true);
  }

  var focusPrevious = (0, _element.useCallback)(function () {
    return focusRegion(-1);
  }, []);
  var focusNext = (0, _element.useCallback)(function () {
    return focusRegion(1);
  }, []);
  (0, _compose.useKeyboardShortcut)(shortcuts.previous, focusPrevious, {
    bindGlobal: true
  });
  (0, _compose.useKeyboardShortcut)(shortcuts.next, focusNext, {
    bindGlobal: true
  });
  (0, _element.useEffect)(function () {
    function onClick() {
      setIsFocusingRegions(false);
    }

    ref.current.addEventListener('click', onClick);
    return function () {
      ref.current.removeEventListener('click', onClick);
    };
  }, [setIsFocusingRegions]);

  if (!isFocusingRegions) {
    return;
  }

  return 'is-focusing-regions';
}

var _default = (0, _compose.createHigherOrderComponent)(function (Component) {
  return function (_ref) {
    var shortcuts = _ref.shortcuts,
        props = (0, _objectWithoutProperties2.default)(_ref, ["shortcuts"]);
    var ref = (0, _element.useRef)();
    var className = useNavigateRegions(ref, shortcuts);
    return (0, _element.createElement)("div", {
      ref: ref,
      className: className
    }, (0, _element.createElement)(Component, props));
  };
}, 'navigateRegions');

exports.default = _default;
//# sourceMappingURL=index.js.map