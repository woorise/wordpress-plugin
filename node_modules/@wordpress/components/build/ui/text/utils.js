"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHighlighterText = createHighlighterText;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _styles = require("@wp-g2/styles");

var _memize = _interopRequireDefault(require("memize"));

var _highlightWordsCore = require("highlight-words-core");

var _element = require("@wordpress/element");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Source:
 * https://github.com/bvaughn/react-highlight-words/blob/HEAD/src/Highlighter.js
 */

/* eslint-disable jsdoc/valid-types */

/**
 * @typedef Options
 * @property {string} [activeClassName=''] Classname for active highlighted areas.
 * @property {number} [activeIndex=-1] The index of the active highlighted area.
 * @property {import('react').AllHTMLAttributes<HTMLDivElement>['style']} [activeStyle] Styles to apply to the active highlighted area.
 * @property {boolean} [autoEscape] Whether to automatically escape text.
 * @property {boolean} [caseSensitive=false] Whether to highlight in a case-sensitive manner.
 * @property {string} children Children to highlight.
 * @property {import('highlight-words-core').FindAllArgs['findChunks']} [findChunks] Custom `findChunks` function to pass to `highlight-words-core`.
 * @property {string | Record<string, unknown>} [highlightClassName=''] Classname to apply to highlighted text or a Record of classnames to apply to given text (which should be the key).
 * @property {import('react').AllHTMLAttributes<HTMLDivElement>['style']} [highlightStyle={}] Styles to apply to highlighted text.
 * @property {keyof JSX.IntrinsicElements} [highlightTag='mark'] Tag to use for the highlighted text.
 * @property {import('highlight-words-core').FindAllArgs['sanitize']} [sanitize] Custom `santize` function to pass to `highlight-words-core`.
 * @property {string[]} [searchWords=[]] Words to search for and highlight.
 * @property {string} [unhighlightClassName=''] Classname to apply to unhighlighted text.
 * @property {import('react').AllHTMLAttributes<HTMLDivElement>['style']} [unhighlightStyle] Style to apply to unhighlighted text.
 */

/**
 * Maps props to lowercase names.
 *
 * @template {Record<string, unknown>} T
 * @param {T} object Props to map.
 * @return {{[K in keyof T as Lowercase<string & K>]: T[K]}} The mapped props.
 */

/* eslint-enable jsdoc/valid-types */
var lowercaseProps = function lowercaseProps(object) {
  /** @type {any} */
  var mapped = {};

  for (var key in object) {
    mapped[key.toLowerCase()] = object[key];
  }

  return mapped;
};

var memoizedLowercaseProps = (0, _memize.default)(lowercaseProps);
/**
 *
 * @param {Options} options
 */

function createHighlighterText(_ref) {
  var _ref$activeClassName = _ref.activeClassName,
      activeClassName = _ref$activeClassName === void 0 ? '' : _ref$activeClassName,
      _ref$activeIndex = _ref.activeIndex,
      activeIndex = _ref$activeIndex === void 0 ? -1 : _ref$activeIndex,
      activeStyle = _ref.activeStyle,
      autoEscape = _ref.autoEscape,
      _ref$caseSensitive = _ref.caseSensitive,
      caseSensitive = _ref$caseSensitive === void 0 ? false : _ref$caseSensitive,
      children = _ref.children,
      findChunks = _ref.findChunks,
      _ref$highlightClassNa = _ref.highlightClassName,
      highlightClassName = _ref$highlightClassNa === void 0 ? '' : _ref$highlightClassNa,
      _ref$highlightStyle = _ref.highlightStyle,
      highlightStyle = _ref$highlightStyle === void 0 ? {} : _ref$highlightStyle,
      _ref$highlightTag = _ref.highlightTag,
      highlightTag = _ref$highlightTag === void 0 ? 'mark' : _ref$highlightTag,
      sanitize = _ref.sanitize,
      _ref$searchWords = _ref.searchWords,
      searchWords = _ref$searchWords === void 0 ? [] : _ref$searchWords,
      _ref$unhighlightClass = _ref.unhighlightClassName,
      unhighlightClassName = _ref$unhighlightClass === void 0 ? '' : _ref$unhighlightClass,
      unhighlightStyle = _ref.unhighlightStyle;
  if (!children) return null;
  if (typeof children !== 'string') return children;
  var textToHighlight = children;
  var chunks = (0, _highlightWordsCore.findAll)({
    autoEscape: autoEscape,
    caseSensitive: caseSensitive,
    findChunks: findChunks,
    sanitize: sanitize,
    searchWords: searchWords,
    textToHighlight: textToHighlight
  });
  var HighlightTag = highlightTag;
  var highlightIndex = -1;
  var highlightClassNames = '';
  var highlightStyles;
  var textContent = chunks.map(function (chunk, index) {
    var text = textToHighlight.substr(chunk.start, chunk.end - chunk.start);

    if (chunk.highlight) {
      highlightIndex++;
      var highlightClass;

      if ((0, _typeof2.default)(highlightClassName) === 'object') {
        if (!caseSensitive) {
          highlightClassName = memoizedLowercaseProps(highlightClassName);
          highlightClass = highlightClassName[text.toLowerCase()];
        } else {
          highlightClass = highlightClassName[text];
        }
      } else {
        highlightClass = highlightClassName;
      }

      var isActive = highlightIndex === +activeIndex;
      highlightClassNames = "".concat(highlightClass, " ").concat(isActive ? activeClassName : '');
      highlightStyles = isActive === true && activeStyle !== null ? Object.assign({}, highlightStyle, activeStyle) : highlightStyle;
      /** @type {Record<string, any>} */

      var props = _objectSpread(_objectSpread({}, _styles.ui.$('TextHighlight')), {}, {
        children: text,
        className: highlightClassNames,
        key: index,
        style: highlightStyles
      }); // Don't attach arbitrary props to DOM elements; this triggers React DEV warnings (https://fb.me/react-unknown-prop)
      // Only pass through the highlightIndex attribute for custom components.


      if (typeof HighlightTag !== 'string') {
        props.highlightIndex = highlightIndex;
      }

      return (0, _element.createElement)(HighlightTag, props);
    }

    return (0, _element.createElement)('span', _objectSpread(_objectSpread({}, _styles.ui.$('Text')), {}, {
      children: text,
      className: unhighlightClassName,
      key: index,
      style: unhighlightStyle
    }));
  });
  return textContent;
}
//# sourceMappingURL=utils.js.map