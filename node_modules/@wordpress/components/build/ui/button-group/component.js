"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _utils = require("@wp-g2/utils");

var _reakit = require("reakit");

var _i18n = require("@wordpress/i18n");

var _controlGroup = require("../control-group");

var _context2 = require("./context");

var styles = _interopRequireWildcard(require("./styles"));

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'div'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */
function ButtonGroup(props, forwardedRef) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'ButtonGroup'),
      baseId = _useContextSystem.baseId,
      className = _useContextSystem.className,
      children = _useContextSystem.children,
      _useContextSystem$ena = _useContextSystem.enableSelectNone,
      enableSelectNone = _useContextSystem$ena === void 0 ? false : _useContextSystem$ena,
      _useContextSystem$exp = _useContextSystem.expanded,
      expanded = _useContextSystem$exp === void 0 ? false : _useContextSystem$exp,
      _useContextSystem$seg = _useContextSystem.segmented,
      segmented = _useContextSystem$seg === void 0 ? false : _useContextSystem$seg,
      id = _useContextSystem.id,
      _useContextSystem$lab = _useContextSystem.label,
      label = _useContextSystem$lab === void 0 ? (0, _i18n.__)('ButtonGroup') : _useContextSystem$lab,
      value = _useContextSystem.value,
      _useContextSystem$onC = _useContextSystem.onChange,
      onChange = _useContextSystem$onC === void 0 ? _utils.noop : _useContextSystem$onC,
      otherProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["baseId", "className", "children", "enableSelectNone", "expanded", "segmented", "id", "label", "value", "onChange"]);

  var radio = (0, _reakit.useRadioState)({
    baseId: baseId || id,
    state: value
  });
  (0, _utils.useUpdateEffect)(function () {
    onChange(radio.state);
  }, [radio.state]);
  (0, _utils.useUpdateEffect)(function () {
    radio.setState(value);
  }, [value]);
  var contextProps = (0, _element.useMemo)(function () {
    return {
      buttonGroup: radio,
      enableSelectNone: enableSelectNone
    };
  }, [enableSelectNone, radio]);
  var contextSystemProps = (0, _element.useMemo)(function () {
    return {
      Button: {
        isBlock: expanded,
        isSubtle: !segmented,
        isControl: true
      },
      ControlGroup: {
        isItemBlock: expanded
      }
    };
  }, [expanded, segmented]);
  var classes = (0, _styles.cx)(segmented && styles.segmented, expanded && styles.expanded, className);
  var BaseComponent = segmented ? _controlGroup.ControlGroup : styles.ButtonGroupView;
  return (0, _element.createElement)(_context2.ButtonGroupContext.Provider, {
    value: contextProps
  }, (0, _element.createElement)(_context.ContextSystemProvider, {
    value: contextSystemProps
  }, (0, _element.createElement)(_reakit.RadioGroup, (0, _extends2.default)({
    "aria-label": label,
    as: BaseComponent
  }, otherProps, {
    className: classes,
    ref: forwardedRef
  }), children)));
}
/**
 * `ButtonGroup` is a form component that groups related buttons together. It can also coordinate the checked state of multiple `Button` components.
 *
 * @example
 * ```jsx
 * import { ButtonGroup, Button } from `@wordpress/components/ui`;
 *
 * function Example() {
 *  return (
 *    <ButtonGroup>
 *      <Button>Code</Button>
 *      <Button>is</Button>
 *      <Button>Poetry</Button>
 *    </ButtonGroup>
 *  );
 * }
 * ```
 */


var ConnectedButtonGroup = (0, _context.contextConnect)(ButtonGroup, 'ButtonGroup');
var _default = ConnectedButtonGroup;
exports.default = _default;
//# sourceMappingURL=component.js.map