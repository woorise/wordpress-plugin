"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _styles = require("@wp-g2/styles");

var _reakit = require("reakit");

var _icons = require("@wordpress/icons");

var _buttonGroup = require("../button-group");

var _elevation = require("../elevation");

var _flex = require("../flex");

var _view = require("../view");

var styles = _interopRequireWildcard(require("./styles"));

var _loadingOverlay = _interopRequireDefault(require("./loading-overlay"));

var _hook = require("./hook");

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * @param {import('@wp-g2/create-styles').ViewOwnProps<import('./types').Props, 'button'>} props
 * @param {import('react').Ref<any>} forwardedRef
 */
function BaseButton(props, forwardedRef) {
  var _useBaseButton = (0, _hook.useBaseButton)(props),
      asProp = _useBaseButton.as,
      children = _useBaseButton.children,
      _useBaseButton$disabl = _useBaseButton.disabled,
      disabled = _useBaseButton$disabl === void 0 ? false : _useBaseButton$disabl,
      _useBaseButton$elevat = _useBaseButton.elevation,
      elevation = _useBaseButton$elevat === void 0 ? 0 : _useBaseButton$elevat,
      elevationActive = _useBaseButton.elevationActive,
      elevationFocus = _useBaseButton.elevationFocus,
      elevationHover = _useBaseButton.elevationHover,
      _useBaseButton$hasCar = _useBaseButton.hasCaret,
      hasCaret = _useBaseButton$hasCar === void 0 ? false : _useBaseButton$hasCar,
      href = _useBaseButton.href,
      icon = _useBaseButton.icon,
      _useBaseButton$iconPo = _useBaseButton.iconPosition,
      iconPosition = _useBaseButton$iconPo === void 0 ? 'left' : _useBaseButton$iconPo,
      _useBaseButton$iconSi = _useBaseButton.iconSize,
      iconSize = _useBaseButton$iconSi === void 0 ? 16 : _useBaseButton$iconSi,
      _useBaseButton$isActi = _useBaseButton.isActive,
      isActive = _useBaseButton$isActi === void 0 ? false : _useBaseButton$isActi,
      _useBaseButton$isDest = _useBaseButton.isDestructive,
      isDestructive = _useBaseButton$isDest === void 0 ? false : _useBaseButton$isDest,
      _useBaseButton$isFocu = _useBaseButton.isFocused,
      isFocused = _useBaseButton$isFocu === void 0 ? false : _useBaseButton$isFocu,
      _useBaseButton$isLoad = _useBaseButton.isLoading,
      isLoading = _useBaseButton$isLoad === void 0 ? false : _useBaseButton$isLoad,
      _useBaseButton$noWrap = _useBaseButton.noWrap,
      noWrap = _useBaseButton$noWrap === void 0 ? true : _useBaseButton$noWrap,
      pre = _useBaseButton.pre,
      suffix = _useBaseButton.suffix,
      otherProps = (0, _objectWithoutProperties2.default)(_useBaseButton, ["as", "children", "disabled", "elevation", "elevationActive", "elevationFocus", "elevationHover", "hasCaret", "href", "icon", "iconPosition", "iconSize", "isActive", "isDestructive", "isFocused", "isLoading", "noWrap", "pre", "suffix"]);

  var _useButtonGroupContex = (0, _buttonGroup.useButtonGroupContext)(),
      buttonGroup = _useButtonGroupContex.buttonGroup;

  var buttonGroupState = buttonGroup || {};
  var BaseComponent = buttonGroup ? _reakit.Radio : _view.View;
  var as = asProp || (href && !disabled ? 'a' : 'button');
  return (// @ts-ignore No idea why TS is confused about this but ReakitRadio and View are definitely renderable
    (0, _element.createElement)(BaseComponent, (0, _extends2.default)({
      "aria-busy": isLoading,
      as: as,
      "data-active": isActive,
      "data-destructive": isDestructive,
      "data-focused": isFocused,
      "data-icon": !!icon,
      disabled: disabled || isLoading,
      href: href
    }, buttonGroupState, otherProps, {
      ref: forwardedRef
    }), (0, _element.createElement)(_loadingOverlay.default, {
      isLoading: isLoading
    }), pre && (0, _element.createElement)(_flex.FlexItem, (0, _extends2.default)({
      as: "span",
      className: (0, _styles.cx)(styles.PrefixSuffix, isLoading && styles.loading)
    }, _styles.ui.$('ButtonPrefix')), pre), icon && iconPosition === 'left' && (0, _element.createElement)(_flex.FlexItem, (0, _extends2.default)({
      as: "span",
      className: (0, _styles.cx)(styles.PrefixSuffix, isLoading && styles.loading)
    }, _styles.ui.$('ButtonIcon')), (0, _element.createElement)(_icons.Icon, {
      icon: icon,
      size: iconSize
    })), children && (0, _element.createElement)(_flex.FlexItem, (0, _extends2.default)({
      as: "span",
      className: (0, _styles.cx)(styles.Content, isLoading && styles.loading, noWrap && styles.noWrap),
      isBlock: true
    }, _styles.ui.$('ButtonContent')), children), icon && iconPosition === 'right' && (0, _element.createElement)(_flex.FlexItem, (0, _extends2.default)({
      as: "span",
      className: (0, _styles.cx)(styles.PrefixSuffix, isLoading && styles.loading)
    }, _styles.ui.$('ButtonIcon')), (0, _element.createElement)(_icons.Icon, {
      icon: icon,
      size: iconSize
    })), suffix && (0, _element.createElement)(_flex.FlexItem, (0, _extends2.default)({
      as: "span",
      className: (0, _styles.cx)(styles.PrefixSuffix, isLoading && styles.loading)
    }, _styles.ui.$('ButtonSuffix')), suffix), hasCaret && (0, _element.createElement)(_flex.FlexItem, (0, _extends2.default)({
      as: "span",
      className: (0, _styles.cx)(styles.CaretWrapper, isLoading && styles.loading)
    }, _styles.ui.$('ButtonCaret')), (0, _element.createElement)(_icons.Icon, {
      icon: _icons.chevronDown,
      size: 16
    })), (0, _element.createElement)(_elevation.Elevation, (0, _extends2.default)({
      active: elevationActive,
      as: "span",
      focus: elevationFocus,
      hover: elevationHover,
      offset: -1,
      value: elevation
    }, _styles.ui.$('ButtonElevation'))))
  );
}
/**
 * `BaseButton` is a primitive component used to create actionable components (e.g. `Button`).
 */


var ConnectedBaseButton = (0, _context.contextConnect)(BaseButton, 'BaseButton');
var _default = ConnectedBaseButton;
exports.default = _default;
//# sourceMappingURL=component.js.map