{"version":3,"sources":["@wordpress/components/src/ui/heading/hook.ts"],"names":["useHeading","props","asProp","as","level","otherProps","a11yProps","role","textProps","color","ui","get","size","isBlock","weight"],"mappings":";;;;;;;;;;;;;AAGA;;AACA;;AAOA;;;;;;AA2CO,SAASA,UAAT,CAAqBC,KAArB,EAAiE;AAAA,0BACtB,+BAChDA,KADgD,EAEhD,SAFgD,CADsB;AAAA,MAC3DC,MAD2D,qBAC/DC,EAD+D;AAAA,gDACnDC,KADmD;AAAA,MACnDA,KADmD,sCAC3C,CAD2C;AAAA,MACrCC,UADqC;;AAMvE,MAAMF,EAAE,GAAGD,MAAM,eAASE,KAAT,CAAjB;AAEA,MAAME,SAGL,GAAG,EAHJ;;AAIA,MAAK,OAAOH,EAAP,KAAc,QAAd,IAA0BA,EAAE,CAAE,CAAF,CAAF,KAAY,GAA3C,EAAiD;AAChD;AACAG,IAAAA,SAAS,CAACC,IAAV,GAAiB,SAAjB;AACAD,IAAAA,SAAS,CAAE,YAAF,CAAT,GAA4BF,KAA5B;AACA;;AAED,MAAMI,SAAS,GAAG;AACjBC,IAAAA,KAAK,EAAEC,WAAGC,GAAH,CAAQ,kBAAR,CADU;AAEjBC,IAAAA,IAAI,EAAE,gCAAoBR,KAApB,CAFW;AAGjBS,IAAAA,OAAO,EAAE,IAHQ;AAIjB;AACAC,IAAAA,MAAM,EAAEJ,WAAGC,GAAH,CAAQ,mBAAR;AALS,KAMdN,UANc,EAAlB;AASA,uDAAYG,SAAZ,GAA0BF,SAA1B;AAAqCH,IAAAA,EAAE,EAAFA;AAArC;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { useContextSystem } from '@wp-g2/context';\nimport { getHeadingFontSize, ui } from '@wp-g2/styles';\nimport type { ViewOwnProps } from '@wp-g2/create-styles';\n\n/**\n * Internal dependencies\n */\nimport type { Props as TextProps } from '../text/types';\nimport { useText } from '../text';\n\nexport type HeadingSize =\n\t| 1\n\t| 2\n\t| 3\n\t| 4\n\t| 5\n\t| 6\n\t| '1'\n\t| '2'\n\t| '3'\n\t| '4'\n\t| '5'\n\t| '6';\n\nexport interface HeadingProps extends Omit< TextProps, 'size' > {\n\t/**\n\t * `Heading` will typically render the sizes `1`, `2`, `3`, `4`, `5`, or `6`, which map to `h1`-`h6`.\n\t *\n\t * @default 3\n\t *\n\t * @example\n\t * ```jsx\n\t * import { Heading, View } from `@wp-g2/components`\n\t *\n\t * function Example() {\n\t *   return (\n\t *     <View>\n\t *       <Heading level=\"1\">Code is Poetry</Heading>\n\t *       <Heading level=\"2\">Code is Poetry</Heading>\n\t *       <Heading level=\"3\">Code is Poetry</Heading>\n\t *       <Heading level=\"4\">Code is Poetry</Heading>\n\t *       <Heading level=\"5\">Code is Poetry</Heading>\n\t *       <Heading level=\"6\">Code is Poetry</Heading>\n\t *     </View>\n\t *   );\n\t * }\n\t * ```\n\t */\n\tlevel: HeadingSize;\n}\n\nexport function useHeading( props: ViewOwnProps< HeadingProps, 'h1' > ) {\n\tconst { as: asProp, level = 2, ...otherProps } = useContextSystem(\n\t\tprops,\n\t\t'Heading'\n\t);\n\n\tconst as = asProp || `h${ level }`;\n\n\tconst a11yProps: {\n\t\trole?: string;\n\t\t'aria-level'?: string | number;\n\t} = {};\n\tif ( typeof as === 'string' && as[ 0 ] !== 'h' ) {\n\t\t// if not a semantic `h` element, add a11y props:\n\t\ta11yProps.role = 'heading';\n\t\ta11yProps[ 'aria-level' ] = level;\n\t}\n\n\tconst textProps = useText( {\n\t\tcolor: ui.get( 'colorTextHeading' ),\n\t\tsize: getHeadingFontSize( level ),\n\t\tisBlock: true,\n\t\t// @ts-ignore We're passing a variable so `string` is safe\n\t\tweight: ui.get( 'fontWeightHeading' ),\n\t\t...otherProps,\n\t} );\n\n\treturn { ...textProps, ...a11yProps, as };\n}\n"]}