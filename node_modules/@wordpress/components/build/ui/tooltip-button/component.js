"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _context = require("@wp-g2/context");

var _button = require("../button");

var _tooltip = require("../tooltip");

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports
function TooltipButton(props, forwardedRef) {
  var _useContextSystem = (0, _context.useContextSystem)(props, 'TooltipButton'),
      tooltip = _useContextSystem.tooltip,
      _useContextSystem$dis = _useContextSystem.disabled,
      disabled = _useContextSystem$dis === void 0 ? false : _useContextSystem$dis,
      _useContextSystem$isF = _useContextSystem.isFocusable,
      isFocusable = _useContextSystem$isF === void 0 ? true : _useContextSystem$isF,
      children = _useContextSystem.children,
      buttonProps = (0, _objectWithoutProperties2.default)(_useContextSystem, ["tooltip", "disabled", "isFocusable", "children"]);

  var trulyDisabled = disabled && !isFocusable; // Should show the tooltip if...

  var shouldShowTooltip = tooltip && !trulyDisabled && ( // an explicit tooltip is passed or...
  tooltip.content || // there's a shortcut or...
  tooltip.shortcut || // there's a label and...
  !!buttonProps['aria-label'] && ( // the children are empty
  !children || Array.isArray(children) && !children.length));

  if (!shouldShowTooltip) {
    return (0, _element.createElement)(_button.Button, (0, _extends2.default)({
      disabled: disabled,
      isFocusable: isFocusable
    }, buttonProps, {
      ref: forwardedRef
    }), children);
  }

  return (0, _element.createElement)(_tooltip.Tooltip, tooltip, (0, _element.createElement)(_button.Button, (0, _extends2.default)({
    disabled: disabled,
    isFocusable: isFocusable
  }, buttonProps, {
    ref: forwardedRef
  }), children));
}
/**
 * `TooltipButton` is a simple component that composes `Button` with a `Tooltip`.
 * It mostly exists as an adaptive layer between the `Button` it uses and the original `Button`.
 *
 * ```jsx
 * import { TooltipButton } from `@wordpress/components/ui`;
 *
 * function Example() {
 * 	return (
 * 		<TooltipButton
 * 			variant="secondary"
 * 			tooltip={ { content: 'WordPress.org' } }
 * 		>
 * 			Code is Poetry
 * 		</TooltipButton>
 * 	);
 * }
 * ```
 */


var _default = (0, _context.contextConnect)(TooltipButton, 'TooltipButton');

exports.default = _default;
//# sourceMappingURL=component.js.map