"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.KeyboardAvoidingView = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _reactNative = require("react-native");

var _reactNativeSafeArea = _interopRequireDefault(require("react-native-safe-area"));

var _compose = require("@wordpress/compose");

var _styles = _interopRequireDefault(require("./styles.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var AnimatedKeyboardAvoidingView = _reactNative.Animated.createAnimatedComponent(_reactNative.KeyboardAvoidingView);

var MIN_HEIGHT = 44;

var KeyboardAvoidingView = function KeyboardAvoidingView(_ref) {
  var parentHeight = _ref.parentHeight,
      style = _ref.style,
      _ref$withAnimatedHeig = _ref.withAnimatedHeight,
      withAnimatedHeight = _ref$withAnimatedHeig === void 0 ? false : _ref$withAnimatedHeig,
      otherProps = (0, _objectWithoutProperties2.default)(_ref, ["parentHeight", "style", "withAnimatedHeight"]);

  var _useResizeObserver = (0, _compose.useResizeObserver)(),
      _useResizeObserver2 = (0, _slicedToArray2.default)(_useResizeObserver, 2),
      resizeObserver = _useResizeObserver2[0],
      sizes = _useResizeObserver2[1];

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isKeyboardOpen = _useState2[0],
      setIsKeyboardOpen = _useState2[1];

  var _useState3 = (0, _element.useState)(0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      safeAreaBottomInset = _useState4[0],
      setSafeAreaBottomInset = _useState4[1];

  var _ref2 = sizes || {},
      _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? 0 : _ref2$height;

  var animatedHeight = (0, _element.useRef)(new _reactNative.Animated.Value(MIN_HEIGHT)).current;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      fullHeight = _Dimensions$get.height;

  var keyboardVerticalOffset = fullHeight - parentHeight;
  (0, _element.useEffect)(function () {
    _reactNativeSafeArea.default.getSafeAreaInsetsForRootView().then(function (_ref3) {
      var safeAreaInsets = _ref3.safeAreaInsets;
      setSafeAreaBottomInset(safeAreaInsets.bottom);
    });

    _reactNativeSafeArea.default.addEventListener('safeAreaInsetsForRootViewDidChange', onSafeAreaInsetsUpdate);

    _reactNative.Keyboard.addListener('keyboardWillShow', onKeyboardWillShow);

    _reactNative.Keyboard.addListener('keyboardWillHide', onKeyboardWillHide);

    return function () {
      _reactNativeSafeArea.default.removeEventListener('safeAreaInsetsForRootViewDidChange', onSafeAreaInsetsUpdate);

      _reactNative.Keyboard.removeListener('keyboardWillShow', onKeyboardWillShow);

      _reactNative.Keyboard.removeListener('keyboardWillHide', onKeyboardWillHide);
    };
  }, []);

  function onSafeAreaInsetsUpdate(_ref4) {
    var safeAreaInsets = _ref4.safeAreaInsets;
    setSafeAreaBottomInset(safeAreaInsets.bottom);
  }

  function onKeyboardWillShow(_ref5) {
    var endCoordinates = _ref5.endCoordinates;
    setIsKeyboardOpen(true);
    animatedHeight.setValue(endCoordinates.height + MIN_HEIGHT);
  }

  function onKeyboardWillHide(_ref6) {
    var duration = _ref6.duration,
        startCoordinates = _ref6.startCoordinates;
    // The startCoordinates.height is set to wrong value when we use cmd + k for hide the keyboard (Have no idea why).
    // Because of that the `setIsKeyboardOpened` is not invoked and the state of keyboard is wrong.
    // The keyboardIsOpenBreakpoint use 100 as a fallback if the startCoordinates.height is too small (cmd + k case)
    var keyboardIsOpenBreakpoint = startCoordinates.height > 100 ? startCoordinates.height / 3 : 100;
    var animatedListenerId = animatedHeight.addListener(function (_ref7) {
      var value = _ref7.value;

      if (value < keyboardIsOpenBreakpoint) {
        setIsKeyboardOpen(false);
      }
    });

    _reactNative.Animated.timing(animatedHeight, {
      toValue: MIN_HEIGHT,
      duration: duration,
      useNativeDriver: false
    }).start(function () {
      animatedHeight.removeListener(animatedListenerId);
    });
  }

  return (0, _element.createElement)(AnimatedKeyboardAvoidingView, (0, _extends2.default)({}, otherProps, {
    behavior: "padding",
    keyboardVerticalOffset: keyboardVerticalOffset,
    style: withAnimatedHeight ? [style, {
      height: animatedHeight,
      marginBottom: isKeyboardOpen ? -safeAreaBottomInset : 0
    }] : style
  }), (0, _element.createElement)(_reactNative.View, {
    style: [{
      top: -height + MIN_HEIGHT
    }, _styles.default.animatedChildStyle, !withAnimatedHeight && _styles.default.defaultChildStyle]
  }, resizeObserver, otherProps.children));
};

exports.KeyboardAvoidingView = KeyboardAvoidingView;
var _default = KeyboardAvoidingView;
exports.default = _default;
//# sourceMappingURL=index.ios.js.map