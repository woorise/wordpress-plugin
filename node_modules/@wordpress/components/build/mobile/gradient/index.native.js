"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGradientAngle = getGradientAngle;
exports.getGradientColorGroup = getGradientColorGroup;
exports.getGradientBaseColors = getGradientBaseColors;
exports.getColorLocations = getColorLocations;
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _reactNative = require("react-native");

var _reactNativeLinearGradient = _interopRequireDefault(require("react-native-linear-gradient"));

var _gradientParser = _interopRequireDefault(require("gradient-parser"));

var _components = require("@wordpress/components");

var _primitives = require("@wordpress/primitives");

var _compose = require("@wordpress/compose");

var _style = _interopRequireDefault(require("./style.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function getGradientAngle(gradientValue) {
  var angleBase = 45;
  var matchAngle = /\(((\d+deg)|(to\s[^,]+))/;
  var angle = matchAngle.exec(gradientValue) ? matchAngle.exec(gradientValue)[1] : '180deg';
  var angleType = angle.includes('deg') ? 'angle' : 'sideOrCorner';

  if (angleType === 'sideOrCorner') {
    switch (angle) {
      case 'to top':
        return 0;

      case 'to top right':
      case 'to right top':
        return angleBase;

      case 'to right':
        return 2 * angleBase;

      case 'to bottom right':
      case 'to right bottom':
        return 3 * angleBase;

      case 'to bottom':
        return 4 * angleBase;

      case 'to bottom left':
      case 'to left bottom':
        return 5 * angleBase;

      case 'to left':
        return 6 * angleBase;

      case 'to top left':
      case 'to left top':
        return 7 * angleBase;
    }
  } else if (angleType === 'angle') {
    return parseFloat(angle);
  } else return 4 * angleBase;
}

function getGradientColorGroup(gradientValue) {
  var _ref, _gradientParser$parse;

  var colorNeedParenthesis = ['rgb', 'rgba'];
  var excludeSideOrCorner = /linear-gradient\(to\s+([a-z\s]+,)/; // Parser has some difficulties with angle defined as a side or corner (e.g. `to left`)
  // so it's going to be excluded in order to matching color groups

  var modifiedGradientValue = gradientValue.replace(excludeSideOrCorner, 'linear-gradient(');
  return (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)((_gradientParser$parse = _gradientParser.default.parse(modifiedGradientValue)) === null || _gradientParser$parse === void 0 ? void 0 : _gradientParser$parse.map(function (gradient) {
    var _gradient$colorStops;

    return (_gradient$colorStops = gradient.colorStops) === null || _gradient$colorStops === void 0 ? void 0 : _gradient$colorStops.map(function (color, index) {
      var type = color.type,
          value = color.value,
          length = color.length;
      var fallbackLength = "".concat(100 * (index / (gradient.colorStops.length - 1)), "%");
      var colorLength = length ? "".concat(length.value).concat(length.type) : fallbackLength;

      if (colorNeedParenthesis.includes(type)) {
        return ["".concat(type, "(").concat(value.join(','), ")"), colorLength];
      } else if (type === 'literal') {
        return [value, colorLength];
      }

      return ["#".concat(value), colorLength];
    });
  })));
}

function getGradientBaseColors(colorGroup) {
  return colorGroup.map(function (color) {
    return color[0];
  });
}

function getColorLocations(colorGroup) {
  return colorGroup.map(function (location) {
    return Number(location[1].replace('%', '')) / 100;
  });
}

function Gradient(_ref2) {
  var gradientValue = _ref2.gradientValue,
      style = _ref2.style,
      _ref2$angleCenter = _ref2.angleCenter,
      angleCenter = _ref2$angleCenter === void 0 ? {
    x: 0.5,
    y: 0.5
  } : _ref2$angleCenter,
      children = _ref2.children,
      otherProps = (0, _objectWithoutProperties2.default)(_ref2, ["gradientValue", "style", "angleCenter", "children"]);

  var _useResizeObserver = (0, _compose.useResizeObserver)(),
      _useResizeObserver2 = (0, _slicedToArray2.default)(_useResizeObserver, 2),
      resizeObserver = _useResizeObserver2[0],
      sizes = _useResizeObserver2[1];

  var _ref3 = sizes || {},
      _ref3$width = _ref3.width,
      width = _ref3$width === void 0 ? 0 : _ref3$width,
      _ref3$height = _ref3.height,
      height = _ref3$height === void 0 ? 0 : _ref3$height;

  var isGradient = _components.colorsUtils.isGradient,
      getGradientType = _components.colorsUtils.getGradientType,
      gradients = _components.colorsUtils.gradients;
  var colorGroup = (0, _element.useMemo)(function () {
    return getGradientColorGroup(gradientValue);
  }, [gradientValue]);
  var locations = (0, _element.useMemo)(function () {
    return getColorLocations(colorGroup);
  }, [colorGroup]);
  var colors = (0, _element.useMemo)(function () {
    return getGradientBaseColors(colorGroup);
  }, [colorGroup]);

  if (!gradientValue || !isGradient(gradientValue)) {
    return null;
  }

  var isLinearGradient = getGradientType(gradientValue) === gradients.linear;

  if (isLinearGradient) {
    return (0, _element.createElement)(_reactNativeLinearGradient.default, (0, _extends2.default)({
      colors: colors,
      useAngle: true,
      angle: getGradientAngle(gradientValue),
      locations: locations,
      angleCenter: angleCenter,
      style: style
    }, otherProps), children);
  }

  return (0, _element.createElement)(_reactNative.View, {
    style: [style, _style.default.overflow]
  }, (0, _element.createElement)(_reactNative.View, {
    style: _style.default.radialGradientContent
  }, children), resizeObserver, (0, _element.createElement)(_primitives.SVG, null, (0, _element.createElement)(_primitives.Defs, null, (0, _element.createElement)(_primitives.RadialGradient //eslint-disable-next-line no-restricted-syntax
  , {
    id: "radialGradient",
    gradientUnits: "userSpaceOnUse",
    rx: "70%",
    ry: "70%",
    cy: _reactNative.Platform.OS === 'android' ? width / 2 : '50%'
  }, colorGroup.map(function (group) {
    return (0, _element.createElement)(_primitives.Stop, {
      offset: group[1],
      stopColor: group[0],
      stopOpacity: "1",
      key: "".concat(group[1], "-").concat(group[0])
    });
  }))), (0, _element.createElement)(_primitives.Rect, {
    height: height,
    width: width,
    fill: "url(#radialGradient)"
  })));
}

var _default = Gradient;
exports.default = _default;
//# sourceMappingURL=index.native.js.map