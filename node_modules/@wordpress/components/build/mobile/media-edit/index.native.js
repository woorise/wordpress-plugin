"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MediaEdit = exports.MEDIA_EDITOR = exports.MEDIA_TYPE_IMAGE = void 0;

var _element = require("@wordpress/element");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _reactNativeBridge = require("@wordpress/react-native-bridge");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var MEDIA_TYPE_IMAGE = 'image';
exports.MEDIA_TYPE_IMAGE = MEDIA_TYPE_IMAGE;
var MEDIA_EDITOR = 'MEDIA_EDITOR';
exports.MEDIA_EDITOR = MEDIA_EDITOR;
var editOption = {
  id: MEDIA_EDITOR,
  value: MEDIA_EDITOR,
  label: (0, _i18n.__)('Edit'),
  requiresModal: true,
  types: [MEDIA_TYPE_IMAGE]
};
var replaceOption = {
  id: _reactNativeBridge.mediaSources.deviceLibrary,
  value: _reactNativeBridge.mediaSources.deviceLibrary,
  label: (0, _i18n.__)('Replace'),
  types: [MEDIA_TYPE_IMAGE]
};

var MediaEdit = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(MediaEdit, _Component);

  var _super = _createSuper(MediaEdit);

  function MediaEdit(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MediaEdit);
    _this = _super.call(this, props);
    _this.onPickerPresent = _this.onPickerPresent.bind((0, _assertThisInitialized2.default)(_this));
    _this.onPickerSelect = _this.onPickerSelect.bind((0, _assertThisInitialized2.default)(_this));
    _this.getMediaOptionsItems = _this.getMediaOptionsItems.bind((0, _assertThisInitialized2.default)(_this));
    _this.getDestructiveButtonIndex = _this.getDestructiveButtonIndex.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(MediaEdit, [{
    key: "getMediaOptionsItems",
    value: function getMediaOptionsItems() {
      var _this$props = this.props,
          pickerOptions = _this$props.pickerOptions,
          openReplaceMediaOptions = _this$props.openReplaceMediaOptions,
          source = _this$props.source;
      return (0, _lodash.compact)([(source === null || source === void 0 ? void 0 : source.uri) && editOption, openReplaceMediaOptions && replaceOption].concat((0, _toConsumableArray2.default)(pickerOptions ? pickerOptions : [])));
    }
  }, {
    key: "getDestructiveButtonIndex",
    value: function getDestructiveButtonIndex() {
      var options = this.getMediaOptionsItems();
      var destructiveButtonIndex = options.findIndex(function (option) {
        return option === null || option === void 0 ? void 0 : option.destructiveButton;
      });
      return destructiveButtonIndex !== -1 ? destructiveButtonIndex + 1 : undefined;
    }
  }, {
    key: "onPickerPresent",
    value: function onPickerPresent() {
      if (this.picker) {
        this.picker.presentPicker();
      }
    }
  }, {
    key: "onPickerSelect",
    value: function onPickerSelect(value) {
      var _this$props2 = this.props,
          onSelect = _this$props2.onSelect,
          pickerOptions = _this$props2.pickerOptions,
          _this$props2$multiple = _this$props2.multiple,
          multiple = _this$props2$multiple === void 0 ? false : _this$props2$multiple,
          openReplaceMediaOptions = _this$props2.openReplaceMediaOptions;

      switch (value) {
        case MEDIA_EDITOR:
          (0, _reactNativeBridge.requestMediaEditor)(this.props.source.uri, function (media) {
            if (multiple && media || media && media.id) {
              onSelect(media);
            }
          });
          break;

        default:
          var optionSelected = pickerOptions && pickerOptions.find(function (option) {
            return option.id === value;
          });

          if (optionSelected && optionSelected.onPress) {
            optionSelected.onPress();
            return;
          }

          if (openReplaceMediaOptions) {
            openReplaceMediaOptions();
          }

      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var mediaOptions = function mediaOptions() {
        return (0, _element.createElement)(_components.Picker, {
          hideCancelButton: true,
          ref: function ref(instance) {
            return _this2.picker = instance;
          },
          options: _this2.getMediaOptionsItems(),
          leftAlign: true,
          onChange: _this2.onPickerSelect // translators: %s: block title e.g: "Paragraph".
          ,
          title: (0, _i18n.__)('Media options'),
          destructiveButtonIndex: _this2.getDestructiveButtonIndex()
        });
      };

      return this.props.render({
        open: this.onPickerPresent,
        mediaOptions: mediaOptions
      });
    }
  }]);
  return MediaEdit;
}(_element.Component);

exports.MediaEdit = MediaEdit;
var _default = MediaEdit;
exports.default = _default;
//# sourceMappingURL=index.native.js.map