"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _components = require("@wordpress/components");

var _style = _interopRequireDefault(require("./style.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var PIXEL_RATIO = 2;

var ReadableContentView = function ReadableContentView(_ref) {
  var align = _ref.align,
      reversed = _ref.reversed,
      children = _ref.children,
      style = _ref.style;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width,
      height = _Dimensions$get.height;

  var _useState = (0, _element.useState)(width),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      windowWidth = _useState2[0],
      setWindowWidth = _useState2[1];

  var _useState3 = (0, _element.useState)(width / height),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      windowRatio = _useState4[0],
      setWindowRatio = _useState4[1];

  function onDimensionsChange(_ref2) {
    var window = _ref2.window;
    setWindowWidth(window.width);
    setWindowRatio(window.width / window.height);
  }

  (0, _element.useEffect)(function () {
    _reactNative.Dimensions.addEventListener('change', onDimensionsChange);

    return function () {
      _reactNative.Dimensions.removeEventListener('change', onDimensionsChange);
    };
  }, []);

  function getWideStyles() {
    if (windowRatio >= PIXEL_RATIO && windowWidth < _components.ALIGNMENT_BREAKPOINTS.large) {
      return _style.default.wideLandscape;
    }

    if (windowWidth <= _components.ALIGNMENT_BREAKPOINTS.small) {
      return {
        maxWidth: windowWidth
      };
    }

    if (windowWidth >= _components.ALIGNMENT_BREAKPOINTS.medium && windowWidth < _components.ALIGNMENT_BREAKPOINTS.wide) {
      return _style.default.wideMedium;
    }
  }

  return (0, _element.createElement)(_reactNative.View, {
    style: _style.default.container
  }, (0, _element.createElement)(_reactNative.View, {
    style: [reversed ? _style.default.reversedCenteredContent : _style.default.centeredContent, style, _style.default[align], align === _components.WIDE_ALIGNMENTS.alignments.wide && getWideStyles()]
  }, children));
};

var isContentMaxWidth = function isContentMaxWidth() {
  var _Dimensions$get2 = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get2.width;

  return width > _style.default.centeredContent.maxWidth;
};

ReadableContentView.isContentMaxWidth = isContentMaxWidth;
var _default = ReadableContentView;
exports.default = _default;
//# sourceMappingURL=index.native.js.map