"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LinkPickerResults;

var _element = require("@wordpress/element");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _styles = _interopRequireDefault(require("./styles.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var PER_PAGE = 20;
var REQUEST_DEBOUNCE_DELAY = 400;
var MINIMUM_QUERY_SIZE = 2;

var meetsThreshold = function meetsThreshold(query) {
  return MINIMUM_QUERY_SIZE <= query.length;
};

function LinkPickerResults(_ref) {
  var query = _ref.query,
      onLinkPicked = _ref.onLinkPicked,
      directEntry = _ref.directEntry;

  var _useState = (0, _element.useState)([directEntry]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      links = _useState2[0],
      setLinks = _useState2[1];

  var _useState3 = (0, _element.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      hasAllSuggestions = _useState4[0],
      setHasAllSuggestions = _useState4[1];

  var nextPage = (0, _element.useRef)(1);
  var pendingRequest = (0, _element.useRef)();

  var clearRequest = function clearRequest() {
    pendingRequest.current = null;
  }; // a stable debounced function to fetch suggestions and append


  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core/block-editor'),
        getSettings = _select.getSettings;

    var fetchLinkSuggestions = /*#__PURE__*/function () {
      var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref2) {
        var search;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                search = _ref2.search;

                if (!meetsThreshold(search)) {
                  _context.next = 5;
                  break;
                }

                _context.next = 4;
                return getSettings().__experimentalFetchLinkSuggestions(search, {
                  page: nextPage.current,
                  type: 'post',
                  perPage: PER_PAGE
                });

              case 4:
                return _context.abrupt("return", _context.sent);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function fetchLinkSuggestions(_x) {
        return _ref3.apply(this, arguments);
      };
    }();

    var fetchMore = /*#__PURE__*/function () {
      var _ref5 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(_ref4) {
        var search, currentSuggestions, request, suggestions;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                search = _ref4.query, currentSuggestions = _ref4.links;

                if (!(hasAllSuggestions || pendingRequest.current)) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return");

              case 3:
                request = fetchLinkSuggestions({
                  search: search
                });
                pendingRequest.current = request;
                _context2.next = 7;
                return request;

              case 7:
                suggestions = _context2.sent;

                // only update links for the most recent request
                if (suggestions && request === pendingRequest.current) {
                  // since we don't have the response header, we check if the results
                  // are truncated to determine we've reached the end
                  if (suggestions.length < PER_PAGE) {
                    setHasAllSuggestions(true);
                  }

                  setLinks([].concat((0, _toConsumableArray2.default)(currentSuggestions), (0, _toConsumableArray2.default)(suggestions)));
                  nextPage.current++;
                }

                clearRequest();

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function fetchMore(_x2) {
        return _ref5.apply(this, arguments);
      };
    }();

    return {
      fetchMoreSuggestions: (0, _lodash.debounce)(fetchMore, REQUEST_DEBOUNCE_DELAY)
    };
  }, []),
      fetchMoreSuggestions = _useSelect.fetchMoreSuggestions; // prevent setting state when unmounted


  (0, _element.useEffect)(function () {
    return clearRequest;
  }, []); // any time the query changes, we reset pagination

  (0, _element.useEffect)(function () {
    clearRequest();
    nextPage.current = 1;
    setHasAllSuggestions(false);
    setLinks([directEntry]);
    fetchMoreSuggestions({
      query: query,
      links: [directEntry]
    });
  }, [query]);

  var onEndReached = function onEndReached() {
    return fetchMoreSuggestions({
      query: query,
      links: links
    });
  };

  var spinner = !hasAllSuggestions && meetsThreshold(query) && (0, _element.createElement)(_reactNative.View, {
    style: _styles.default.spinner
  }, (0, _element.createElement)(_reactNative.ActivityIndicator, {
    animating: true
  }));
  return (0, _element.createElement)(_components.BottomSheetConsumer, null, function (_ref6) {
    var listProps = _ref6.listProps;
    return (0, _element.createElement)(_reactNative.FlatList, (0, _extends2.default)({
      data: links,
      keyboardShouldPersistTaps: "always",
      renderItem: function renderItem(_ref7) {
        var item = _ref7.item;
        return (0, _element.createElement)(_components.BottomSheet.LinkSuggestionItemCell, {
          suggestion: item,
          onLinkPicked: onLinkPicked
        });
      },
      keyExtractor: function keyExtractor(_ref8) {
        var url = _ref8.url,
            type = _ref8.type;
        return "".concat(url, "-").concat(type);
      },
      onEndReached: onEndReached,
      onEndReachedThreshold: 0.1,
      initialNumToRender: PER_PAGE,
      ListFooterComponent: spinner
    }, listProps, {
      contentContainerStyle: [].concat((0, _toConsumableArray2.default)(listProps.contentContainerStyle), [_styles.default.list])
    }));
  });
}
//# sourceMappingURL=link-picker-results.native.js.map