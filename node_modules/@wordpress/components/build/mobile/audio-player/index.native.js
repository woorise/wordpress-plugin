"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _reactNativeVideo = _interopRequireDefault(require("react-native-video"));

var _primitives = require("@wordpress/primitives");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _reactNativeBridge = require("@wordpress/react-native-bridge");

var _url = require("@wordpress/url");

var _styles = _interopRequireDefault(require("./styles.scss"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var isIOS = _reactNative.Platform.OS === 'ios';

function Player(_ref) {
  var _this = this;

  var getStylesFromColorScheme = _ref.getStylesFromColorScheme,
      isUploadInProgress = _ref.isUploadInProgress,
      isUploadFailed = _ref.isUploadFailed,
      attributes = _ref.attributes,
      isSelected = _ref.isSelected;
  var id = attributes.id,
      src = attributes.src;

  var _useState = (0, _element.useState)(true),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      paused = _useState2[0],
      setPaused = _useState2[1];

  var onPressListen = function onPressListen() {
    if (src) {
      if (isIOS && _this.player) {
        _this.player.presentFullscreenPlayer();

        return;
      }

      _reactNative.Linking.canOpenURL(src).then(function (supported) {
        if (!supported) {
          _reactNative.Alert.alert((0, _i18n.__)('Problem opening the audio'), (0, _i18n.__)('No application can handle this request.'));
        } else {
          return _reactNative.Linking.openURL(src);
        }
      }).catch(function () {
        _reactNative.Alert.alert((0, _i18n.__)('Problem opening the audio'), (0, _i18n.__)('An unknown error occurred. Please try again.'));
      });
    }
  };

  var containerStyle = getStylesFromColorScheme(_styles.default.container, _styles.default.containerDark);
  var iconStyle = getStylesFromColorScheme(_styles.default.icon, _styles.default.iconDark);
  var iconDisabledStyle = getStylesFromColorScheme(_styles.default.iconDisabled, _styles.default.iconDisabledDark);
  var isDisabled = isUploadFailed || isUploadInProgress;

  var finalIconStyle = _objectSpread(_objectSpread({}, iconStyle), isDisabled && iconDisabledStyle);

  var iconContainerStyle = getStylesFromColorScheme(_styles.default.iconContainer, _styles.default.iconContainerDark);

  var titleContainerStyle = _objectSpread(_objectSpread({}, _styles.default.titleContainer), isIOS ? _styles.default.titleContainerIOS : _styles.default.titleContainerAndroid);

  var titleStyle = getStylesFromColorScheme(_styles.default.title, _styles.default.titleDark);
  var uploadFailedStyle = getStylesFromColorScheme(_styles.default.uploadFailed, _styles.default.uploadFailedDark);
  var subtitleStyle = getStylesFromColorScheme(_styles.default.subtitle, _styles.default.subtitleDark);

  var finalSubtitleStyle = _objectSpread(_objectSpread({}, subtitleStyle), isUploadFailed && uploadFailedStyle);

  var buttonBackgroundStyle = getStylesFromColorScheme(_styles.default.buttonBackground, _styles.default.buttonBackgroundDark);
  var title = '';
  var extension = '';

  if (src) {
    var decodedURI = (0, _url.safeDecodeURI)(src);
    var fileName = decodedURI.split('/').pop();
    var parts = fileName.split('.');
    extension = parts.pop().toUpperCase();
    title = parts.join('.');
  }

  var getSubtitleValue = function getSubtitleValue() {
    if (isUploadInProgress) {
      return (0, _i18n.__)('Uploadingâ€¦');
    }

    if (isUploadFailed) {
      return (0, _i18n.__)('Failed to insert audio file. Please tap for options.');
    }

    return extension + // translators: displays audio file extension. e.g. MP3 audio file
    (0, _i18n.__)(' audio file');
  };

  function onAudioUploadCancelDialog() {
    if (isUploadInProgress) {
      (0, _reactNativeBridge.requestImageUploadCancelDialog)(id);
    } else if (id && (0, _url.getProtocol)(src) === 'file:') {
      (0, _reactNativeBridge.requestImageFailedRetryDialog)(id);
    }
  }

  return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
    accessible: !isSelected,
    disabled: !isSelected,
    onPress: onAudioUploadCancelDialog
  }, (0, _element.createElement)(_primitives.View, {
    style: containerStyle
  }, (0, _element.createElement)(_primitives.View, {
    style: iconContainerStyle
  }, (0, _element.createElement)(_components.Icon, {
    icon: _icons.audio,
    style: finalIconStyle,
    size: 24
  })), (0, _element.createElement)(_primitives.View, {
    style: titleContainerStyle
  }, (0, _element.createElement)(_reactNative.Text, {
    style: titleStyle
  }, title), (0, _element.createElement)(_primitives.View, {
    style: _styles.default.subtitleContainer
  }, isUploadFailed && (0, _element.createElement)(_components.Icon, {
    icon: _icons.warning,
    style: _objectSpread(_objectSpread({}, _styles.default.errorIcon), uploadFailedStyle),
    size: 16
  }), (0, _element.createElement)(_reactNative.Text, {
    style: finalSubtitleStyle
  }, getSubtitleValue()))), !isDisabled && (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
    accessibilityLabel: (0, _i18n.__)('Audio Player'),
    accessibilityRole: 'button',
    accessibilityHint: (0, _i18n.__)('Double tap to listen the audio file'),
    onPress: onPressListen
  }, (0, _element.createElement)(_primitives.View, {
    style: buttonBackgroundStyle
  }, (0, _element.createElement)(_reactNative.Text, {
    style: _styles.default.buttonText
  }, (0, _i18n.__)('OPEN')))), isIOS && (0, _element.createElement)(_reactNativeVideo.default, {
    source: {
      uri: src
    },
    paused: paused,
    ref: function ref(_ref2) {
      _this.player = _ref2;
    },
    controls: false,
    ignoreSilentSwitch: 'ignore',
    onFullscreenPlayerWillPresent: function onFullscreenPlayerWillPresent() {
      setPaused(false);
    },
    onFullscreenPlayerDidDismiss: function onFullscreenPlayerDidDismiss() {
      setPaused(true);
    }
  })));
}

var _default = (0, _compose.withPreferredColorScheme)(Player);

exports.default = _default;
//# sourceMappingURL=index.native.js.map