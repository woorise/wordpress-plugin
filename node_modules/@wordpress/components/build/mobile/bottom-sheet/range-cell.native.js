"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _reactNative = require("react-native");

var _slider = _interopRequireDefault(require("@react-native-community/slider"));

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _cell = _interopRequireDefault(require("./cell"));

var _rangeCell = _interopRequireDefault(require("./range-cell.scss"));

var _rangeTextInput = _interopRequireDefault(require("./range-text-input"));

var _utils = require("../utils");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var isIOS = _reactNative.Platform.OS === 'ios';

var BottomSheetRangeCell = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(BottomSheetRangeCell, _Component);

  var _super = _createSuper(BottomSheetRangeCell);

  function BottomSheetRangeCell(props) {
    var _this;

    (0, _classCallCheck2.default)(this, BottomSheetRangeCell);
    _this = _super.call(this, props);
    _this.onSliderChange = _this.onSliderChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.onTextInputChange = _this.onTextInputChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.a11yIncrementValue = _this.a11yIncrementValue.bind((0, _assertThisInitialized2.default)(_this));
    _this.a11yDecrementValue = _this.a11yDecrementValue.bind((0, _assertThisInitialized2.default)(_this));
    _this.a11yUpdateValue = _this.a11yUpdateValue.bind((0, _assertThisInitialized2.default)(_this));
    var value = props.value,
        defaultValue = props.defaultValue,
        minimumValue = props.minimumValue;
    var initialValue = Number(value || defaultValue || minimumValue);
    _this.state = {
      inputValue: initialValue,
      sliderValue: initialValue
    };
    return _this;
  }

  (0, _createClass2.default)(BottomSheetRangeCell, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timeoutAnnounceValue);
    }
  }, {
    key: "onSliderChange",
    value: function onSliderChange(initialValue) {
      var _this$props = this.props,
          decimalNum = _this$props.decimalNum,
          onChange = _this$props.onChange;
      initialValue = (0, _utils.toFixed)(initialValue, decimalNum);
      this.setState({
        inputValue: initialValue
      });
      onChange(initialValue);
    }
  }, {
    key: "onTextInputChange",
    value: function onTextInputChange(nextValue) {
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          onComplete = _this$props2.onComplete;
      this.setState({
        sliderValue: nextValue
      });
      onChange(nextValue);

      if (onComplete) {
        onComplete(nextValue);
      }
    }
    /*
     * Only used with screenreaders like VoiceOver and TalkBack. Increments the
     * value of this setting programmatically.
     */

  }, {
    key: "a11yIncrementValue",
    value: function a11yIncrementValue() {
      var _this$props3 = this.props,
          _this$props3$step = _this$props3.step,
          step = _this$props3$step === void 0 ? 5 : _this$props3$step,
          maximumValue = _this$props3.maximumValue,
          decimalNum = _this$props3.decimalNum;
      var inputValue = this.state.inputValue;
      var newValue = (0, _utils.toFixed)(inputValue + step, decimalNum);

      if (newValue <= maximumValue || maximumValue === undefined) {
        this.a11yUpdateValue(newValue);
      }
    }
    /*
     * Only used with screenreaders like VoiceOver and TalkBack. Decrements the
     * value of this setting programmatically.
     */

  }, {
    key: "a11yDecrementValue",
    value: function a11yDecrementValue() {
      var _this$props4 = this.props,
          _this$props4$step = _this$props4.step,
          step = _this$props4$step === void 0 ? 5 : _this$props4$step,
          minimumValue = _this$props4.minimumValue,
          decimalNum = _this$props4.decimalNum;
      var sliderValue = this.state.sliderValue;
      var newValue = (0, _utils.toFixed)(sliderValue - step, decimalNum);

      if (newValue >= minimumValue) {
        this.a11yUpdateValue(newValue);
      }
    }
  }, {
    key: "a11yUpdateValue",
    value: function a11yUpdateValue(newValue) {
      var _this$props5 = this.props,
          onChange = _this$props5.onChange,
          onComplete = _this$props5.onComplete;
      this.setState({
        sliderValue: newValue,
        inputValue: newValue
      });
      onChange(newValue);

      if (onComplete) {
        onComplete(newValue);
      }

      this.announceValue(newValue);
    }
    /*
     * Only used with screenreaders like VoiceOver and TalkBack.
     */

  }, {
    key: "announceValue",
    value: function announceValue(value) {
      var _this$props6 = this.props,
          label = _this$props6.label,
          _this$props6$unitLabe = _this$props6.unitLabel,
          unitLabel = _this$props6$unitLabe === void 0 ? '' : _this$props6$unitLabe;

      if (isIOS) {
        // On Android it triggers the accessibilityLabel with the value change, but
        // on iOS we need to do this manually.
        clearTimeout(this.timeoutAnnounceValue);
        this.timeoutAnnounceValue = setTimeout(function () {
          _reactNative.AccessibilityInfo.announceForAccessibility("".concat(value, " ").concat(unitLabel, ",  ").concat(label));
        }, 300);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props7 = this.props,
          value = _this$props7.value,
          defaultValue = _this$props7.defaultValue,
          _this$props7$minimumV = _this$props7.minimumValue,
          minimumValue = _this$props7$minimumV === void 0 ? 0 : _this$props7$minimumV,
          _this$props7$maximumV = _this$props7.maximumValue,
          maximumValue = _this$props7$maximumV === void 0 ? 10 : _this$props7$maximumV,
          disabled = _this$props7.disabled,
          _this$props7$step = _this$props7.step,
          step = _this$props7$step === void 0 ? 1 : _this$props7$step,
          preferredColorScheme = _this$props7.preferredColorScheme,
          _this$props7$minimumT = _this$props7.minimumTrackTintColor,
          minimumTrackTintColor = _this$props7$minimumT === void 0 ? preferredColorScheme === 'light' ? '#00669b' : '#5198d9' : _this$props7$minimumT,
          _this$props7$maximumT = _this$props7.maximumTrackTintColor,
          maximumTrackTintColor = _this$props7$maximumT === void 0 ? isIOS ? '#e9eff3' : '#909090' : _this$props7$maximumT,
          _this$props7$thumbTin = _this$props7.thumbTintColor,
          thumbTintColor = _this$props7$thumbTin === void 0 ? !isIOS && '#00669b' : _this$props7$thumbTin,
          preview = _this$props7.preview,
          cellContainerStyle = _this$props7.cellContainerStyle,
          onComplete = _this$props7.onComplete,
          _this$props7$shouldDi = _this$props7.shouldDisplayTextInput,
          shouldDisplayTextInput = _this$props7$shouldDi === void 0 ? true : _this$props7$shouldDi,
          _this$props7$unitLabe = _this$props7.unitLabel,
          unitLabel = _this$props7$unitLabe === void 0 ? '' : _this$props7$unitLabe,
          _this$props7$settingL = _this$props7.settingLabel,
          settingLabel = _this$props7$settingL === void 0 ? 'Value' : _this$props7$settingL,
          openUnitPicker = _this$props7.openUnitPicker,
          children = _this$props7.children,
          decimalNum = _this$props7.decimalNum,
          cellProps = (0, _objectWithoutProperties2.default)(_this$props7, ["value", "defaultValue", "minimumValue", "maximumValue", "disabled", "step", "preferredColorScheme", "minimumTrackTintColor", "maximumTrackTintColor", "thumbTintColor", "preview", "cellContainerStyle", "onComplete", "shouldDisplayTextInput", "unitLabel", "settingLabel", "openUnitPicker", "children", "decimalNum"]);
      var _this$state = this.state,
          inputValue = _this$state.inputValue,
          sliderValue = _this$state.sliderValue;

      var getAccessibilityHint = function getAccessibilityHint() {
        return openUnitPicker ? (0, _i18n.__)('double-tap to change unit') : '';
      };

      var getAccessibilityLabel = function getAccessibilityLabel() {
        return (0, _i18n.sprintf)(
        /* translators: accessibility text. Inform about current value. %1$s: Control label %2$s: setting label (example: width), %3$s: Current value. %4$s: value measurement unit (example: pixels) */
        (0, _i18n.__)('%1$s. %2$s is %3$s %4$s.'), cellProps.label, settingLabel, value, unitLabel);
      };

      var containerStyle = [_rangeCell.default.container, isIOS ? _rangeCell.default.containerIOS : _rangeCell.default.containerAndroid];
      return (0, _element.createElement)(_reactNative.View, {
        accessible: true,
        accessibilityRole: "adjustable",
        accessibilityActions: [{
          name: 'increment'
        }, {
          name: 'decrement'
        }, {
          name: 'activate'
        }],
        onAccessibilityAction: function onAccessibilityAction(event) {
          switch (event.nativeEvent.actionName) {
            case 'increment':
              _this2.a11yIncrementValue();

              break;

            case 'decrement':
              _this2.a11yDecrementValue();

              break;

            case 'activate':
              openUnitPicker();
              break;
          }
        },
        accessibilityLabel: getAccessibilityLabel(),
        accessibilityHint: getAccessibilityHint()
      }, (0, _element.createElement)(_reactNative.View, {
        importantForAccessibility: "no-hide-descendants"
      }, (0, _element.createElement)(_cell.default, (0, _extends2.default)({}, cellProps, {
        cellContainerStyle: [_rangeCell.default.cellContainerStyles, cellContainerStyle],
        cellRowContainerStyle: containerStyle,
        leftAlign: true,
        editable: false,
        activeOpacity: 1,
        accessible: false,
        valueStyle: _rangeCell.default.valueStyle
      }), (0, _element.createElement)(_reactNative.View, {
        style: containerStyle
      }, preview, (0, _element.createElement)(_slider.default, {
        value: sliderValue,
        defaultValue: defaultValue,
        disabled: disabled,
        step: step,
        minimumValue: minimumValue,
        maximumValue: maximumValue,
        minimumTrackTintColor: minimumTrackTintColor,
        maximumTrackTintColor: maximumTrackTintColor,
        thumbTintColor: thumbTintColor,
        onValueChange: this.onSliderChange,
        onSlidingComplete: onComplete,
        ref: function ref(slider) {
          _this2.sliderRef = slider;
        },
        style: isIOS ? _rangeCell.default.sliderIOS : _rangeCell.default.sliderAndroid
      }), shouldDisplayTextInput && (0, _element.createElement)(_rangeTextInput.default, {
        label: cellProps.label,
        onChange: this.onTextInputChange,
        defaultValue: "".concat(inputValue),
        value: inputValue,
        min: minimumValue,
        max: maximumValue,
        step: step,
        decimalNum: decimalNum
      }, children)))));
    }
  }]);
  return BottomSheetRangeCell;
}(_element.Component);

var _default = (0, _compose.withPreferredColorScheme)(BottomSheetRangeCell);

exports.default = _default;
//# sourceMappingURL=range-cell.native.js.map