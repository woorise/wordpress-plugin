"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _native = require("@react-navigation/native");

var _stack = require("@react-navigation/stack");

var _compose = require("@wordpress/compose");

var _layoutAnimation = require("../../layout-animation");

var _bottomSheetNavigationContext = require("./bottom-sheet-navigation-context");

var _styles = _interopRequireDefault(require("./styles.scss"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var AnimationSpec = {
  animation: 'timing',
  config: {
    duration: 200,
    easing: _reactNative.Easing.ease
  }
};

var fadeConfig = function fadeConfig(_ref) {
  var current = _ref.current;
  return {
    cardStyle: {
      opacity: current.progress
    }
  };
};

var options = {
  transitionSpec: {
    open: AnimationSpec,
    close: AnimationSpec
  },
  headerShown: false,
  gestureEnabled: false,
  cardStyleInterpolator: fadeConfig
};
var ANIMATION_DURATION = 190;

function BottomSheetNavigationContainer(_ref2) {
  var children = _ref2.children,
      animate = _ref2.animate,
      main = _ref2.main,
      theme = _ref2.theme;
  var Stack = (0, _element.useRef)((0, _stack.createStackNavigator)()).current;
  var context = (0, _element.useContext)(_bottomSheetNavigationContext.BottomSheetNavigationContext);

  var _useState = (0, _element.useState)(context.currentHeight || 1),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      currentHeight = _useState2[0],
      setCurrentHeight = _useState2[1];

  var backgroundStyle = (0, _compose.usePreferredColorSchemeStyle)(_styles.default.background, _styles.default.backgroundDark);

  var _theme = theme || _objectSpread(_objectSpread({}, _native.DefaultTheme), {}, {
    colors: _objectSpread(_objectSpread({}, _native.DefaultTheme.colors), {}, {
      background: backgroundStyle.backgroundColor
    })
  });

  var setHeight = (0, _element.useCallback)(function (height) {
    // The screen is fullHeight or changing from fullScreen to the default mode
    if (typeof currentHeight === 'string' && typeof height !== 'string' || typeof height === 'string') {
      (0, _layoutAnimation.performLayoutAnimation)(ANIMATION_DURATION);
      setCurrentHeight(height);
      return;
    }

    if (height > 1) {
      if (currentHeight === 1) {
        setCurrentHeight(height);
      } else if (animate) {
        (0, _layoutAnimation.performLayoutAnimation)(ANIMATION_DURATION);
        setCurrentHeight(height);
      } else {
        setCurrentHeight(height);
      }
    }
  }, [currentHeight]);
  var screens = (0, _element.useMemo)(function () {
    return _element.Children.map(children, function (child) {
      var screen = child;
      var _child$props = child.props,
          name = _child$props.name,
          otherProps = (0, _objectWithoutProperties2.default)(_child$props, ["name"]);

      if (!main) {
        screen = (0, _element.cloneElement)(child, _objectSpread(_objectSpread({}, child.props), {}, {
          isNested: true
        }));
      }

      return (0, _element.createElement)(Stack.Screen, (0, _extends2.default)({
        name: name
      }, otherProps, {
        children: function children() {
          return screen;
        }
      }));
    });
  }, [children]);
  return (0, _element.useMemo)(function () {
    return (0, _element.createElement)(_reactNative.View, {
      style: {
        height: currentHeight
      }
    }, (0, _element.createElement)(_bottomSheetNavigationContext.BottomSheetNavigationProvider, {
      value: {
        setHeight: setHeight,
        currentHeight: currentHeight
      }
    }, main ? (0, _element.createElement)(_native.NavigationContainer, {
      theme: _theme
    }, (0, _element.createElement)(Stack.Navigator, {
      screenOptions: options
    }, screens)) : (0, _element.createElement)(Stack.Navigator, {
      screenOptions: options
    }, screens)));
  }, [currentHeight, _theme]);
}

var _default = BottomSheetNavigationContainer;
exports.default = _default;
//# sourceMappingURL=navigation-container.native.js.map