"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _reactNative = require("react-native");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _utils = require("../utils");

var _styles = _interopRequireDefault(require("./styles.scss"));

var _borderStyles = _interopRequireDefault(require("./borderStyles.scss"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var isIOS = _reactNative.Platform.OS === 'ios';

var RangeTextInput = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(RangeTextInput, _Component);

  var _super = _createSuper(RangeTextInput);

  function RangeTextInput(props) {
    var _this;

    (0, _classCallCheck2.default)(this, RangeTextInput);
    _this = _super.call(this, props);
    _this.announceCurrentValue = _this.announceCurrentValue.bind((0, _assertThisInitialized2.default)(_this));
    _this.onInputFocus = _this.onInputFocus.bind((0, _assertThisInitialized2.default)(_this));
    _this.onInputBlur = _this.onInputBlur.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleChangePixelRatio = _this.handleChangePixelRatio.bind((0, _assertThisInitialized2.default)(_this));
    _this.onSubmitEditing = _this.onSubmitEditing.bind((0, _assertThisInitialized2.default)(_this));
    _this.onChangeText = _this.onChangeText.bind((0, _assertThisInitialized2.default)(_this));
    var value = props.value,
        defaultValue = props.defaultValue,
        min = props.min,
        decimalNum = props.decimalNum;
    var initialValue = (0, _utils.toFixed)(value || defaultValue || min, decimalNum);

    var fontScale = _this.getFontScale();

    _this.state = {
      fontScale: fontScale,
      inputValue: initialValue,
      controlValue: initialValue,
      hasFocus: false
    };
    return _this;
  }

  (0, _createClass2.default)(RangeTextInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      _reactNative.AppState.addEventListener('change', this.handleChangePixelRatio);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactNative.AppState.removeEventListener('change', this.handleChangePixelRatio);

      clearTimeout(this.timeoutAnnounceValue);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var value = this.props.value;
      var _this$state = this.state,
          hasFocus = _this$state.hasFocus,
          inputValue = _this$state.inputValue;

      if (prevProps.value !== value) {
        this.setState({
          inputValue: value
        });
      }

      if (prevState.hasFocus !== hasFocus) {
        var validValue = this.validateInput(inputValue);
        this.setState({
          inputValue: validValue
        });
      }

      if (!prevState.hasFocus && hasFocus) {
        this._valueTextInput.focus();
      }
    }
  }, {
    key: "getFontScale",
    value: function getFontScale() {
      return _reactNative.PixelRatio.getFontScale() < 1 ? 1 : _reactNative.PixelRatio.getFontScale();
    }
  }, {
    key: "handleChangePixelRatio",
    value: function handleChangePixelRatio(nextAppState) {
      if (nextAppState === 'active') {
        this.setState({
          fontScale: this.getFontScale()
        });
      }
    }
  }, {
    key: "onInputFocus",
    value: function onInputFocus() {
      this.setState({
        hasFocus: true
      });
    }
  }, {
    key: "onInputBlur",
    value: function onInputBlur() {
      var inputValue = this.state.inputValue;
      this.onChangeText("".concat(inputValue));
      this.setState({
        hasFocus: false
      });
    }
  }, {
    key: "validateInput",
    value: function validateInput(text) {
      var _this$props = this.props,
          min = _this$props.min,
          max = _this$props.max,
          decimalNum = _this$props.decimalNum;
      var result = min;

      if (!text) {
        return min;
      }

      if (typeof text === 'number') {
        result = Math.max(text, min);
        return max ? Math.min(result, max) : result;
      }

      result = Math.max((0, _utils.removeNonDigit)(text, decimalNum), min);
      return max ? Math.min(result, max) : result;
    }
  }, {
    key: "updateValue",
    value: function updateValue(value) {
      var onChange = this.props.onChange;
      var validValue = this.validateInput(value);
      this.announceCurrentValue("".concat(validValue));
      onChange(validValue);
    }
  }, {
    key: "onChangeText",
    value: function onChangeText(textValue) {
      var decimalNum = this.props.decimalNum;
      var inputValue = (0, _utils.removeNonDigit)(textValue, decimalNum);
      textValue = inputValue.replace(',', '.');
      textValue = (0, _utils.toFixed)(textValue, decimalNum);
      var value = this.validateInput(textValue);
      this.setState({
        inputValue: inputValue,
        controlValue: value
      });
      this.updateValue(value);
    }
  }, {
    key: "onSubmitEditing",
    value: function onSubmitEditing(_ref) {
      var text = _ref.nativeEvent.text;
      var decimalNum = this.props.decimalNum;
      var inputValue = this.state.inputValue;

      if (!isNaN(Number(text))) {
        text = (0, _utils.toFixed)(text.replace(',', '.'), decimalNum);
        var validValue = this.validateInput(text);

        if (inputValue !== validValue) {
          this.setState({
            inputValue: validValue
          });
          this.announceCurrentValue("".concat(validValue));
          this.props.onChange(validValue);
        }
      }
    }
  }, {
    key: "announceCurrentValue",
    value: function announceCurrentValue(value) {
      /* translators: %s: current cell value. */
      var announcement = (0, _i18n.sprintf)((0, _i18n.__)('Current value is %s'), value);

      _reactNative.AccessibilityInfo.announceForAccessibility(announcement);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          getStylesFromColorScheme = _this$props2.getStylesFromColorScheme,
          children = _this$props2.children;
      var _this$state2 = this.state,
          fontScale = _this$state2.fontScale,
          inputValue = _this$state2.inputValue,
          hasFocus = _this$state2.hasFocus;
      var textInputStyle = getStylesFromColorScheme(_styles.default.textInput, _styles.default.textInputDark);
      var verticalBorderStyle = getStylesFromColorScheme(_styles.default.verticalBorder, _styles.default.verticalBorderDark);
      var inputBorderStyles = [textInputStyle, _borderStyles.default.borderStyle, hasFocus && _borderStyles.default.isSelected];
      var valueFinalStyle = [!isIOS ? inputBorderStyles : verticalBorderStyle, {
        width: 50 * fontScale
      }];
      return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
        onPress: this.onInputFocus,
        accessible: false
      }, (0, _element.createElement)(_reactNative.View, {
        style: [_styles.default.textInputContainer, isIOS && inputBorderStyles],
        accessible: false
      }, isIOS || hasFocus ? (0, _element.createElement)(_reactNative.TextInput, {
        ref: function ref(c) {
          return _this2._valueTextInput = c;
        },
        style: valueFinalStyle,
        onChangeText: this.onChangeText,
        onSubmitEditing: this.onSubmitEditing,
        onFocus: this.onInputFocus,
        onBlur: this.onInputBlur,
        keyboardType: "numeric",
        returnKeyType: "done",
        numberOfLines: 1,
        defaultValue: "".concat(inputValue),
        value: inputValue,
        pointerEvents: hasFocus ? 'auto' : 'none'
      }) : (0, _element.createElement)(_reactNative.Text, {
        style: valueFinalStyle,
        numberOfLines: 1,
        ellipsizeMode: "clip"
      }, inputValue), children));
    }
  }]);
  return RangeTextInput;
}(_element.Component);

var _default = (0, _compose.withPreferredColorScheme)(RangeTextInput);

exports.default = _default;
//# sourceMappingURL=range-text-input.native.js.map