{"version":3,"sources":["@wordpress/components/src/mobile/global-styles-context/utils.native.js"],"names":["BLOCK_STYLE_ATTRIBUTES","BLOCK_STYLE_ATTRIBUTES_MAPPING","textColor","PADDING","getBlockPaddings","mergedStyle","wrapperPropsStyle","blockStyleAttributes","blockPaddings","padding","backgroundColor","undefined","getBlockColors","defaultColors","blockStyles","Object","entries","forEach","key","value","isCustomColor","styleKey","mappedColor","slug","color"],"mappings":";;;;;;;;;;;;;AAGA;;AAHA;AACA;AACA;AAGO,IAAMA,sBAAsB,GAAG,CAAE,WAAF,EAAe,iBAAf,CAA/B,C,CAEP;;;AACA,IAAMC,8BAA8B,GAAG;AACtCC,EAAAA,SAAS,EAAE;AAD2B,CAAvC;AAIA,IAAMC,OAAO,GAAG,EAAhB,C,CAAoB;;AAEb,SAASC,gBAAT,CACNC,WADM,EAENC,iBAFM,EAGNC,oBAHM,EAIL;AACD,MAAMC,aAAa,GAAG,EAAtB;;AAEA,MACC,CAAEH,WAAW,CAACI,OAAd,KACEH,iBAAiB,SAAjB,IAAAA,iBAAiB,WAAjB,IAAAA,iBAAiB,CAAEI,eAAnB,IACDH,oBADC,aACDA,oBADC,eACDA,oBAAoB,CAAEG,eAFvB,CADD,EAIE;AACDF,IAAAA,aAAa,CAACC,OAAd,GAAwBN,OAAxB;AACA,WAAOK,aAAP;AACA,GAVA,CAYD;;;AACA,MACCH,WAAW,SAAX,IAAAA,WAAW,WAAX,IAAAA,WAAW,CAAEI,OAAb,IACA,EAAEH,iBAAF,aAAEA,iBAAF,eAAEA,iBAAiB,CAAEI,eAArB,CADA,IAEA,EAAEH,oBAAF,aAAEA,oBAAF,eAAEA,oBAAoB,CAAEG,eAAxB,CAHD,EAIE;AACDF,IAAAA,aAAa,CAACC,OAAd,GAAwBE,SAAxB;AACA;;AAED,SAAOH,aAAP;AACA;;AAEM,SAASI,cAAT,CAAyBL,oBAAzB,EAA+CM,aAA/C,EAA+D;AACrE,MAAMC,WAAW,GAAG,EAApB;AAEAC,EAAAA,MAAM,CAACC,OAAP,CAAgBT,oBAAhB,EAAuCU,OAAvC,CAAgD,gBAAsB;AAAA;AAAA,QAAlBC,GAAkB;AAAA,QAAbC,KAAa;;AACrE,QAAMC,aAAa,GAAG,wBAAYD,KAAZ,EAAmB,GAAnB,CAAtB;AACA,QAAIE,QAAQ,GAAGH,GAAf;;AAEA,QAAKjB,8BAA8B,CAAEoB,QAAF,CAAnC,EAAkD;AACjDA,MAAAA,QAAQ,GAAGpB,8BAA8B,CAAEoB,QAAF,CAAzC;AACA;;AAED,QAAK,CAAED,aAAP,EAAuB;AACtB,UAAME,WAAW,GAAG,kBAAMT,aAAN,EAAqB;AACxCU,QAAAA,IAAI,EAAEJ;AADkC,OAArB,CAApB;;AAIA,UAAKG,WAAL,EAAmB;AAClBR,QAAAA,WAAW,CAAEO,QAAF,CAAX,GAA0BC,WAAW,CAACE,KAAtC;AACA;AACD,KARD,MAQO;AACNV,MAAAA,WAAW,CAAEO,QAAF,CAAX,GAA0BF,KAA1B;AACA;AACD,GAnBD;AAqBA,SAAOL,WAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { find, startsWith } from 'lodash';\n\nexport const BLOCK_STYLE_ATTRIBUTES = [ 'textColor', 'backgroundColor' ];\n\n// Mapping style properties name to native\nconst BLOCK_STYLE_ATTRIBUTES_MAPPING = {\n\ttextColor: 'color',\n};\n\nconst PADDING = 12; // solid-border-space\n\nexport function getBlockPaddings(\n\tmergedStyle,\n\twrapperPropsStyle,\n\tblockStyleAttributes\n) {\n\tconst blockPaddings = {};\n\n\tif (\n\t\t! mergedStyle.padding &&\n\t\t( wrapperPropsStyle?.backgroundColor ||\n\t\t\tblockStyleAttributes?.backgroundColor )\n\t) {\n\t\tblockPaddings.padding = PADDING;\n\t\treturn blockPaddings;\n\t}\n\n\t// Prevent adding extra paddings to inner blocks without background colors\n\tif (\n\t\tmergedStyle?.padding &&\n\t\t! wrapperPropsStyle?.backgroundColor &&\n\t\t! blockStyleAttributes?.backgroundColor\n\t) {\n\t\tblockPaddings.padding = undefined;\n\t}\n\n\treturn blockPaddings;\n}\n\nexport function getBlockColors( blockStyleAttributes, defaultColors ) {\n\tconst blockStyles = {};\n\n\tObject.entries( blockStyleAttributes ).forEach( ( [ key, value ] ) => {\n\t\tconst isCustomColor = startsWith( value, '#' );\n\t\tlet styleKey = key;\n\n\t\tif ( BLOCK_STYLE_ATTRIBUTES_MAPPING[ styleKey ] ) {\n\t\t\tstyleKey = BLOCK_STYLE_ATTRIBUTES_MAPPING[ styleKey ];\n\t\t}\n\n\t\tif ( ! isCustomColor ) {\n\t\t\tconst mappedColor = find( defaultColors, {\n\t\t\t\tslug: value,\n\t\t\t} );\n\n\t\t\tif ( mappedColor ) {\n\t\t\t\tblockStyles[ styleKey ] = mappedColor.color;\n\t\t\t}\n\t\t} else {\n\t\t\tblockStyles[ styleKey ] = value;\n\t\t}\n\t} );\n\n\treturn blockStyles;\n}\n"]}