"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.withGlobalStyles = exports.useGlobalStyles = exports.getMergedGlobalStyles = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var GlobalStylesContext = (0, _element.createContext)({
  style: {}
});
GlobalStylesContext.BLOCK_STYLE_ATTRIBUTES = _utils.BLOCK_STYLE_ATTRIBUTES;

var getMergedGlobalStyles = function getMergedGlobalStyles(globalStyle, wrapperPropsStyle, blockAttributes, defaultColors) {
  var blockStyleAttributes = (0, _lodash.pick)(blockAttributes, _utils.BLOCK_STYLE_ATTRIBUTES);

  var mergedStyle = _objectSpread(_objectSpread({}, globalStyle), wrapperPropsStyle);

  var blockPaddings = (0, _utils.getBlockPaddings)(mergedStyle, wrapperPropsStyle, blockStyleAttributes);
  var blockColors = (0, _utils.getBlockColors)(blockStyleAttributes, defaultColors);
  return _objectSpread(_objectSpread(_objectSpread({}, mergedStyle), blockPaddings), blockColors);
};

exports.getMergedGlobalStyles = getMergedGlobalStyles;

var useGlobalStyles = function useGlobalStyles() {
  var globalStyles = (0, _element.useContext)(GlobalStylesContext);
  return globalStyles;
};

exports.useGlobalStyles = useGlobalStyles;

var withGlobalStyles = function withGlobalStyles(WrappedComponent) {
  return function (props) {
    return (0, _element.createElement)(GlobalStylesContext.Consumer, null, function (globalStyles) {
      return (0, _element.createElement)(WrappedComponent, (0, _extends2.default)({}, props, {
        globalStyles: globalStyles
      }));
    });
  };
};

exports.withGlobalStyles = withGlobalStyles;
var _default = GlobalStylesContext;
exports.default = _default;
//# sourceMappingURL=index.native.js.map