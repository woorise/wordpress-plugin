"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _native = require("@react-navigation/native");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _navigationHeader = _interopRequireDefault(require("../bottom-sheet/navigation-header"));

var _styles = _interopRequireDefault(require("./styles.scss"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var FocalPointSettingsPanelMemo = (0, _element.memo)(function (_ref) {
  var focalPoint = _ref.focalPoint,
      onFocalPointChange = _ref.onFocalPointChange,
      shouldEnableBottomSheetScroll = _ref.shouldEnableBottomSheetScroll,
      url = _ref.url;
  var navigation = (0, _native.useNavigation)();

  function onButtonPress(action) {
    navigation.goBack();

    if (action === 'apply') {
      onFocalPointChange(draftFocalPoint);
    }
  }

  var _useState = (0, _element.useState)(focalPoint),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      draftFocalPoint = _useState2[0],
      setDraftFocalPoint = _useState2[1];

  function setPosition(coordinates) {
    setDraftFocalPoint(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), coordinates);
    });
  }

  return (0, _element.createElement)(_reactNative.SafeAreaView, {
    style: _styles.default.safearea
  }, (0, _element.createElement)(_navigationHeader.default, {
    screen: (0, _i18n.__)('Edit focal point'),
    leftButtonOnPress: function leftButtonOnPress() {
      return onButtonPress('cancel');
    },
    applyButtonOnPress: function applyButtonOnPress() {
      return onButtonPress('apply');
    },
    isFullscreen: true
  }), (0, _element.createElement)(_components.FocalPointPicker, {
    focalPoint: draftFocalPoint,
    onChange: setPosition,
    shouldEnableBottomSheetScroll: shouldEnableBottomSheetScroll,
    url: url
  }));
});

function FocalPointSettingsPanel(props) {
  var route = (0, _native.useRoute)();

  var _useContext = (0, _element.useContext)(_components.BottomSheetContext),
      shouldEnableBottomSheetScroll = _useContext.shouldEnableBottomSheetScroll;

  return (0, _element.createElement)(FocalPointSettingsPanelMemo, (0, _extends2.default)({
    shouldEnableBottomSheetScroll: shouldEnableBottomSheetScroll
  }, props, route.params));
}

var _default = FocalPointSettingsPanel;
exports.default = _default;
//# sourceMappingURL=index.native.js.map