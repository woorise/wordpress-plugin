"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ClipboardButton;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _compose = require("@wordpress/compose");

var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));

var _button = _interopRequireDefault(require("../button"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var TIMEOUT = 4000;

function ClipboardButton(_ref) {
  var className = _ref.className,
      children = _ref.children,
      onCopy = _ref.onCopy,
      onFinishCopy = _ref.onFinishCopy,
      text = _ref.text,
      buttonProps = (0, _objectWithoutProperties2.default)(_ref, ["className", "children", "onCopy", "onFinishCopy", "text"]);
  (0, _deprecated.default)('wp.components.ClipboardButton', {
    since: '10.3',
    plugin: 'Gutenberg',
    alternative: 'wp.compose.useCopyToClipboard'
  });
  var timeoutId = (0, _element.useRef)();
  var ref = (0, _compose.useCopyToClipboard)(text, function () {
    onCopy();
    clearTimeout(timeoutId.current);

    if (onFinishCopy) {
      timeoutId.current = setTimeout(function () {
        return onFinishCopy();
      }, TIMEOUT);
    }
  });
  (0, _element.useEffect)(function () {
    clearTimeout(timeoutId.current);
  }, []);
  var classes = (0, _classnames.default)('components-clipboard-button', className); // Workaround for inconsistent behavior in Safari, where <textarea> is not
  // the document.activeElement at the moment when the copy event fires.
  // This causes documentHasSelection() in the copy-handler component to
  // mistakenly override the ClipboardButton, and copy a serialized string
  // of the current block instead.

  var focusOnCopyEventTarget = function focusOnCopyEventTarget(event) {
    event.target.focus();
  };

  return (0, _element.createElement)(_button.default, (0, _extends2.default)({}, buttonProps, {
    className: classes,
    ref: ref,
    onCopy: focusOnCopyEventTarget
  }), children);
}
//# sourceMappingURL=index.js.map