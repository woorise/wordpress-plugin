"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _reactNative = require("react-native");

var _rangeCell = _interopRequireDefault(require("../mobile/bottom-sheet/range-cell"));

var _stepperCell = _interopRequireDefault(require("../mobile/bottom-sheet/stepper-cell"));

var _picker = _interopRequireDefault(require("../mobile/picker"));

var _style = _interopRequireDefault(require("./style.scss"));

var _utils = require("./utils");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

/**
 * WordPress dependencies
 */
function UnitControl(_ref) {
  var currentInput = _ref.currentInput,
      label = _ref.label,
      value = _ref.value,
      onChange = _ref.onChange,
      onUnitChange = _ref.onUnitChange,
      initialPosition = _ref.initialPosition,
      min = _ref.min,
      max = _ref.max,
      separatorType = _ref.separatorType,
      _ref$units = _ref.units,
      units = _ref$units === void 0 ? _utils.CSS_UNITS : _ref$units,
      unit = _ref.unit,
      getStylesFromColorScheme = _ref.getStylesFromColorScheme,
      decimalNum = _ref.decimalNum,
      props = (0, _objectWithoutProperties2.default)(_ref, ["currentInput", "label", "value", "onChange", "onUnitChange", "initialPosition", "min", "max", "separatorType", "units", "unit", "getStylesFromColorScheme", "decimalNum"]);
  var pickerRef = (0, _element.useRef)();
  var anchorNodeRef = (0, _element.useRef)();
  var onPickerPresent = (0, _element.useCallback)(function () {
    if (pickerRef !== null && pickerRef !== void 0 && pickerRef.current) {
      pickerRef.current.presentPicker();
    }
  }, [pickerRef === null || pickerRef === void 0 ? void 0 : pickerRef.current]);
  var currentInputValue = currentInput === null ? value : currentInput;
  var initialControlValue = isFinite(currentInputValue) ? currentInputValue : initialPosition;
  var unitButtonTextStyle = getStylesFromColorScheme(_style.default.unitButtonText, _style.default.unitButtonTextDark);
  /* translators: accessibility text. Inform about current unit value. %s: Current unit value. */

  var accessibilityLabel = (0, _i18n.sprintf)((0, _i18n.__)('Current unit is %s'), unit);
  var accessibilityHint = _reactNative.Platform.OS === 'ios' ? (0, _i18n.__)('Double tap to open Action Sheet with available options') : (0, _i18n.__)('Double tap to open Bottom Sheet with available options');
  var renderUnitButton = (0, _element.useMemo)(function () {
    var unitButton = (0, _element.createElement)(_reactNative.View, {
      style: _style.default.unitButton
    }, (0, _element.createElement)(_reactNative.Text, {
      style: unitButtonTextStyle
    }, unit));

    if ((0, _utils.hasUnits)(units)) {
      return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
        onPress: onPickerPresent,
        accessibilityLabel: accessibilityLabel,
        accessibilityRole: "button",
        accessibilityHint: accessibilityHint
      }, unitButton);
    }

    return unitButton;
  }, [onPickerPresent, accessibilityLabel, accessibilityHint, unitButtonTextStyle, unit]);
  var getAnchor = (0, _element.useCallback)(function () {
    return anchorNodeRef !== null && anchorNodeRef !== void 0 && anchorNodeRef.current ? (0, _reactNative.findNodeHandle)(anchorNodeRef === null || anchorNodeRef === void 0 ? void 0 : anchorNodeRef.current) : undefined;
  }, [anchorNodeRef === null || anchorNodeRef === void 0 ? void 0 : anchorNodeRef.current]);
  var renderUnitPicker = (0, _element.useCallback)(function () {
    return (0, _element.createElement)(_reactNative.View, {
      style: _style.default.unitMenu,
      ref: anchorNodeRef
    }, renderUnitButton, (0, _utils.hasUnits)(units) ? (0, _element.createElement)(_picker.default, {
      ref: pickerRef,
      options: units,
      onChange: onUnitChange,
      hideCancelButton: true,
      leftAlign: true,
      getAnchor: getAnchor
    }) : null);
  }, [pickerRef, units, onUnitChange, getAnchor]);
  return (0, _element.createElement)(_element.Fragment, null, unit !== '%' ? (0, _element.createElement)(_stepperCell.default, (0, _extends2.default)({
    label: label,
    max: max,
    min: min,
    onChange: onChange,
    separatorType: separatorType,
    value: value,
    defaultValue: initialControlValue,
    shouldDisplayTextInput: true,
    decimalNum: unit === 'px' ? 0 : decimalNum,
    openUnitPicker: onPickerPresent,
    unitLabel: (0, _utils.parseA11yLabelForUnit)(unit)
  }, props), renderUnitPicker()) : (0, _element.createElement)(_rangeCell.default, (0, _extends2.default)({
    label: label,
    onChange: onChange,
    minimumValue: min,
    maximumValue: max,
    value: value,
    unit: unit,
    defaultValue: initialControlValue,
    separatorType: separatorType,
    decimalNum: decimalNum,
    openUnitPicker: onPickerPresent,
    unitLabel: (0, _utils.parseA11yLabelForUnit)(unit)
  }, props), renderUnitPicker()));
}

var _default = (0, _element.memo)((0, _compose.withPreferredColorScheme)(UnitControl));

exports.default = _default;
//# sourceMappingURL=index.native.js.map