/**
 * Given a path, returns a normalized path where equal query parameter values
 * will be treated as identical, regardless of order they appear in the original
 * text.
 *
 * @param {string} path Original path.
 *
 * @return {string} Normalized path.
 */
export function getStablePath(path) {
  var splitted = path.split('?');
  var query = splitted[1];
  var base = splitted[0];

  if (!query) {
    return base;
  } // 'b=1&c=2&a=5'


  return base + '?' + query // [ 'b=1', 'c=2', 'a=5' ]
  .split('&') // [ [ 'b, '1' ], [ 'c', '2' ], [ 'a', '5' ] ]
  .map(function (entry) {
    return entry.split('=');
  }) // [ [ 'a', '5' ], [ 'b, '1' ], [ 'c', '2' ] ]
  .sort(function (a, b) {
    return a[0].localeCompare(b[0]);
  }) // [ 'a=5', 'b=1', 'c=2' ]
  .map(function (pair) {
    return pair.join('=');
  }) // 'a=5&b=1&c=2'
  .join('&');
}
/**
 * @param {Record<string, any>} preloadedData
 * @return {import('../types').ApiFetchMiddleware} Preloading middleware.
 */

function createPreloadingMiddleware(preloadedData) {
  var cache = Object.keys(preloadedData).reduce(function (result, path) {
    result[getStablePath(path)] = preloadedData[path];
    return result;
  },
  /** @type {Record<string, any>} */
  {});
  return function (options, next) {
    var _options$parse = options.parse,
        parse = _options$parse === void 0 ? true : _options$parse;

    if (typeof options.path === 'string') {
      var method = options.method || 'GET';
      var path = getStablePath(options.path);

      if ('GET' === method && cache[path]) {
        var cacheData = cache[path]; // Unsetting the cache key ensures that the data is only preloaded a single time

        delete cache[path];
        return Promise.resolve(parse ? cacheData.body : new window.Response(JSON.stringify(cacheData.body), {
          status: 200,
          statusText: 'OK',
          headers: cacheData.headers
        }));
      } else if ('OPTIONS' === method && cache[method] && cache[method][path]) {
        return Promise.resolve(cache[method][path]);
      }
    }

    return next(options);
  };
}

export default createPreloadingMiddleware;
//# sourceMappingURL=preloading.js.map