export default apiFetch;
export type FetchHandler = (options: import('./types').ApiFetchRequestProps) => Promise<any>;
/**
 * @template T
 * @param {import('./types').ApiFetchRequestProps} options
 * @return {Promise<T>} A promise representing the request processed via the registered middlewares.
 */
declare function apiFetch<T>(options: import('./types').ApiFetchRequestProps): Promise<T>;
declare namespace apiFetch {
    export { registerMiddleware as use };
    export { setFetchHandler };
    export { createNonceMiddleware };
    export { createPreloadingMiddleware };
    export { createRootURLMiddleware };
    export { fetchAllMiddleware };
    export { mediaUploadMiddleware };
}
/**
 * Register a middleware
 *
 * @param {import('./types').ApiFetchMiddleware} middleware
 */
declare function registerMiddleware(middleware: import('./types').ApiFetchMiddleware): void;
/**
 * Defines a custom fetch handler for making the requests that will override
 * the default one using window.fetch
 *
 * @param {FetchHandler} newFetchHandler The new fetch handler
 */
declare function setFetchHandler(newFetchHandler: FetchHandler): void;
import createNonceMiddleware from "./middlewares/nonce";
import createPreloadingMiddleware from "./middlewares/preloading";
import createRootURLMiddleware from "./middlewares/root-url";
import fetchAllMiddleware from "./middlewares/fetch-all-middleware";
import mediaUploadMiddleware from "./middlewares/media-upload";
//# sourceMappingURL=index.d.ts.map