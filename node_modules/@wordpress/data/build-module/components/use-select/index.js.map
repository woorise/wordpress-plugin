{"version":3,"sources":["@wordpress/data/src/components/use-select/index.js"],"names":["useMemoOne","createQueue","useRef","useCallback","useReducer","useMemo","isShallowEqual","useIsomorphicLayoutEffect","useRegistry","useAsyncMode","renderQueue","useSelect","_mapSelect","deps","mapSelect","registry","isAsync","queueContext","queue","s","forceRender","latestMapSelect","latestIsAsync","latestMapOutput","latestMapOutputError","isMountedAndNotUnsubscribing","listeningStores","trapSelect","callback","__experimentalMarkListeningStores","depsChangedFlag","mapOutput","current","select","error","errorMessage","message","stack","Error","console","undefined","flush","onStoreChange","newMapOutput","add","onChange","unsubscribers","map","storeName","__experimentalSubscribeStore","forEach","unsubscribe"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { useMemoOne } from 'use-memo-one';\n\n/**\n * WordPress dependencies\n */\nimport { createQueue } from '@wordpress/priority-queue';\nimport { useRef, useCallback, useReducer, useMemo } from '@wordpress/element';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\nimport { useIsomorphicLayoutEffect } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport useRegistry from '../registry-provider/use-registry';\nimport useAsyncMode from '../async-mode-provider/use-async-mode';\n\nconst renderQueue = createQueue();\n\n/**\n * Custom react hook for retrieving props from registered selectors.\n *\n * In general, this custom React hook follows the\n * [rules of hooks](https://reactjs.org/docs/hooks-rules.html).\n *\n * @param {Function} _mapSelect  Function called on every state change. The\n *                               returned value is exposed to the component\n *                               implementing this hook. The function receives\n *                               the `registry.select` method on the first\n *                               argument and the `registry` on the second\n *                               argument.\n * @param {Array}    deps        If provided, this memoizes the mapSelect so the\n *                               same `mapSelect` is invoked on every state\n *                               change unless the dependencies change.\n *\n * @example\n * ```js\n * import { useSelect } from '@wordpress/data';\n *\n * function HammerPriceDisplay( { currency } ) {\n *   const price = useSelect( ( select ) => {\n *     return select( 'my-shop' ).getPrice( 'hammer', currency )\n *   }, [ currency ] );\n *   return new Intl.NumberFormat( 'en-US', {\n *     style: 'currency',\n *     currency,\n *   } ).format( price );\n * }\n *\n * // Rendered in the application:\n * // <HammerPriceDisplay currency=\"USD\" />\n * ```\n *\n * In the above example, when `HammerPriceDisplay` is rendered into an\n * application, the price will be retrieved from the store state using the\n * `mapSelect` callback on `useSelect`. If the currency prop changes then\n * any price in the state for that currency is retrieved. If the currency prop\n * doesn't change and other props are passed in that do change, the price will\n * not change because the dependency is just the currency.\n *\n * @return {Function}  A custom react hook.\n */\nexport default function useSelect( _mapSelect, deps ) {\n\tconst mapSelect = useCallback( _mapSelect, deps );\n\tconst registry = useRegistry();\n\tconst isAsync = useAsyncMode();\n\t// React can sometimes clear the `useMemo` cache.\n\t// We use the cache-stable `useMemoOne` to avoid\n\t// losing queues.\n\tconst queueContext = useMemoOne( () => ( { queue: true } ), [ registry ] );\n\tconst [ , forceRender ] = useReducer( ( s ) => s + 1, 0 );\n\n\tconst latestMapSelect = useRef();\n\tconst latestIsAsync = useRef( isAsync );\n\tconst latestMapOutput = useRef();\n\tconst latestMapOutputError = useRef();\n\tconst isMountedAndNotUnsubscribing = useRef();\n\n\t// Keep track of the stores being selected in the mapSelect function,\n\t// and only subscribe to those stores later.\n\tconst listeningStores = useRef( [] );\n\tconst trapSelect = useCallback(\n\t\t( callback ) =>\n\t\t\tregistry.__experimentalMarkListeningStores(\n\t\t\t\tcallback,\n\t\t\t\tlisteningStores\n\t\t\t),\n\t\t[ registry ]\n\t);\n\n\t// Generate a \"flag\" for used in the effect dependency array.\n\t// It's different than just using `mapSelect` since deps could be undefined,\n\t// in that case, we would still want to memoize it.\n\tconst depsChangedFlag = useMemo( () => ( {} ), deps || [] );\n\n\tlet mapOutput;\n\n\ttry {\n\t\tif (\n\t\t\tlatestMapSelect.current !== mapSelect ||\n\t\t\tlatestMapOutputError.current\n\t\t) {\n\t\t\tmapOutput = trapSelect( () =>\n\t\t\t\tmapSelect( registry.select, registry )\n\t\t\t);\n\t\t} else {\n\t\t\tmapOutput = latestMapOutput.current;\n\t\t}\n\t} catch ( error ) {\n\t\tlet errorMessage = `An error occurred while running 'mapSelect': ${ error.message }`;\n\n\t\tif ( latestMapOutputError.current ) {\n\t\t\terrorMessage += `\\nThe error may be correlated with this previous error:\\n`;\n\t\t\terrorMessage += `${ latestMapOutputError.current.stack }\\n\\n`;\n\t\t\terrorMessage += 'Original stack trace:';\n\n\t\t\tthrow new Error( errorMessage );\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( errorMessage );\n\t\t}\n\t}\n\n\tuseIsomorphicLayoutEffect( () => {\n\t\tlatestMapSelect.current = mapSelect;\n\t\tlatestMapOutput.current = mapOutput;\n\t\tlatestMapOutputError.current = undefined;\n\t\tisMountedAndNotUnsubscribing.current = true;\n\n\t\t// This has to run after the other ref updates\n\t\t// to avoid using stale values in the flushed\n\t\t// callbacks or potentially overwriting a\n\t\t// changed `latestMapOutput.current`.\n\t\tif ( latestIsAsync.current !== isAsync ) {\n\t\t\tlatestIsAsync.current = isAsync;\n\t\t\trenderQueue.flush( queueContext );\n\t\t}\n\t} );\n\n\tuseIsomorphicLayoutEffect( () => {\n\t\tconst onStoreChange = () => {\n\t\t\tif ( isMountedAndNotUnsubscribing.current ) {\n\t\t\t\ttry {\n\t\t\t\t\tconst newMapOutput = trapSelect( () =>\n\t\t\t\t\t\tlatestMapSelect.current( registry.select, registry )\n\t\t\t\t\t);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tisShallowEqual( latestMapOutput.current, newMapOutput )\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlatestMapOutput.current = newMapOutput;\n\t\t\t\t} catch ( error ) {\n\t\t\t\t\tlatestMapOutputError.current = error;\n\t\t\t\t}\n\t\t\t\tforceRender();\n\t\t\t}\n\t\t};\n\n\t\t// catch any possible state changes during mount before the subscription\n\t\t// could be set.\n\t\tif ( latestIsAsync.current ) {\n\t\t\trenderQueue.add( queueContext, onStoreChange );\n\t\t} else {\n\t\t\tonStoreChange();\n\t\t}\n\n\t\tconst onChange = () => {\n\t\t\tif ( latestIsAsync.current ) {\n\t\t\t\trenderQueue.add( queueContext, onStoreChange );\n\t\t\t} else {\n\t\t\t\tonStoreChange();\n\t\t\t}\n\t\t};\n\n\t\tconst unsubscribers = listeningStores.current.map( ( storeName ) =>\n\t\t\tregistry.__experimentalSubscribeStore( storeName, onChange )\n\t\t);\n\n\t\treturn () => {\n\t\t\tisMountedAndNotUnsubscribing.current = false;\n\t\t\t// The return value of the subscribe function could be undefined if the store is a custom generic store.\n\t\t\tunsubscribers.forEach( ( unsubscribe ) => unsubscribe?.() );\n\t\t\trenderQueue.flush( queueContext );\n\t\t};\n\t}, [ registry, trapSelect, depsChangedFlag ] );\n\n\treturn mapOutput;\n}\n"]}