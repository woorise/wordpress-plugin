{"version":3,"sources":["@wordpress/compose/src/hooks/use-ref-effect/index.js"],"names":["useRefEffect","calllback","dependencies","cleanup","node","current"],"mappings":";;;;;;;AAGA;;AAHA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,YAAT,CAAuBC,SAAvB,EAAkCC,YAAlC,EAAiD;AAC/D,MAAMC,OAAO,GAAG,sBAAhB;AACA,SAAO,0BAAa,UAAEC,IAAF,EAAY;AAC/B,QAAKA,IAAL,EAAY;AACXD,MAAAA,OAAO,CAACE,OAAR,GAAkBJ,SAAS,CAAEG,IAAF,CAA3B;AACA,KAFD,MAEO,IAAKD,OAAO,CAACE,OAAb,EAAuB;AAC7BF,MAAAA,OAAO,CAACE,OAAR;AACA;AACD,GANM,EAMJH,YANI,CAAP;AAOA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback, useRef } from '@wordpress/element';\n\n/**\n * Effect-like ref callback. Just like with `useEffect`, this allows you to\n * return a cleanup function to be run if the ref changes or one of the\n * dependencies changes. The ref is provided as an argument to the callback\n * functions. The main difference between this and `useEffect` is that\n * the `useEffect` callback is not called when the ref changes, but this is.\n * Pass the returned ref callback as the component's ref and merge multiple refs\n * with `useMergeRefs`.\n *\n * It's worth noting that if the dependencies array is empty, there's not\n * strictly a need to clean up event handlers for example, because the node is\n * to be removed. It *is* necessary if you add dependencies because the ref\n * callback will be called multiple times for the same node.\n *\n * @param {Function} calllback    Callback with ref as argument.\n * @param {Array}    dependencies Dependencies of the callback.\n *\n * @return {Function} Ref callback.\n */\nexport default function useRefEffect( calllback, dependencies ) {\n\tconst cleanup = useRef();\n\treturn useCallback( ( node ) => {\n\t\tif ( node ) {\n\t\t\tcleanup.current = calllback( node );\n\t\t} else if ( cleanup.current ) {\n\t\t\tcleanup.current();\n\t\t}\n\t}, dependencies );\n}\n"]}