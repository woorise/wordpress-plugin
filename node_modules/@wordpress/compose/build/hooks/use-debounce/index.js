"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useDebounce;

var _lodash = require("lodash");

var _useMemoOne = require("use-memo-one");

var _element = require("@wordpress/element");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Debounces a function with Lodash's `debounce`. A new debounced function will
 * be returned and any scheduled calls cancelled if any of the arguments change,
 * including the function to debounce, so please wrap functions created on
 * render in components in `useCallback`.
 *
 * @param {...any} args Arguments passed to Lodash's `debounce`.
 *
 * @return {Function} Debounced function.
 */
function useDebounce() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var debounced = (0, _useMemoOne.useMemoOne)(function () {
    return _lodash.debounce.apply(void 0, args);
  }, args);
  (0, _element.useEffect)(function () {
    return function () {
      return debounced.cancel();
    };
  }, [debounced]);
  return debounced;
}
//# sourceMappingURL=index.js.map