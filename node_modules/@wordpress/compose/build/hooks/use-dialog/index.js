"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _element = require("@wordpress/element");

var _keycodes = require("@wordpress/keycodes");

var _useConstrainedTabbing = _interopRequireDefault(require("../use-constrained-tabbing"));

var _useFocusOnMount = _interopRequireDefault(require("../use-focus-on-mount"));

var _useFocusReturn = _interopRequireDefault(require("../use-focus-return"));

var _useFocusOutside = _interopRequireDefault(require("../use-focus-outside"));

var _useMergeRefs = _interopRequireDefault(require("../use-merge-refs"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Returns a ref and props to apply to a dialog wrapper to enable the following behaviors:
 *  - constrained tabbing.
 *  - focus on mount.
 *  - return focus on unmount.
 *  - focus outside.
 *
 * @param {Object} options Dialog Options.
 */
function useDialog(options) {
  var onClose = (0, _element.useRef)();
  (0, _element.useEffect)(function () {
    onClose.current = options.onClose;
  }, [options.onClose]);
  var constrainedTabbingRef = (0, _useConstrainedTabbing.default)();
  var focusOnMountRef = (0, _useFocusOnMount.default)();
  var focusReturnRef = (0, _useFocusReturn.default)();
  var focusOutsideProps = (0, _useFocusOutside.default)(options.onClose);
  var closeOnEscapeRef = (0, _element.useCallback)(function (node) {
    if (!node) {
      return;
    }

    node.addEventListener('keydown', function (event) {
      // Close on escape
      if (event.keyCode === _keycodes.ESCAPE && onClose.current) {
        event.stopPropagation();
        onClose.current();
      }
    });
  }, []);
  return [(0, _useMergeRefs.default)([constrainedTabbingRef, focusReturnRef, focusOnMountRef, closeOnEscapeRef]), _objectSpread(_objectSpread({}, focusOutsideProps), {}, {
    tabIndex: '-1'
  })];
}

var _default = useDialog;
exports.default = _default;
//# sourceMappingURL=index.js.map