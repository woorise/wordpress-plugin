/**
 * External dependencies
 */
import { throttle } from 'lodash';
import { useMemoOne } from 'use-memo-one';
/**
 * WordPress dependencies
 */

import { useEffect } from '@wordpress/element';
/**
 * Throttles a function with Lodash's `throttle`. A new throttled function will
 * be returned and any scheduled calls cancelled if any of the arguments change,
 * including the function to throttle, so please wrap functions created on
 * render in components in `useCallback`.
 *
 * @param {...any} args Arguments passed to Lodash's `throttle`.
 *
 * @return {Function} Throttled function.
 */

export default function useThrottle() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var throttled = useMemoOne(function () {
    return throttle.apply(void 0, args);
  }, args);
  useEffect(function () {
    return function () {
      return throttled.cancel();
    };
  }, [throttled]);
  return throttled;
}
//# sourceMappingURL=index.js.map