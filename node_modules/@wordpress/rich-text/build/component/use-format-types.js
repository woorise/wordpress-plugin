"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFormatTypes = useFormatTypes;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _store = require("../store");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function formatTypesSelector(select) {
  return select(_store.store).getFormatTypes();
}
/**
 * Set of all interactive content tags.
 *
 * @see https://html.spec.whatwg.org/multipage/dom.html#interactive-content
 */


var interactiveContentTags = new Set(['a', 'audio', 'button', 'details', 'embed', 'iframe', 'input', 'label', 'select', 'textarea', 'video']);
/**
 * This hook provides RichText with the `formatTypes` and its derived props from
 * experimental format type settings.
 *
 * @param {Object} $0                               Options
 * @param {string} $0.clientId                      Block client ID.
 * @param {string} $0.identifier                    Block attribute.
 * @param {boolean} $0.withoutInteractiveFormatting Whether to clean the interactive formattings or not.
 * @param {Array} $0.allowedFormats                 Allowed formats
 */

function useFormatTypes(_ref) {
  var clientId = _ref.clientId,
      identifier = _ref.identifier,
      withoutInteractiveFormatting = _ref.withoutInteractiveFormatting,
      allowedFormats = _ref.allowedFormats;
  var allFormatTypes = (0, _data.useSelect)(formatTypesSelector, []);
  var formatTypes = (0, _element.useMemo)(function () {
    return allFormatTypes.filter(function (_ref2) {
      var name = _ref2.name,
          tagName = _ref2.tagName;

      if (allowedFormats && !allowedFormats.includes(name)) {
        return false;
      }

      if (withoutInteractiveFormatting && interactiveContentTags.has(tagName)) {
        return false;
      }

      return true;
    });
  }, [allFormatTypes, allowedFormats, interactiveContentTags]);
  var keyedSelected = (0, _data.useSelect)(function (select) {
    return formatTypes.reduce(function (accumulator, type) {
      if (type.__experimentalGetPropsForEditableTreePreparation) {
        accumulator[type.name] = type.__experimentalGetPropsForEditableTreePreparation(select, {
          richTextIdentifier: identifier,
          blockClientId: clientId
        });
      }

      return accumulator;
    }, {});
  }, [formatTypes, clientId, identifier]);
  var dispatch = (0, _data.useDispatch)();
  var prepareHandlers = [];
  var valueHandlers = [];
  var changeHandlers = [];
  var dependencies = [];
  formatTypes.forEach(function (type) {
    if (type.__experimentalCreatePrepareEditableTree) {
      var selected = keyedSelected[type.name];

      var handler = type.__experimentalCreatePrepareEditableTree(selected, {
        richTextIdentifier: identifier,
        blockClientId: clientId
      });

      if (type.__experimentalCreateOnChangeEditableValue) {
        valueHandlers.push(handler);
      } else {
        prepareHandlers.push(handler);
      }

      for (var key in selected) {
        dependencies.push(selected[key]);
      }
    }

    if (type.__experimentalCreateOnChangeEditableValue) {
      var dispatchers = {};

      if (type.__experimentalGetPropsForEditableTreeChangeHandler) {
        dispatchers = type.__experimentalGetPropsForEditableTreeChangeHandler(dispatch, {
          richTextIdentifier: identifier,
          blockClientId: clientId
        });
      }

      changeHandlers.push(type.__experimentalCreateOnChangeEditableValue(_objectSpread(_objectSpread({}, keyedSelected[type.name] || {}), dispatchers), {
        richTextIdentifier: identifier,
        blockClientId: clientId
      }));
    }
  });
  return {
    formatTypes: formatTypes,
    prepareHandlers: prepareHandlers,
    valueHandlers: valueHandlers,
    changeHandlers: changeHandlers,
    dependencies: dependencies
  };
}
//# sourceMappingURL=use-format-types.js.map