import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";

/**
 * Note: The order of the modifier keys in many of the [foo]Shortcut()
 * functions in this file are intentional and should not be changed. They're
 * designed to fit with the standard menu keyboard shortcuts shown in the
 * user's platform.
 *
 * For example, on MacOS menu shortcuts will place Shift before Command, but
 * on Windows Control will usually come first. So don't provide your own
 * shortcut combos directly to keyboardShortcut().
 */

/**
 * External dependencies
 */
import { get, mapValues, includes, capitalize, xor } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import { isAppleOS } from './platform';
/** @typedef {typeof ALT | CTRL | COMMAND | SHIFT } WPModifierPart */

/** @typedef {'primary' | 'primaryShift' | 'primaryAlt' | 'secondary' | 'access' | 'ctrl' | 'alt' | 'ctrlShift' | 'shift' | 'shiftAlt'} WPKeycodeModifier */

/**
 * An object of handler functions for each of the possible modifier
 * combinations. A handler will return a value for a given key.
 *
 * @template T
 *
 * @typedef {Record<WPKeycodeModifier, T>} WPModifierHandler
 */

/**
 * @template T
 *
 * @typedef {(character: string, isApple?: () => boolean) => T} WPKeyHandler
 */

/** @typedef {(event: KeyboardEvent, character: string, isApple?: () => boolean) => boolean} WPEventKeyHandler */

/**
 * Keycode for BACKSPACE key.
 */

export var BACKSPACE = 8;
/**
 * Keycode for TAB key.
 */

export var TAB = 9;
/**
 * Keycode for ENTER key.
 */

export var ENTER = 13;
/**
 * Keycode for ESCAPE key.
 */

export var ESCAPE = 27;
/**
 * Keycode for SPACE key.
 */

export var SPACE = 32;
/**
 * Keycode for LEFT key.
 */

export var LEFT = 37;
/**
 * Keycode for UP key.
 */

export var UP = 38;
/**
 * Keycode for RIGHT key.
 */

export var RIGHT = 39;
/**
 * Keycode for DOWN key.
 */

export var DOWN = 40;
/**
 * Keycode for DELETE key.
 */

export var DELETE = 46;
/**
 * Keycode for F10 key.
 */

export var F10 = 121;
/**
 * Keycode for ALT key.
 */

export var ALT = 'alt';
/**
 * Keycode for CTRL key.
 */

export var CTRL = 'ctrl';
/**
 * Keycode for COMMAND/META key.
 */

export var COMMAND = 'meta';
/**
 * Keycode for SHIFT key.
 */

export var SHIFT = 'shift';
/**
 * Keycode for ZERO key.
 */

export var ZERO = 48;
/**
 * Object that contains functions that return the available modifier
 * depending on platform.
 *
 * @type {WPModifierHandler< ( isApple: () => boolean ) => WPModifierPart[]>}
 */

export var modifiers = {
  primary: function primary(_isApple) {
    return _isApple() ? [COMMAND] : [CTRL];
  },
  primaryShift: function primaryShift(_isApple) {
    return _isApple() ? [SHIFT, COMMAND] : [CTRL, SHIFT];
  },
  primaryAlt: function primaryAlt(_isApple) {
    return _isApple() ? [ALT, COMMAND] : [CTRL, ALT];
  },
  secondary: function secondary(_isApple) {
    return _isApple() ? [SHIFT, ALT, COMMAND] : [CTRL, SHIFT, ALT];
  },
  access: function access(_isApple) {
    return _isApple() ? [CTRL, ALT] : [SHIFT, ALT];
  },
  ctrl: function ctrl() {
    return [CTRL];
  },
  alt: function alt() {
    return [ALT];
  },
  ctrlShift: function ctrlShift() {
    return [CTRL, SHIFT];
  },
  shift: function shift() {
    return [SHIFT];
  },
  shiftAlt: function shiftAlt() {
    return [SHIFT, ALT];
  }
};
/**
 * An object that contains functions to get raw shortcuts.
 *
 * These are intended for user with the KeyboardShortcuts.
 *
 * @example
 * ```js
 * // Assuming macOS:
 * rawShortcut.primary( 'm' )
 * // "meta+m""
 * ```
 *
 * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to raw
 *                                                 shortcuts.
 */

export var rawShortcut = mapValues(modifiers, function (modifier) {
  return (
    /** @type {WPKeyHandler<string>} */
    function (character) {
      var _isApple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isAppleOS;

      return [].concat(_toConsumableArray(modifier(_isApple)), [character.toLowerCase()]).join('+');
    }
  );
});
/**
 * Return an array of the parts of a keyboard shortcut chord for display.
 *
 * @example
 * ```js
 * // Assuming macOS:
 * displayShortcutList.primary( 'm' );
 * // [ "⌘", "M" ]
 * ```
 *
 * @type {WPModifierHandler<WPKeyHandler<string[]>>} Keyed map of functions to
 *                                                   shortcut sequences.
 */

export var displayShortcutList = mapValues(modifiers, function (modifier) {
  return (
    /** @type {WPKeyHandler<string[]>} */
    function (character) {
      var _replacementKeyMap;

      var _isApple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isAppleOS;

      var isApple = _isApple();

      var replacementKeyMap = (_replacementKeyMap = {}, _defineProperty(_replacementKeyMap, ALT, isApple ? '⌥' : 'Alt'), _defineProperty(_replacementKeyMap, CTRL, isApple ? '⌃' : 'Ctrl'), _defineProperty(_replacementKeyMap, COMMAND, '⌘'), _defineProperty(_replacementKeyMap, SHIFT, isApple ? '⇧' : 'Shift'), _replacementKeyMap);
      var modifierKeys = modifier(_isApple).reduce(function (accumulator, key) {
        var replacementKey = get(replacementKeyMap, key, key); // If on the Mac, adhere to platform convention and don't show plus between keys.

        if (isApple) {
          return [].concat(_toConsumableArray(accumulator), [replacementKey]);
        }

        return [].concat(_toConsumableArray(accumulator), [replacementKey, '+']);
      },
      /** @type {string[]} */
      []);
      var capitalizedCharacter = capitalize(character);
      return [].concat(_toConsumableArray(modifierKeys), [capitalizedCharacter]);
    }
  );
});
/**
 * An object that contains functions to display shortcuts.
 *
 * @example
 * ```js
 * // Assuming macOS:
 * displayShortcut.primary( 'm' );
 * // "⌘M"
 * ```
 *
 * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to
 *                                                 display shortcuts.
 */

export var displayShortcut = mapValues(displayShortcutList, function (shortcutList) {
  return (
    /** @type {WPKeyHandler<string>} */
    function (character) {
      var _isApple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isAppleOS;

      return shortcutList(character, _isApple).join('');
    }
  );
});
/**
 * An object that contains functions to return an aria label for a keyboard
 * shortcut.
 *
 * @example
 * ```js
 * // Assuming macOS:
 * shortcutAriaLabel.primary( '.' );
 * // "Command + Period"
 * ```
 *
 * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to
 *                                                 shortcut ARIA labels.
 */

export var shortcutAriaLabel = mapValues(modifiers, function (modifier) {
  return (
    /** @type {WPKeyHandler<string>} */
    function (character) {
      var _replacementKeyMap2;

      var _isApple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isAppleOS;

      var isApple = _isApple();

      var replacementKeyMap = (_replacementKeyMap2 = {}, _defineProperty(_replacementKeyMap2, SHIFT, 'Shift'), _defineProperty(_replacementKeyMap2, COMMAND, isApple ? 'Command' : 'Control'), _defineProperty(_replacementKeyMap2, CTRL, 'Control'), _defineProperty(_replacementKeyMap2, ALT, isApple ? 'Option' : 'Alt'), _defineProperty(_replacementKeyMap2, ',', __('Comma')), _defineProperty(_replacementKeyMap2, '.', __('Period')), _defineProperty(_replacementKeyMap2, '`', __('Backtick')), _replacementKeyMap2);
      return [].concat(_toConsumableArray(modifier(_isApple)), [character]).map(function (key) {
        return capitalize(get(replacementKeyMap, key, key));
      }).join(isApple ? ' ' : ' + ');
    }
  );
});
/**
 * From a given KeyboardEvent, returns an array of active modifier constants for
 * the event.
 *
 * @param {KeyboardEvent} event Keyboard event.
 *
 * @return {Array<WPModifierPart>} Active modifier constants.
 */

function getEventModifiers(event) {
  return (
    /** @type {WPModifierPart[]} */
    [ALT, CTRL, COMMAND, SHIFT].filter(function (key) {
      return event[
      /** @type {'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'} */
      "".concat(key, "Key")];
    })
  );
}
/**
 * An object that contains functions to check if a keyboard event matches a
 * predefined shortcut combination.
 *
 * @example
 * ```js
 * // Assuming an event for ⌘M key press:
 * isKeyboardEvent.primary( event, 'm' );
 * // true
 * ```
 *
 * @type {WPModifierHandler<WPEventKeyHandler>} Keyed map of functions
 *                                                       to match events.
 */


export var isKeyboardEvent = mapValues(modifiers, function (getModifiers) {
  return (
    /** @type {WPEventKeyHandler} */
    function (event, character) {
      var _isApple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isAppleOS;

      var mods = getModifiers(_isApple);
      var eventMods = getEventModifiers(event);

      if (xor(mods, eventMods).length) {
        return false;
      }

      if (!character) {
        return includes(mods, event.key.toLowerCase());
      }

      return event.key === character;
    }
  );
});
//# sourceMappingURL=index.js.map