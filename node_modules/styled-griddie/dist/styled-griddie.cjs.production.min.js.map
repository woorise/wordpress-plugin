{"version":3,"file":"styled-griddie.cjs.production.min.js","sources":["../src/properties/axisShorthand/axisShorthand.ts","../src/parser.ts","../src/properties/templateShorthand/templateShorthand.ts","../src/properties/templateAxis/templateAxis.ts","../src/index.ts"],"sourcesContent":["/** grid-row and grid-column properties\n *\n * supports:\n * grid-column: 1;\n * grid-column: 1 / span 2;\n * grid-column: 1 / 3;\n *\n * does not support:\n * grid-column: 1 / -1;\n */\n\nexport const axisShorthand = (name: string, value: string) => {\n  const [start, end] = value.split(/\\s*\\/\\s*/)\n  const endHasSpan = end?.match('span ')\n\n  // grid-column: 1;\n  if (!start) {\n    return `\n      -ms-grid-${name}: ${value};\n      grid-${name}: ${value};\n    `\n  }\n\n  // grid-column: 1 / span 2;\n  if (start && endHasSpan) {\n    const spanValue = end.replace('span ', '')\n\n    return `\n      -ms-grid-${name}: ${start};\n      -ms-grid-${name}-span: ${spanValue};\n      grid-${name}: ${value};\n    `\n  }\n\n  // grid-column: 1 / 3;\n  if (start && !endHasSpan) {\n    const startValue = parseInt(start)\n    const endValue = parseInt(end)\n    const spanValue = endValue - startValue\n\n    return `\n      -ms-grid-${name}: ${start};\n      -ms-grid-${name}-span: ${spanValue};\n      grid-${name}: ${value};\n    `\n  }\n\n  return `\n    grid-${name}: ${value};\n  `\n}\n","import { axisShorthand } from './properties/axisShorthand/axisShorthand'\nimport { templateAxis } from './properties/templateAxis/templateAxis'\nimport { templateShorthand } from './properties/templateShorthand/templateShorthand'\nimport { StylisPlugin } from 'styled-components'\n\nexport type GriddieFunction = (property: string) => ReturnType<StylisPlugin>\n\nexport type GridPropertiesObject = {\n  [key: string]: string\n}\n\nexport const parseGridProperties: GriddieFunction = property => {\n  if (!property.includes('grid')) {\n    return property\n  }\n\n  // display property\n  if (property === 'display:grid') {\n    return `\n      display: -ms-grid;\n      display: grid;\n    `\n  }\n\n  if (property === 'display:inline-grid') {\n    return `\n      display: -ms-inline-grid;\n      display: inline-grid;\n    `\n  }\n\n  // check if grid- property\n  const gridPropertyRegex = /^grid-([a-z-]+): *(.+)/\n  const isGridProperty = property.match(gridPropertyRegex)\n\n  if (!isGridProperty) {\n    return property\n  }\n\n  const [, name, value] = isGridProperty\n\n  // grid-template\n  if (name === 'template') {\n    return templateShorthand(name, value)\n  }\n\n  // grid-template-rows or grid-template-columns\n  if (name === 'template-rows' || name === 'template-columns') {\n    return templateAxis(name, value)\n  }\n\n  // grid-row or grid-column\n  if (name === 'row' || name === 'column') {\n    return axisShorthand(name, value)\n  }\n\n  return property\n}\n","/** grid-template property */\n\nexport const templateShorthand = (name: string, value: string) => {\n  const [rows, columns] = value.split(/\\s*\\/\\s*/)\n  const repeatKeywordRegex = /repeat\\((\\d+), *(.+)\\)/\n\n  if (rows && columns) {\n    const msRowsValue = rows.replace(repeatKeywordRegex, '($2)[$1]')\n    const msColumnsValue = columns.replace(repeatKeywordRegex, '($2)[$1]')\n\n    return `\n      -ms-grid-rows: ${msRowsValue};\n      -ms-grid-columns: ${msColumnsValue};\n      grid-${name}: ${value};\n    `\n  }\n\n  return `${name}: ${value};`\n}\n","/** grid-template-rows and grid-template-columns properties */\n\nexport const templateAxis = (name: string, value: string) => {\n  const axis = name.split('-')[1]\n  const repeatKeywordRegex = /repeat\\((\\d+), *(.+)\\)/\n  const msValue = value.replace(repeatKeywordRegex, '($2)[$1]')\n\n  return `\n    -ms-grid-${axis}: ${msValue};\n    grid-${name}: ${value};\n  `\n}\n","import { parseGridProperties } from './parser'\nimport { StylisPlugin } from 'styled-components'\n\nconst griddie: StylisPlugin = (context, content) => {\n  if (context === 1 || context === 2) {\n    return Array.isArray(content)\n      ? content.forEach(item => parseGridProperties(item))\n      : parseGridProperties(content)\n  }\n}\n\nObject.defineProperty(griddie, 'name', {\n  value: 'griddie'\n})\n\nexport default griddie\n"],"names":["parseGridProperties","property","includes","isGridProperty","match","name","value","split","rows","columns","repeatKeywordRegex","replace","templateShorthand","templateAxis","start","end","endHasSpan","startValue","parseInt","axisShorthand","griddie","context","content","Array","isArray","forEach","item","Object","defineProperty"],"mappings":"oEAWO,ICAMA,EAAuC,SAAAC,OAC7CA,EAASC,SAAS,eACdD,KAIQ,iBAAbA,oEAOa,wBAAbA,mFASEE,EAAiBF,EAASG,MADN,8BAGrBD,SACIF,MAGAI,EAAeF,KAATG,EAASH,WAGX,aAATE,ECxC2B,SAACA,EAAcC,SACtBA,EAAMC,MAAM,YAA7BC,OAAMC,OACPC,EAAqB,gCAEvBF,GAAQC,4BACUD,EAAKG,QAAQD,EAAoB,0CAC9BD,EAAQE,QAAQD,EAAoB,6BAKlDL,OAASC,YAIVD,OAASC,MD0BVM,CAAkBP,EAAMC,GAIpB,kBAATD,GAAqC,qBAATA,EE7CN,SAACA,EAAcC,2BAC5BD,EAAKE,MAAM,KAAK,QAEbD,EAAMK,QADK,yBACuB,2BAIzCN,OAASC,UFuCTO,CAAaR,EAAMC,GAIf,QAATD,GAA2B,WAATA,EDzCK,SAACA,EAAcC,SACrBA,EAAMC,MAAM,YAA1BO,OAAOC,OACRC,EAAaD,MAAAA,SAAAA,EAAKX,MAAM,aAGzBU,4BAEUT,OAASC,mBACbD,OAASC,eAKhBQ,GAASE,4BAIEX,OAASS,uBACTT,YAJKU,EAAIJ,QAAQ,QAAS,qBAK9BN,OAASC,eAKhBQ,IAAUE,EAAY,KAClBC,EAAaC,SAASJ,6BAKfT,OAASS,uBACTT,aALIa,SAASH,GACGE,oBAKpBZ,OAASC,gCAKXD,OAASC,UCKTa,CAAcd,EAAMC,GAGtBL,GGrDHmB,EAAwB,SAACC,EAASC,MACtB,IAAZD,GAA6B,IAAZA,SACZE,MAAMC,QAAQF,GACjBA,EAAQG,SAAQ,SAAAC,UAAQ1B,EAAoB0B,MAC5C1B,EAAoBsB,IAI5BK,OAAOC,eAAeR,EAAS,OAAQ,CACrCd,MAAO"}