{"version":3,"file":"styled-griddie.esm.js","sources":["../src/properties/axisShorthand/axisShorthand.ts","../src/properties/templateAxis/templateAxis.ts","../src/properties/templateShorthand/templateShorthand.ts","../src/parser.ts","../src/index.ts"],"sourcesContent":["/** grid-row and grid-column properties\n *\n * supports:\n * grid-column: 1;\n * grid-column: 1 / span 2;\n * grid-column: 1 / 3;\n *\n * does not support:\n * grid-column: 1 / -1;\n */\n\nexport const axisShorthand = (name: string, value: string) => {\n  const [start, end] = value.split(/\\s*\\/\\s*/)\n  const endHasSpan = end?.match('span ')\n\n  // grid-column: 1;\n  if (!start) {\n    return `\n      -ms-grid-${name}: ${value};\n      grid-${name}: ${value};\n    `\n  }\n\n  // grid-column: 1 / span 2;\n  if (start && endHasSpan) {\n    const spanValue = end.replace('span ', '')\n\n    return `\n      -ms-grid-${name}: ${start};\n      -ms-grid-${name}-span: ${spanValue};\n      grid-${name}: ${value};\n    `\n  }\n\n  // grid-column: 1 / 3;\n  if (start && !endHasSpan) {\n    const startValue = parseInt(start)\n    const endValue = parseInt(end)\n    const spanValue = endValue - startValue\n\n    return `\n      -ms-grid-${name}: ${start};\n      -ms-grid-${name}-span: ${spanValue};\n      grid-${name}: ${value};\n    `\n  }\n\n  return `\n    grid-${name}: ${value};\n  `\n}\n","/** grid-template-rows and grid-template-columns properties */\n\nexport const templateAxis = (name: string, value: string) => {\n  const axis = name.split('-')[1]\n  const repeatKeywordRegex = /repeat\\((\\d+), *(.+)\\)/\n  const msValue = value.replace(repeatKeywordRegex, '($2)[$1]')\n\n  return `\n    -ms-grid-${axis}: ${msValue};\n    grid-${name}: ${value};\n  `\n}\n","/** grid-template property */\n\nexport const templateShorthand = (name: string, value: string) => {\n  const [rows, columns] = value.split(/\\s*\\/\\s*/)\n  const repeatKeywordRegex = /repeat\\((\\d+), *(.+)\\)/\n\n  if (rows && columns) {\n    const msRowsValue = rows.replace(repeatKeywordRegex, '($2)[$1]')\n    const msColumnsValue = columns.replace(repeatKeywordRegex, '($2)[$1]')\n\n    return `\n      -ms-grid-rows: ${msRowsValue};\n      -ms-grid-columns: ${msColumnsValue};\n      grid-${name}: ${value};\n    `\n  }\n\n  return `${name}: ${value};`\n}\n","import { axisShorthand } from './properties/axisShorthand/axisShorthand'\nimport { templateAxis } from './properties/templateAxis/templateAxis'\nimport { templateShorthand } from './properties/templateShorthand/templateShorthand'\nimport { StylisPlugin } from 'styled-components'\n\nexport type GriddieFunction = (property: string) => ReturnType<StylisPlugin>\n\nexport type GridPropertiesObject = {\n  [key: string]: string\n}\n\nexport const parseGridProperties: GriddieFunction = property => {\n  if (!property.includes('grid')) {\n    return property\n  }\n\n  // display property\n  if (property === 'display:grid') {\n    return `\n      display: -ms-grid;\n      display: grid;\n    `\n  }\n\n  if (property === 'display:inline-grid') {\n    return `\n      display: -ms-inline-grid;\n      display: inline-grid;\n    `\n  }\n\n  // check if grid- property\n  const gridPropertyRegex = /^grid-([a-z-]+): *(.+)/\n  const isGridProperty = property.match(gridPropertyRegex)\n\n  if (!isGridProperty) {\n    return property\n  }\n\n  const [, name, value] = isGridProperty\n\n  // grid-template\n  if (name === 'template') {\n    return templateShorthand(name, value)\n  }\n\n  // grid-template-rows or grid-template-columns\n  if (name === 'template-rows' || name === 'template-columns') {\n    return templateAxis(name, value)\n  }\n\n  // grid-row or grid-column\n  if (name === 'row' || name === 'column') {\n    return axisShorthand(name, value)\n  }\n\n  return property\n}\n","import { parseGridProperties } from './parser'\nimport { StylisPlugin } from 'styled-components'\n\nconst griddie: StylisPlugin = (context, content) => {\n  if (context === 1 || context === 2) {\n    return Array.isArray(content)\n      ? content.forEach(item => parseGridProperties(item))\n      : parseGridProperties(content)\n  }\n}\n\nObject.defineProperty(griddie, 'name', {\n  value: 'griddie'\n})\n\nexport default griddie\n"],"names":["axisShorthand","name","value","split","start","end","endHasSpan","match","spanValue","replace","startValue","parseInt","endValue","templateAxis","axis","repeatKeywordRegex","msValue","templateShorthand","rows","columns","msRowsValue","msColumnsValue","parseGridProperties","property","includes","gridPropertyRegex","isGridProperty","griddie","context","content","Array","isArray","forEach","item","Object","defineProperty"],"mappings":"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"}