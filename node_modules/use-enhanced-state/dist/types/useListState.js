"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useListState = void 0;
const is_1 = require("@itsjonq/is");
const arrayMove_1 = require("./arrayMove");
const react_1 = require("react");
const tiny_warning_1 = require("tiny-warning");
/**
 * A enhanced hook for managing flat Array states.
 *
 * @param {Array<any>} initialValue An initial state value.
 *
 * @example
 * const [state, stateFns] = useListState([...]);
 * ...
 * stateFns.move(1, 5); // Moves an item from index of 1 to 5.
 */
function useListState(initialState) {
    tiny_warning_1.default(is_1.is.array(initialState), ['use-enhanced-state', 'useListState', 'State must be an array.'].join('\n'));
    const [state, setState] = react_1.useState(
    /* istanbul ignore next */
    is_1.is.array(initialState) ? initialState : []);
    const prepend = (next) => setState((prev) => [next, ...prev]);
    const append = (next) => setState((prev) => [...prev, next]);
    const insert = ({ at, item }) => {
        /* istanbul ignore if */
        if (!is_1.is.number(at)) {
            tiny_warning_1.default(false, [
                'use-enhanced-state',
                'useListState',
                'insert',
                'at should be a number.',
            ].join('\n'));
        }
        return setState((prev) => {
            const next = [...prev];
            next.splice(at, 0, item);
            return next;
        });
    };
    const find = ({ at, id }) => {
        /* istanbul ignore if */
        if (is_1.is.defined(at)) {
            if (!is_1.is.number(at)) {
                tiny_warning_1.default(false, [
                    'use-enhanced-state',
                    'useListState',
                    'find',
                    'at should be a number.',
                ].join('\n'));
                return undefined;
            }
            return state.find((item, index) => index === at);
        }
        /* istanbul ignore else */
        if (is_1.is.defined(id)) {
            // @ts-ignore
            return state.find((item) => item?.id === id);
        }
        return undefined;
    };
    // @ts-ignore
    const has = ({ id }) => !!find({ id });
    const indexOf = ({ id }) => {
        // @ts-ignore
        const item = find({ id });
        return state.indexOf(item);
    };
    const move = (from, to) => {
        /* istanbul ignore if */
        if (!is_1.is.number(from)) {
            tiny_warning_1.default(false, [
                'use-enhanced-state',
                'useListState',
                'move',
                'from must be an index number value',
            ].join('\n'));
            return;
        }
        /* istanbul ignore if */
        if (!is_1.is.number(to)) {
            tiny_warning_1.default(false, [
                'use-enhanced-state',
                'useListState',
                'move',
                'to must be an index number value',
            ].join('\n'));
            return;
        }
        return setState((prev) => {
            return arrayMove_1.arrayMove(prev, from, to);
        });
    };
    const remove = (arg) => {
        /* istanbul ignore if */
        if (!is_1.is.function(arg) && !is_1.is.plainObject(arg)) {
            tiny_warning_1.default(false, [
                'use-enhanced-state',
                'useListState',
                'remove',
                'argument should be either a function or props (Object).',
            ].join('\n'));
            return;
        }
        if (is_1.is.function(arg)) {
            let found = false;
            return setState((prev) => prev.filter((item, index) => {
                if (!found) {
                    found = !!arg(item, index);
                    return false;
                }
                return true;
            }));
        }
        const { at, id } = arg;
        /* istanbul ignore else */
        if (is_1.is.defined(at)) {
            /* istanbul ignore if */
            if (!is_1.is.number(at)) {
                tiny_warning_1.default(false, [
                    'use-enhanced-state',
                    'useListState',
                    'remove',
                    'at should be a number.',
                ].join('\n'));
                return undefined;
            }
            return setState((prev) => {
                return prev.filter((item, index) => index !== at);
            });
        }
        /* istanbul ignore else */
        if (is_1.is.defined(id)) {
            return setState((prev) => {
                // @ts-ignore
                return prev.filter((item) => item?.id !== id);
            });
        }
        /* istanbul ignore next */
        return undefined;
    };
    const removeAll = (filter) => setState((prev) => prev.filter((item, index) => !filter(item, index)));
    const update = ({ id, ...rest }) => {
        // @ts-ignore
        const item = find({ id });
        if (item) {
            return setState((prev) => prev.map((item) => {
                // @ts-ignore
                if (item?.id === id) {
                    return { ...item, ...rest };
                }
                return item;
            }));
        }
    };
    const methods = {
        add: append,
        append,
        find,
        get: find,
        has,
        indexOf,
        insert,
        move,
        prepend,
        remove,
        removeAll,
        set: setState,
        setState,
        update,
    };
    return [state, methods];
}
exports.useListState = useListState;
