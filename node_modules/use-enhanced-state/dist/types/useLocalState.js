"use strict";
/**
 * Source:
 * https://usehooks.com/useLocalStorage/
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useLocalState = void 0;
const react_1 = require("react");
/**
 * A enhanced hook for managing state that is saved/retrieved from localStorage.
 *
 * @param {string} key A namespace to save the state to localStorage.
 * @param {any} initialValue An initial state value.
 *
 * @example
 * const [config, setConfig] = useLocalState('config', { ... });
 */
function useLocalState(key, initialValue) {
    // State to store our value
    // Pass initial state function to useState so logic is only executed once
    const [storedValue, setStoredValue] = react_1.useState(() => {
        if (typeof window === 'undefined') {
            return initialValue;
        }
        try {
            // Get from local storage by key
            const item = window.localStorage.getItem(key);
            // Parse stored json or if none return initialValue
            return item ? JSON.parse(item) : initialValue;
        }
        catch (error) {
            // If error also return initialValue
            console.log(error);
            return initialValue;
        }
    });
    // Return a wrapped version of useState's setter function that ...
    // ... persists the new value to localStorage.
    const setValue = react_1.useCallback((value) => {
        try {
            // Allow value to be a function so we have same API as useState
            const valueToStore = value instanceof Function ? value(storedValue) : value;
            // Save state
            setStoredValue(valueToStore);
            // Save to local storage
            if (typeof window !== 'undefined') {
                window.localStorage.setItem(key, JSON.stringify(valueToStore));
            }
        }
        catch (error) {
            // A more advanced implementation would handle the error case
            console.log(error);
        }
    }, []);
    return [storedValue, setValue];
}
exports.useLocalState = useLocalState;
