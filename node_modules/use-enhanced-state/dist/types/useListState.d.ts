/// <reference types="react" />
declare type ListFilter<T> = (item: T, index: number) => boolean;
declare type ListStateMethods<T> = {
    /**
     * Adds a new item (to the end) to the Array state.
     *
     * @example
     * stateFns.add({ id: 'a', ...})
     */
    add: (next: T) => void;
    /**
     * Adds a new item to the end of the Array state.
     *
     * @example
     * stateFns.add({ id: 'a', ...})
     */
    append: (next: T) => void;
    /**
     * Retrieves an item from the Array state.
     *
     * @example
     * stateFns.find({ id: 'a' })
     */
    find: ({ at, id }: {
        at?: number;
        id?: any;
    }) => any;
    /**
     * Retrieves an item from the Array state.
     *
     * @example
     * stateFns.find({ id: 'a' })
     */
    get: ({ at, id }: {
        at?: number;
        id?: any;
    }) => any;
    /**
     * Checks to see if the Array state contains an item.
     *
     * @example
     * stateFns.has({ id: 'a' })
     */
    has: ({ id }: {
        id?: any;
    }) => boolean;
    /**
     * Checks the index of an item.
     *
     * @example
     * stateFns.indexOf({ id: 'a' })
     */
    indexOf: ({ id }: {
        id?: any;
    }) => number | undefined;
    /**
     * Adds a new item to a specific index of the Array state.
     *
     * @example
     * stateFns.insert({ at: 3, item: {...} })
     */
    insert: ({ at, item }: {
        at?: number;
        item: T;
    }) => void;
    /**
     * Moves an item within the the Array state, using the previous
     * (from) index to the next (to) index.
     *
     * @example
     * stateFns.move(1, 3)
     */
    move: (from: number, to: number) => void;
    /**
     * Adds a new item to the beginning of the Array state.
     *
     * @example
     * stateFns.add({ id: 'a', ...})
     */
    prepend: (next: T) => void;
    /**
     * Removes an item from the Array state. Item can be removed by matching
     * an index (at) or an id. Alternatively, a filter match (function) can
     * be provided.
     *
     * @example
     * stateFns.remove({ id: 'a' })
     * stateFns.remove(item) => item.id === 'a')
     */
    remove: (props: {
        at?: number;
        id?: any;
    } | ListFilter<T>) => void;
    /**
     * Removes all items from the Array state, based on a filter match.
     *
     * @example
     * stateFns.removeAll((item) => item.value > 50)
     */
    removeAll: (filter: ListFilter<T>) => void;
    /**
     * Sets the state.
     *
     * @example
     * stateFns.set([{ id: 'a' }])
     */
    set: React.Dispatch<React.SetStateAction<T[]>>;
    /**
     * Sets the state.
     *
     * @example
     * stateFns.set([{ id: 'a' }])
     */
    setState: React.Dispatch<React.SetStateAction<T[]>>;
    /**
     * Update an item, based on an id match.
     *
     * @example
     * stateFns.update({ id: 'a', title 'b'})
     */
    update: (props: any) => void;
};
declare type ListStateHook<T> = [Array<T>, ListStateMethods<T>];
/**
 * A enhanced hook for managing flat Array states.
 *
 * @param {Array<any>} initialValue An initial state value.
 *
 * @example
 * const [state, stateFns] = useListState([...]);
 * ...
 * stateFns.move(1, 5); // Moves an item from index of 1 to 5.
 */
export declare function useListState<T>(initialState?: T[]): ListStateHook<T>;
export {};
