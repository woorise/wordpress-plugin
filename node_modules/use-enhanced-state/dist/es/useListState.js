function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { is } from '@itsjonq/is';
import { arrayMove } from './arrayMove';
import { useState } from 'react';
import warning from 'tiny-warning';

/**
 * A enhanced hook for managing flat Array states.
 *
 * @param {Array<any>} initialValue An initial state value.
 *
 * @example
 * const [state, stateFns] = useListState([...]);
 * ...
 * stateFns.move(1, 5); // Moves an item from index of 1 to 5.
 */
export function useListState(initialState) {
  process.env.NODE_ENV !== "production" ? warning(is.array(initialState), ['use-enhanced-state', 'useListState', 'State must be an array.'].join('\n')) : void 0;

  var _useState = useState(
  /* istanbul ignore next */
  is.array(initialState) ? initialState : []),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var append = function (next) {
    return setState(function (prev) {
      return [].concat(prev, [next]);
    });
  };

  var find = function (_ref2) {
    var at = _ref2.at,
        id = _ref2.id;

    /* istanbul ignore if */
    if (is.defined(at)) {
      if (!is.number(at)) {
        process.env.NODE_ENV !== "production" ? warning(false, ['use-enhanced-state', 'useListState', 'find', 'at should be a number.'].join('\n')) : void 0;
        return undefined;
      }

      return state.find(function (item, index) {
        return index === at;
      });
    }
    /* istanbul ignore else */


    if (is.defined(id)) {
      // @ts-ignore
      return state.find(function (item) {
        return (item === null || item === void 0 ? void 0 : item.id) === id;
      });
    }

    return undefined;
  }; // @ts-ignore


  return [state, {
    add: append,
    append: append,
    find: find,
    get: find,
    has: function has(_ref3) {
      var id = _ref3.id;
      return !!find({
        id: id
      });
    },
    indexOf: function indexOf(_ref4) {
      var id = _ref4.id;
      // @ts-ignore
      var item = find({
        id: id
      });
      return state.indexOf(item);
    },
    insert: function insert(_ref) {
      var at = _ref.at,
          item = _ref.item;

      /* istanbul ignore if */
      if (!is.number(at)) {
        process.env.NODE_ENV !== "production" ? warning(false, ['use-enhanced-state', 'useListState', 'insert', 'at should be a number.'].join('\n')) : void 0;
      }

      return setState(function (prev) {
        var next = [].concat(prev);
        next.splice(at, 0, item);
        return next;
      });
    },
    move: function move(from, to) {
      /* istanbul ignore if */
      if (!is.number(from)) {
        process.env.NODE_ENV !== "production" ? warning(false, ['use-enhanced-state', 'useListState', 'move', 'from must be an index number value'].join('\n')) : void 0;
        return;
      }
      /* istanbul ignore if */


      if (!is.number(to)) {
        process.env.NODE_ENV !== "production" ? warning(false, ['use-enhanced-state', 'useListState', 'move', 'to must be an index number value'].join('\n')) : void 0;
        return;
      }

      return setState(function (prev) {
        return arrayMove(prev, from, to);
      });
    },
    prepend: function prepend(next) {
      return setState(function (prev) {
        return [next].concat(prev);
      });
    },
    remove: function remove(arg) {
      /* istanbul ignore if */
      if (!is.function(arg) && !is.plainObject(arg)) {
        process.env.NODE_ENV !== "production" ? warning(false, ['use-enhanced-state', 'useListState', 'remove', 'argument should be either a function or props (Object).'].join('\n')) : void 0;
        return;
      }

      if (is.function(arg)) {
        var found = false;
        return setState(function (prev) {
          return prev.filter(function (item, index) {
            if (!found) {
              found = !!arg(item, index);
              return false;
            }

            return true;
          });
        });
      }

      var at = arg.at,
          id = arg.id;
      /* istanbul ignore else */

      if (is.defined(at)) {
        /* istanbul ignore if */
        if (!is.number(at)) {
          process.env.NODE_ENV !== "production" ? warning(false, ['use-enhanced-state', 'useListState', 'remove', 'at should be a number.'].join('\n')) : void 0;
          return undefined;
        }

        return setState(function (prev) {
          return prev.filter(function (item, index) {
            return index !== at;
          });
        });
      }
      /* istanbul ignore else */


      if (is.defined(id)) {
        return setState(function (prev) {
          // @ts-ignore
          return prev.filter(function (item) {
            return (item === null || item === void 0 ? void 0 : item.id) !== id;
          });
        });
      }
      /* istanbul ignore next */


      return undefined;
    },
    removeAll: function removeAll(filter) {
      return setState(function (prev) {
        return prev.filter(function (item, index) {
          return !filter(item, index);
        });
      });
    },
    set: setState,
    setState: setState,
    update: function update(_ref5) {
      var id = _ref5.id,
          rest = _objectWithoutProperties(_ref5, ["id"]);

      // @ts-ignore
      var item = find({
        id: id
      });

      if (item) {
        return setState(function (prev) {
          return prev.map(function (item) {
            // @ts-ignore
            if ((item === null || item === void 0 ? void 0 : item.id) === id) {
              return _objectSpread(_objectSpread({}, item), rest);
            }

            return item;
          });
        });
      }
    }
  }];
}