function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { fireEvent, render } from '@testing-library/react';
import React from 'react';
import { useBoolState } from '../useBoolState';
describe('useBoolState', function () {
  test('should adjust array state based on provided data methods', function () {
    var _render = render( /*#__PURE__*/React.createElement(function Component() {
      var _useBoolState = useBoolState(false),
          _useBoolState2 = _slicedToArray(_useBoolState, 2),
          state = _useBoolState2[0],
          stateFns = _useBoolState2[1];

      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.true();
        }
      }, "true"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.false();
        }
      }, "false"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.truthy();
        }
      }, "truthy"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.falsy();
        }
      }, "falsy"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.toggle();
        }
      }, "toggle"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.set(true);
        }
      }, "set"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.setState(false);
        }
      }, "setState"), /*#__PURE__*/React.createElement("div", null, "state: ", state ? 'true' : 'false'));
    }, null)),
        getByText = _render.getByText;

    fireEvent.click(getByText('true'));
    expect(getByText(/state/).innerHTML).toContain('true');
    fireEvent.click(getByText('false'));
    expect(getByText(/state/).innerHTML).toContain('false');
    fireEvent.click(getByText('truthy'));
    expect(getByText(/state/).innerHTML).toContain('true');
    fireEvent.click(getByText('falsy'));
    expect(getByText(/state/).innerHTML).toContain('false');
    fireEvent.click(getByText('toggle'));
    expect(getByText(/state/).innerHTML).toContain('true');
    fireEvent.click(getByText('toggle'));
    expect(getByText(/state/).innerHTML).toContain('false');
    fireEvent.click(getByText('toggle'));
    expect(getByText(/state/).innerHTML).toContain('true');
    fireEvent.click(getByText('toggle'));
    expect(getByText(/state/).innerHTML).toContain('false');
    fireEvent.click(getByText('set'));
    expect(getByText(/state/).innerHTML).toContain('true');
    fireEvent.click(getByText('setState'));
    expect(getByText(/state/).innerHTML).toContain('false');
  });
});