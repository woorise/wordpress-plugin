function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { fireEvent, render } from '@testing-library/react';
import React from 'react';
import { useListState } from '../useListState';
describe('useListState', function () {
  test('should adjust array state based on provided data methods', function () {
    var _render = render( /*#__PURE__*/React.createElement(function Component() {
      var _useListState = useListState([{
        id: 1
      }, {
        id: 2
      }, {
        id: 3
      }]),
          _useListState2 = _slicedToArray(_useListState, 2),
          state = _useListState2[0],
          stateFns = _useListState2[1];

      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.add({
            id: state.length + 1
          });
        }
      }, "add"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.remove({
            at: state.length - 1
          });
        }
      }, "remove"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.remove({
            id: 3
          });
        }
      }, "removeId"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.append({
            id: 'append'
          });
        }
      }, "append"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.prepend({
            id: 'prepend'
          });
        }
      }, "prepend"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.move(state.length - 1, 0);
        }
      }, "move"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.insert({
            at: 2,
            item: {
              id: 'insert'
            }
          });
        }
      }, "insert"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.set([]);
        }
      }, "set"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.setState([{
            id: 1
          }]);
        }
      }, "setState"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.remove(function (item) {
            return item.id === 1;
          });
        }
      }, "removeOne"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.removeAll(function (item) {
            return typeof item.id === 'number';
          });
        }
      }, "removeAll"), /*#__PURE__*/React.createElement("button", {
        onClick: function onClick() {
          return stateFns.update({
            id: 1,
            title: 'update'
          });
        }
      }, "update"), /*#__PURE__*/React.createElement("div", null, stateFns.has({
        id: 1
      }) ? 'has' : 'no'), /*#__PURE__*/React.createElement("div", null, stateFns.find({
        id: 1
      }) ? 'find' : 'no'), /*#__PURE__*/React.createElement("div", null, stateFns.get({
        at: 1
      }) ? 'get' : 'no'), /*#__PURE__*/React.createElement("div", null, stateFns.indexOf({
        id: 1
      }) ? '1' : '0'), /*#__PURE__*/React.createElement("div", null, stateFns.find({
        id: 100
      }) ? 'yes' : 'no'), /*#__PURE__*/React.createElement("div", null, stateFns.find({}) ? 'yes' : 'no'), /*#__PURE__*/React.createElement("div", null, stateFns.update({
        id: 'nooooope'
      }) ? 'yes' : 'no'), /*#__PURE__*/React.createElement("ul", null, state.map(function (item) {
        return /*#__PURE__*/React.createElement("li", {
          key: item.id
        }, item.id, ":", item.title);
      })));
    }, null)),
        container = _render.container,
        getByText = _render.getByText;

    var list = container.querySelector('ul');
    var add = getByText('add');
    var append = getByText('append');
    var prepend = getByText('prepend');
    var remove = getByText('remove');
    var move = getByText('move');
    var insert = getByText('insert');
    var has = getByText('has');
    var find = getByText('find');
    var get = getByText('get');
    var set = getByText('set');
    var setState = getByText('setState');
    var removeOne = getByText('removeOne');
    var removeAll = getByText('removeAll');
    var removeId = getByText('removeId');
    var update = getByText('update'); // get

    expect(get).toBeTruthy(); // find

    expect(find).toBeTruthy(); // has

    expect(has).toBeTruthy(); // add

    fireEvent.click(add);
    expect(list.children).toHaveLength(4);
    fireEvent.click(add);
    expect(list.children).toHaveLength(5); // remove

    fireEvent.click(remove);
    expect(list.children).toHaveLength(4);
    fireEvent.click(remove);
    expect(list.children).toHaveLength(3); // append

    fireEvent.click(append);
    expect(list.children).toHaveLength(4);
    expect(list.children[list.children.length - 1].innerHTML).toContain('append'); // prepend

    fireEvent.click(prepend);
    expect(list.children).toHaveLength(5);
    expect(list.children[0].innerHTML).toContain('prepend'); // move

    fireEvent.click(move);
    expect(list.children).toHaveLength(5);
    expect(list.children[0].innerHTML).toContain('append');
    fireEvent.click(move);
    expect(list.children).toHaveLength(5);
    expect(list.children[0].innerHTML).toContain('3');
    fireEvent.click(move);
    expect(list.children).toHaveLength(5);
    expect(list.children[0].innerHTML).toContain('2');
    fireEvent.click(move);
    expect(list.children).toHaveLength(5);
    expect(list.children[0].innerHTML).toContain('1');
    fireEvent.click(move);
    expect(list.children).toHaveLength(5);
    expect(list.children[0].innerHTML).toContain('prepend'); // insert

    fireEvent.click(insert);
    expect(list.children).toHaveLength(6);
    expect(list.children[2].innerHTML).toContain('insert'); // set

    fireEvent.click(set);
    expect(list.children).toHaveLength(0); // setState

    fireEvent.click(setState);
    expect(list.children).toHaveLength(1);
    /**
     * Repopulate data
     */

    fireEvent.click(add);
    fireEvent.click(add);
    fireEvent.click(add);
    fireEvent.click(add);
    expect(list.children).toHaveLength(5); // removeOne

    fireEvent.click(removeOne);
    expect(list.children).toHaveLength(4);
    expect(list.innerHTML).not.toContain('1'); // removeAll

    fireEvent.click(removeAll);
    expect(list.children).toHaveLength(0);
    /**
     * Repopulate data
     */

    fireEvent.click(add);
    fireEvent.click(add);
    fireEvent.click(add);
    fireEvent.click(add);
    fireEvent.click(add);
    expect(list.children).toHaveLength(5); // remove (based on ID)

    fireEvent.click(removeId);
    expect(list.children).toHaveLength(4); // update

    fireEvent.click(update);
    expect(list.children[0].innerHTML).toContain('update');
  });
});